
CANDiagnostic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c64  080085f8  080085f8  000185f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800925c  0800925c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800925c  0800925c  0001925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009264  08009264  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009264  08009264  00019264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009268  08009268  00019268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800926c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000218  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eca5  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024bf  00000000  00000000  0002eec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  00031380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a30  00000000  00000000  00031ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021615  00000000  00000000  000328d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbba  00000000  00000000  00053eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8caf  00000000  00000000  00060aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129756  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e78  00000000  00000000  001297ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085dc 	.word	0x080085dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	080085dc 	.word	0x080085dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <spi1_communication>:

uint8_t chRetry = 0;
uint8_t chTemp = 0;

void spi1_communication(uint8_t send_char)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 8000f4a:	e005      	b.n	8000f58 <spi1_communication+0x18>
		if (++ chRetry > 200) {
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <spi1_communication+0x7c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <spi1_communication+0x7c>)
 8000f56:	701a      	strb	r2, [r3, #0]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 8000f58:	4819      	ldr	r0, [pc, #100]	; (8000fc0 <spi1_communication+0x80>)
 8000f5a:	f004 fb3b 	bl	80055d4 <HAL_SPI_GetState>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d0f3      	beq.n	8000f4c <spi1_communication+0xc>

		}
	}

	//SPI_I2S_SendData(SPI1, send_char);
	HAL_SPI_Transmit(&hspi1, &send_char, 1, 100);
 8000f64:	1df9      	adds	r1, r7, #7
 8000f66:	2364      	movs	r3, #100	; 0x64
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <spi1_communication+0x80>)
 8000f6c:	f003 ff43 	bl	8004df6 <HAL_SPI_Transmit>

	chRetry=0;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <spi1_communication+0x7c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX){
 8000f76:	e005      	b.n	8000f84 <spi1_communication+0x44>
		if (++ chRetry > 200) {
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <spi1_communication+0x7c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <spi1_communication+0x7c>)
 8000f82:	701a      	strb	r2, [r3, #0]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX){
 8000f84:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <spi1_communication+0x80>)
 8000f86:	f004 fb25 	bl	80055d4 <HAL_SPI_GetState>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d0f3      	beq.n	8000f78 <spi1_communication+0x38>

		}
	}

	chTemp = HAL_SPI_Receive(&hspi1, &send_char, 1, 100);
 8000f90:	1df9      	adds	r1, r7, #7
 8000f92:	2364      	movs	r3, #100	; 0x64
 8000f94:	2201      	movs	r2, #1
 8000f96:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <spi1_communication+0x80>)
 8000f98:	f004 f869 	bl	800506e <HAL_SPI_Receive>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <spi1_communication+0x84>)
 8000fa2:	701a      	strb	r2, [r3, #0]

	/* Wait until the BSY flag is set */
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8000fa4:	bf00      	nop
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <spi1_communication+0x80>)
 8000fa8:	f004 fb14 	bl	80055d4 <HAL_SPI_GetState>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d0f9      	beq.n	8000fa6 <spi1_communication+0x66>
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000208 	.word	0x20000208
 8000fc0:	20000354 	.word	0x20000354
 8000fc4:	20000209 	.word	0x20000209

08000fc8 <lcd_write_byte>:

void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
    if(chCmd) {
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <lcd_write_byte+0x24>
        LCD_DC_H();
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <lcd_write_byte+0x54>)
 8000fe6:	f003 fa4f 	bl	8004488 <HAL_GPIO_WritePin>
 8000fea:	e005      	b.n	8000ff8 <lcd_write_byte+0x30>
    } else {
        LCD_DC_L();
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff2:	480a      	ldr	r0, [pc, #40]	; (800101c <lcd_write_byte+0x54>)
 8000ff4:	f003 fa48 	bl	8004488 <HAL_GPIO_WritePin>
    }

    LCD_CS_L();
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2180      	movs	r1, #128	; 0x80
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <lcd_write_byte+0x54>)
 8000ffe:	f003 fa43 	bl	8004488 <HAL_GPIO_WritePin>
    spi1_communication(chByte);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff9b 	bl	8000f40 <spi1_communication>
    LCD_CS_H();
 800100a:	2201      	movs	r2, #1
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	4803      	ldr	r0, [pc, #12]	; (800101c <lcd_write_byte+0x54>)
 8001010:	f003 fa3a 	bl	8004488 <HAL_GPIO_WritePin>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40020400 	.word	0x40020400

08001020 <lcd_write_command>:

void lcd_write_command(uint8_t chRegister, uint8_t chValue)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ffc7 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	2101      	movs	r1, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ffc2 	bl	8000fc8 <lcd_write_byte>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <lcd_clear_screen>:
	lcd_write_byte(hwYpos&0xff,LCD_DATA);
#endif
}

void lcd_clear_screen(uint16_t hwColor)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
	uint32_t i, wCount = LCD_WIDTH;
 8001056:	23f0      	movs	r3, #240	; 0xf0
 8001058:	60bb      	str	r3, [r7, #8]
	wCount *= LCD_HEIGHT;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	60bb      	str	r3, [r7, #8]

#ifdef HX8347D_DEVICE
	lcd_set_cursor(0, 0);
	lcd_write_byte(0x22, LCD_CMD);
#elif defined ST7789_DEVICE
	lcd_write_byte(0x2A,LCD_CMD);
 8001066:	2100      	movs	r1, #0
 8001068:	202a      	movs	r0, #42	; 0x2a
 800106a:	f7ff ffad 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800106e:	2101      	movs	r1, #1
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ffa9 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8001076:	2101      	movs	r1, #1
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff ffa5 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800107e:	2101      	movs	r1, #1
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ffa1 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 8001086:	2101      	movs	r1, #1
 8001088:	20ef      	movs	r0, #239	; 0xef
 800108a:	f7ff ff9d 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 800108e:	2100      	movs	r1, #0
 8001090:	202b      	movs	r0, #43	; 0x2b
 8001092:	f7ff ff99 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8001096:	2101      	movs	r1, #1
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ff95 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800109e:	2101      	movs	r1, #1
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ff91 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 80010a6:	2101      	movs	r1, #1
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff ff8d 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 80010ae:	2101      	movs	r1, #1
 80010b0:	208f      	movs	r0, #143	; 0x8f
 80010b2:	f7ff ff89 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x2C,LCD_CMD);
 80010b6:	2100      	movs	r1, #0
 80010b8:	202c      	movs	r0, #44	; 0x2c
 80010ba:	f7ff ff85 	bl	8000fc8 <lcd_write_byte>
#endif
	LCD_CS_L();
 80010be:	2200      	movs	r2, #0
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	4814      	ldr	r0, [pc, #80]	; (8001114 <lcd_clear_screen+0xc8>)
 80010c4:	f003 f9e0 	bl	8004488 <HAL_GPIO_WritePin>
	LCD_DC_H();
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <lcd_clear_screen+0xc8>)
 80010d0:	f003 f9da 	bl	8004488 <HAL_GPIO_WritePin>
	for(i=0;i<wCount;i++){
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e00e      	b.n	80010f8 <lcd_clear_screen+0xac>
		spi1_communication(hwColor>>8);

//		spi1_communication(hwColor>>8);
//		spi1_communication((uint8_t)(hwColor&0xff));
#elif defined ST7789_DEVICE
		spi1_communication(hwColor>>8);
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff2c 	bl	8000f40 <spi1_communication>
		spi1_communication((uint8_t)(hwColor&0xff));
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff27 	bl	8000f40 <spi1_communication>
	for(i=0;i<wCount;i++){
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3ec      	bcc.n	80010da <lcd_clear_screen+0x8e>
#endif
	}
	LCD_CS_H();
 8001100:	2201      	movs	r2, #1
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <lcd_clear_screen+0xc8>)
 8001106:	f003 f9bf 	bl	8004488 <HAL_GPIO_WritePin>
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020400 	.word	0x40020400

08001118 <lcd_init>:

void lcd_init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	//lcd_ctrl_port_init();
	LCD_RST_H();
 800111c:	2201      	movs	r2, #1
 800111e:	2104      	movs	r1, #4
 8001120:	4881      	ldr	r0, [pc, #516]	; (8001328 <lcd_init+0x210>)
 8001122:	f003 f9b1 	bl	8004488 <HAL_GPIO_WritePin>
	//spi_init();

	LCD_CS_H();
 8001126:	2201      	movs	r2, #1
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	487f      	ldr	r0, [pc, #508]	; (8001328 <lcd_init+0x210>)
 800112c:	f003 f9ac 	bl	8004488 <HAL_GPIO_WritePin>
	LCD_BKL_H();
 8001130:	2201      	movs	r2, #1
 8001132:	2140      	movs	r1, #64	; 0x40
 8001134:	487c      	ldr	r0, [pc, #496]	; (8001328 <lcd_init+0x210>)
 8001136:	f003 f9a7 	bl	8004488 <HAL_GPIO_WritePin>
#ifdef 	ST7789_DEVICE
	LCD_RST_H();
 800113a:	2201      	movs	r2, #1
 800113c:	2104      	movs	r1, #4
 800113e:	487a      	ldr	r0, [pc, #488]	; (8001328 <lcd_init+0x210>)
 8001140:	f003 f9a2 	bl	8004488 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001144:	2005      	movs	r0, #5
 8001146:	f001 fbc9 	bl	80028dc <HAL_Delay>
	LCD_RST_L();
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	4876      	ldr	r0, [pc, #472]	; (8001328 <lcd_init+0x210>)
 8001150:	f003 f99a 	bl	8004488 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001154:	2005      	movs	r0, #5
 8001156:	f001 fbc1 	bl	80028dc <HAL_Delay>
	LCD_RST_H();
 800115a:	2201      	movs	r2, #1
 800115c:	2104      	movs	r1, #4
 800115e:	4872      	ldr	r0, [pc, #456]	; (8001328 <lcd_init+0x210>)
 8001160:	f003 f992 	bl	8004488 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001164:	2005      	movs	r0, #5
 8001166:	f001 fbb9 	bl	80028dc <HAL_Delay>
	LCD_CS_H();
 800116a:	2201      	movs	r2, #1
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	486e      	ldr	r0, [pc, #440]	; (8001328 <lcd_init+0x210>)
 8001170:	f003 f98a 	bl	8004488 <HAL_GPIO_WritePin>
	lcd_write_command(0x07,0x00);
	lcd_write_command(0x08,0x01);
	lcd_write_command(0x09,0x3F);

#elif defined ST7789_DEVICE
	lcd_write_byte(0x11,LCD_CMD);
 8001174:	2100      	movs	r1, #0
 8001176:	2011      	movs	r0, #17
 8001178:	f7ff ff26 	bl	8000fc8 <lcd_write_byte>
	HAL_Delay(10);
 800117c:	200a      	movs	r0, #10
 800117e:	f001 fbad 	bl	80028dc <HAL_Delay>
	lcd_write_command(0x36,0x00);
 8001182:	2100      	movs	r1, #0
 8001184:	2036      	movs	r0, #54	; 0x36
 8001186:	f7ff ff4b 	bl	8001020 <lcd_write_command>
	lcd_write_command(0x3a,0x05);
 800118a:	2105      	movs	r1, #5
 800118c:	203a      	movs	r0, #58	; 0x3a
 800118e:	f7ff ff47 	bl	8001020 <lcd_write_command>
	lcd_write_byte(0xb2,LCD_CMD);
 8001192:	2100      	movs	r1, #0
 8001194:	20b2      	movs	r0, #178	; 0xb2
 8001196:	f7ff ff17 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 800119a:	2101      	movs	r1, #1
 800119c:	200c      	movs	r0, #12
 800119e:	f7ff ff13 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 80011a2:	2101      	movs	r1, #1
 80011a4:	200c      	movs	r0, #12
 80011a6:	f7ff ff0f 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80011aa:	2101      	movs	r1, #1
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff ff0b 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 80011b2:	2101      	movs	r1, #1
 80011b4:	2033      	movs	r0, #51	; 0x33
 80011b6:	f7ff ff07 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 80011ba:	2101      	movs	r1, #1
 80011bc:	2033      	movs	r0, #51	; 0x33
 80011be:	f7ff ff03 	bl	8000fc8 <lcd_write_byte>
	lcd_write_command(0xb7,0x35);
 80011c2:	2135      	movs	r1, #53	; 0x35
 80011c4:	20b7      	movs	r0, #183	; 0xb7
 80011c6:	f7ff ff2b 	bl	8001020 <lcd_write_command>
	lcd_write_command(0xbb,0x28);
 80011ca:	2128      	movs	r1, #40	; 0x28
 80011cc:	20bb      	movs	r0, #187	; 0xbb
 80011ce:	f7ff ff27 	bl	8001020 <lcd_write_command>
	lcd_write_command(0xc0,0x3c);
 80011d2:	213c      	movs	r1, #60	; 0x3c
 80011d4:	20c0      	movs	r0, #192	; 0xc0
 80011d6:	f7ff ff23 	bl	8001020 <lcd_write_command>
	lcd_write_command(0xc2,0x01);
 80011da:	2101      	movs	r1, #1
 80011dc:	20c2      	movs	r0, #194	; 0xc2
 80011de:	f7ff ff1f 	bl	8001020 <lcd_write_command>
	lcd_write_command(0xc3,0x0b);
 80011e2:	210b      	movs	r1, #11
 80011e4:	20c3      	movs	r0, #195	; 0xc3
 80011e6:	f7ff ff1b 	bl	8001020 <lcd_write_command>
	lcd_write_command(0xc4,0x20);
 80011ea:	2120      	movs	r1, #32
 80011ec:	20c4      	movs	r0, #196	; 0xc4
 80011ee:	f7ff ff17 	bl	8001020 <lcd_write_command>
	lcd_write_command(0xc6,0x0f);
 80011f2:	210f      	movs	r1, #15
 80011f4:	20c6      	movs	r0, #198	; 0xc6
 80011f6:	f7ff ff13 	bl	8001020 <lcd_write_command>
	lcd_write_byte(0xD0,LCD_CMD);
 80011fa:	2100      	movs	r1, #0
 80011fc:	20d0      	movs	r0, #208	; 0xd0
 80011fe:	f7ff fee3 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0xa4,LCD_DATA);
 8001202:	2101      	movs	r1, #1
 8001204:	20a4      	movs	r0, #164	; 0xa4
 8001206:	f7ff fedf 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0xa1,LCD_DATA);
 800120a:	2101      	movs	r1, #1
 800120c:	20a1      	movs	r0, #161	; 0xa1
 800120e:	f7ff fedb 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0xe0,LCD_CMD);
 8001212:	2100      	movs	r1, #0
 8001214:	20e0      	movs	r0, #224	; 0xe0
 8001216:	f7ff fed7 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 800121a:	2101      	movs	r1, #1
 800121c:	20d0      	movs	r0, #208	; 0xd0
 800121e:	f7ff fed3 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 8001222:	2101      	movs	r1, #1
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff fecf 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x08,LCD_DATA);
 800122a:	2101      	movs	r1, #1
 800122c:	2008      	movs	r0, #8
 800122e:	f7ff fecb 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x0f,LCD_DATA);
 8001232:	2101      	movs	r1, #1
 8001234:	200f      	movs	r0, #15
 8001236:	f7ff fec7 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 800123a:	2101      	movs	r1, #1
 800123c:	2011      	movs	r0, #17
 800123e:	f7ff fec3 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x2a,LCD_DATA);
 8001242:	2101      	movs	r1, #1
 8001244:	202a      	movs	r0, #42	; 0x2a
 8001246:	f7ff febf 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x36,LCD_DATA);
 800124a:	2101      	movs	r1, #1
 800124c:	2036      	movs	r0, #54	; 0x36
 800124e:	f7ff febb 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x55,LCD_DATA);
 8001252:	2101      	movs	r1, #1
 8001254:	2055      	movs	r0, #85	; 0x55
 8001256:	f7ff feb7 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x44,LCD_DATA);
 800125a:	2101      	movs	r1, #1
 800125c:	2044      	movs	r0, #68	; 0x44
 800125e:	f7ff feb3 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x3a,LCD_DATA);
 8001262:	2101      	movs	r1, #1
 8001264:	203a      	movs	r0, #58	; 0x3a
 8001266:	f7ff feaf 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 800126a:	2101      	movs	r1, #1
 800126c:	200b      	movs	r0, #11
 800126e:	f7ff feab 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x06,LCD_DATA);
 8001272:	2101      	movs	r1, #1
 8001274:	2006      	movs	r0, #6
 8001276:	f7ff fea7 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 800127a:	2101      	movs	r1, #1
 800127c:	2011      	movs	r0, #17
 800127e:	f7ff fea3 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x20,LCD_DATA);
 8001282:	2101      	movs	r1, #1
 8001284:	2020      	movs	r0, #32
 8001286:	f7ff fe9f 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0xe1,LCD_CMD);
 800128a:	2100      	movs	r1, #0
 800128c:	20e1      	movs	r0, #225	; 0xe1
 800128e:	f7ff fe9b 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 8001292:	2101      	movs	r1, #1
 8001294:	20d0      	movs	r0, #208	; 0xd0
 8001296:	f7ff fe97 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x02,LCD_DATA);
 800129a:	2101      	movs	r1, #1
 800129c:	2002      	movs	r0, #2
 800129e:	f7ff fe93 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x07,LCD_DATA);
 80012a2:	2101      	movs	r1, #1
 80012a4:	2007      	movs	r0, #7
 80012a6:	f7ff fe8f 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x0a,LCD_DATA);
 80012aa:	2101      	movs	r1, #1
 80012ac:	200a      	movs	r0, #10
 80012ae:	f7ff fe8b 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 80012b2:	2101      	movs	r1, #1
 80012b4:	200b      	movs	r0, #11
 80012b6:	f7ff fe87 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x18,LCD_DATA);
 80012ba:	2101      	movs	r1, #1
 80012bc:	2018      	movs	r0, #24
 80012be:	f7ff fe83 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x34,LCD_DATA);
 80012c2:	2101      	movs	r1, #1
 80012c4:	2034      	movs	r0, #52	; 0x34
 80012c6:	f7ff fe7f 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x43,LCD_DATA);
 80012ca:	2101      	movs	r1, #1
 80012cc:	2043      	movs	r0, #67	; 0x43
 80012ce:	f7ff fe7b 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x4a,LCD_DATA);
 80012d2:	2101      	movs	r1, #1
 80012d4:	204a      	movs	r0, #74	; 0x4a
 80012d6:	f7ff fe77 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x2b,LCD_DATA);
 80012da:	2101      	movs	r1, #1
 80012dc:	202b      	movs	r0, #43	; 0x2b
 80012de:	f7ff fe73 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x1b,LCD_DATA);
 80012e2:	2101      	movs	r1, #1
 80012e4:	201b      	movs	r0, #27
 80012e6:	f7ff fe6f 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x1c,LCD_DATA);
 80012ea:	2101      	movs	r1, #1
 80012ec:	201c      	movs	r0, #28
 80012ee:	f7ff fe6b 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x22,LCD_DATA);
 80012f2:	2101      	movs	r1, #1
 80012f4:	2022      	movs	r0, #34	; 0x22
 80012f6:	f7ff fe67 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x1f,LCD_DATA);
 80012fa:	2101      	movs	r1, #1
 80012fc:	201f      	movs	r0, #31
 80012fe:	f7ff fe63 	bl	8000fc8 <lcd_write_byte>
	lcd_write_byte(0x29,LCD_CMD);
 8001302:	2100      	movs	r1, #0
 8001304:	2029      	movs	r0, #41	; 0x29
 8001306:	f7ff fe5f 	bl	8000fc8 <lcd_write_byte>
	lcd_write_command(0x51,0xff);
 800130a:	21ff      	movs	r1, #255	; 0xff
 800130c:	2051      	movs	r0, #81	; 0x51
 800130e:	f7ff fe87 	bl	8001020 <lcd_write_command>
	lcd_write_command(0x55,0xB0);
 8001312:	21b0      	movs	r1, #176	; 0xb0
 8001314:	2055      	movs	r0, #85	; 0x55
 8001316:	f7ff fe83 	bl	8001020 <lcd_write_command>
#endif

	lcd_clear_screen(WHITE);
 800131a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800131e:	f7ff fe95 	bl	800104c <lcd_clear_screen>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40020400 	.word	0x40020400
 800132c:	00000000 	.word	0x00000000

08001330 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t u16_ADCVal;
float Voltage;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
  if(hadc->Instance == ADC1){
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_ADC_ConvCpltCallback+0x68>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d122      	bne.n	8001388 <HAL_ADC_ConvCpltCallback+0x58>
	  u16_ADCVal = HAL_ADC_GetValue(&hadc1);
 8001342:	4816      	ldr	r0, [pc, #88]	; (800139c <HAL_ADC_ConvCpltCallback+0x6c>)
 8001344:	f001 fd51 	bl	8002dea <HAL_ADC_GetValue>
 8001348:	4603      	mov	r3, r0
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_ADC_ConvCpltCallback+0x70>)
 800134e:	801a      	strh	r2, [r3, #0]
	  Voltage = (float)u16_ADCVal/4096*3.3;
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_ADC_ConvCpltCallback+0x70>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80013a4 <HAL_ADC_ConvCpltCallback+0x74>
 8001360:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001364:	ee16 0a90 	vmov	r0, s13
 8001368:	f7ff f8ee 	bl	8000548 <__aeabi_f2d>
 800136c:	a308      	add	r3, pc, #32	; (adr r3, 8001390 <HAL_ADC_ConvCpltCallback+0x60>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f941 	bl	80005f8 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fc13 	bl	8000ba8 <__aeabi_d2f>
 8001382:	4603      	mov	r3, r0
 8001384:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001386:	6013      	str	r3, [r2, #0]
  }
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	66666666 	.word	0x66666666
 8001394:	400a6666 	.word	0x400a6666
 8001398:	40012000 	.word	0x40012000
 800139c:	200002bc 	.word	0x200002bc
 80013a0:	20000350 	.word	0x20000350
 80013a4:	45800000 	.word	0x45800000
 80013a8:	200002a0 	.word	0x200002a0
 80013ac:	00000000 	.word	0x00000000

080013b0 <HAL_CAN_RxFifo0MsgPendingCallback>:

int datacheck = 0;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b092      	sub	sp, #72	; 0x48
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader_Node1, RxData_Node1) == HAL_OK){
 80013b8:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80013ba:	4a70      	ldr	r2, [pc, #448]	; (800157c <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 80013bc:	2100      	movs	r1, #0
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f002 fa57 	bl	8003872 <HAL_CAN_GetRxMessage>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 80cb 	bne.w	8001562 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b2>
		uint32_t value = RxHeader_Node1.StdId;
 80013cc:	4b6b      	ldr	r3, [pc, #428]	; (800157c <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
		char valueString[11];
		sprintf(valueString, "DataID: 0x%04X", value);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d8:	4969      	ldr	r1, [pc, #420]	; (8001580 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 fed4 	bl	8006188 <siprintf>
		ST7789_WriteString(140, 10, valueString, Font_7x10, RED, WHITE);
 80013e0:	4b68      	ldr	r3, [pc, #416]	; (8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80013e2:	f107 011c 	add.w	r1, r7, #28
 80013e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ea:	9202      	str	r2, [sp, #8]
 80013ec:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80013f0:	9201      	str	r2, [sp, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	9200      	str	r2, [sp, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	460a      	mov	r2, r1
 80013fa:	210a      	movs	r1, #10
 80013fc:	208c      	movs	r0, #140	; 0x8c
 80013fe:	f000 fe79 	bl	80020f4 <ST7789_WriteString>

		for(int i=0;i<8;i++){
 8001402:	2300      	movs	r3, #0
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
 8001406:	e029      	b.n	800145c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
			uint8_t value = RxData_Node1[i];
 8001408:	4a5b      	ldr	r2, [pc, #364]	; (8001578 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140c:	4413      	add	r3, r2
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		    char valueString[5];
		    sprintf(valueString, "0x%02X", value);
 8001414:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	495a      	ldr	r1, [pc, #360]	; (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 800141e:	4618      	mov	r0, r3
 8001420:	f004 feb2 	bl	8006188 <siprintf>
		    ST7789_WriteString(140, (20*i)+30, valueString, Font_7x10, RED, WHITE);
 8001424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001426:	b29b      	uxth	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	b29b      	uxth	r3, r3
 8001432:	331e      	adds	r3, #30
 8001434:	b299      	uxth	r1, r3
 8001436:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8001438:	f107 0014 	add.w	r0, r7, #20
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	9202      	str	r2, [sp, #8]
 8001442:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001446:	9201      	str	r2, [sp, #4]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	9200      	str	r2, [sp, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4602      	mov	r2, r0
 8001450:	208c      	movs	r0, #140	; 0x8c
 8001452:	f000 fe4f 	bl	80020f4 <ST7789_WriteString>
		for(int i=0;i<8;i++){
 8001456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001458:	3301      	adds	r3, #1
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
 800145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145e:	2b07      	cmp	r3, #7
 8001460:	ddd2      	ble.n	8001408 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8001462:	2201      	movs	r2, #1
 8001464:	2102      	movs	r1, #2
 8001466:	4849      	ldr	r0, [pc, #292]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8001468:	f003 f80e 	bl	8004488 <HAL_GPIO_WritePin>

		if(RxData_Node1[0] == 0x7F){
 800146c:	4b42      	ldr	r3, [pc, #264]	; (8001578 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b7f      	cmp	r3, #127	; 0x7f
 8001472:	d137      	bne.n	80014e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
			if(RxData_Node1[2] == 0x11){
 8001474:	4b40      	ldr	r3, [pc, #256]	; (8001578 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001476:	789b      	ldrb	r3, [r3, #2]
 8001478:	2b11      	cmp	r3, #17
 800147a:	d10f      	bne.n	800149c <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
				ST7789_WriteString(0, 200, "serviceNotSupportedInActiveSession", Font_7x10, RED, WHITE);
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 800147e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001482:	9202      	str	r2, [sp, #8]
 8001484:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001488:	9201      	str	r2, [sp, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	9200      	str	r2, [sp, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a3f      	ldr	r2, [pc, #252]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8001492:	21c8      	movs	r1, #200	; 0xc8
 8001494:	2000      	movs	r0, #0
 8001496:	f000 fe2d 	bl	80020f4 <ST7789_WriteString>
			char valueString[11];
			sprintf(valueString, "Received Voltage: %f", receivedVoltage);
			ST7789_WriteString(0, 200, valueString, Font_7x10, RED, WHITE);
		}
	}
}
 800149a:	e062      	b.n	8001562 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b2>
			else if(RxData_Node1[2] == 0x31){
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800149e:	789b      	ldrb	r3, [r3, #2]
 80014a0:	2b31      	cmp	r3, #49	; 0x31
 80014a2:	d10f      	bne.n	80014c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
				ST7789_WriteString(0, 200, "requestOutOfRange", Font_7x10, RED, WHITE);
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80014a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014aa:	9202      	str	r2, [sp, #8]
 80014ac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80014b0:	9201      	str	r2, [sp, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	9200      	str	r2, [sp, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a36      	ldr	r2, [pc, #216]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80014ba:	21c8      	movs	r1, #200	; 0xc8
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 fe19 	bl	80020f4 <ST7789_WriteString>
}
 80014c2:	e04e      	b.n	8001562 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b2>
				ST7789_WriteString(0, 200, "Error", Font_7x10, RED, WHITE);
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80014c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ca:	9202      	str	r2, [sp, #8]
 80014cc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80014d0:	9201      	str	r2, [sp, #4]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2f      	ldr	r2, [pc, #188]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80014da:	21c8      	movs	r1, #200	; 0xc8
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 fe09 	bl	80020f4 <ST7789_WriteString>
}
 80014e2:	e03e      	b.n	8001562 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b2>
			uint16_t combinedValue = (uint16_t)((RxData_Node1[3] << 8) | RxData_Node1[4]);
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80014e6:	78db      	ldrb	r3, [r3, #3]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80014ee:	791b      	ldrb	r3, [r3, #4]
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
			float receivedVoltage = (float)combinedValue/4096*3.3;
 80014f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001502:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 8001506:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800150a:	ee16 0a90 	vmov	r0, s13
 800150e:	f7ff f81b 	bl	8000548 <__aeabi_f2d>
 8001512:	a317      	add	r3, pc, #92	; (adr r3, 8001570 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f86e 	bl	80005f8 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb40 	bl	8000ba8 <__aeabi_d2f>
 8001528:	4603      	mov	r3, r0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
			sprintf(valueString, "Received Voltage: %f", receivedVoltage);
 800152c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	f107 0008 	add.w	r0, r7, #8
 800153a:	4919      	ldr	r1, [pc, #100]	; (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800153c:	f004 fe24 	bl	8006188 <siprintf>
			ST7789_WriteString(0, 200, valueString, Font_7x10, RED, WHITE);
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154a:	9202      	str	r2, [sp, #8]
 800154c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001550:	9201      	str	r2, [sp, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	9200      	str	r2, [sp, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	460a      	mov	r2, r1
 800155a:	21c8      	movs	r1, #200	; 0xc8
 800155c:	2000      	movs	r0, #0
 800155e:	f000 fdc9 	bl	80020f4 <ST7789_WriteString>
}
 8001562:	bf00      	nop
 8001564:	3738      	adds	r7, #56	; 0x38
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	f3af 8000 	nop.w
 8001570:	66666666 	.word	0x66666666
 8001574:	400a6666 	.word	0x400a6666
 8001578:	2000032c 	.word	0x2000032c
 800157c:	200003d4 	.word	0x200003d4
 8001580:	080085f8 	.word	0x080085f8
 8001584:	20000000 	.word	0x20000000
 8001588:	08008608 	.word	0x08008608
 800158c:	40020400 	.word	0x40020400
 8001590:	08008610 	.word	0x08008610
 8001594:	08008634 	.word	0x08008634
 8001598:	08008648 	.word	0x08008648
 800159c:	45800000 	.word	0x45800000
 80015a0:	08008650 	.word	0x08008650

080015a4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08e      	sub	sp, #56	; 0x38
 80015a8:	af04      	add	r7, sp, #16
 80015aa:	6078      	str	r0, [r7, #4]
		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader_Node2, RxData_Node2) == HAL_OK){
 80015ac:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80015ae:	4a53      	ldr	r2, [pc, #332]	; (80016fc <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f002 f95d 	bl	8003872 <HAL_CAN_GetRxMessage>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 8097 	bne.w	80016ee <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
			uint32_t value = RxHeader_Node2.StdId;
 80015c0:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	623b      	str	r3, [r7, #32]
			char valueString[11];
			sprintf(valueString, "DataID: 0x%04X", value);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	6a3a      	ldr	r2, [r7, #32]
 80015cc:	494c      	ldr	r1, [pc, #304]	; (8001700 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f004 fdda 	bl	8006188 <siprintf>
			ST7789_WriteString(0, 10, valueString, Font_7x10, RED, WHITE);
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 80015d6:	f107 0114 	add.w	r1, r7, #20
 80015da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015de:	9202      	str	r2, [sp, #8]
 80015e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015e4:	9201      	str	r2, [sp, #4]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	9200      	str	r2, [sp, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	460a      	mov	r2, r1
 80015ee:	210a      	movs	r1, #10
 80015f0:	2000      	movs	r0, #0
 80015f2:	f000 fd7f 	bl	80020f4 <ST7789_WriteString>

            for(int i=0;i<8;i++){
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
 80015fa:	e027      	b.n	800164c <HAL_CAN_RxFifo1MsgPendingCallback+0xa8>
            	uint8_t value = RxData_Node2[i];
 80015fc:	4a3e      	ldr	r2, [pc, #248]	; (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	77fb      	strb	r3, [r7, #31]
            	char valueString[5];
            	sprintf(valueString, "0x%02X", value);
 8001606:	7ffa      	ldrb	r2, [r7, #31]
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	493e      	ldr	r1, [pc, #248]	; (8001708 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 800160e:	4618      	mov	r0, r3
 8001610:	f004 fdba 	bl	8006188 <siprintf>
            	ST7789_WriteString(0,(20*i)+30, valueString, Font_7x10, RED, WHITE);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	b29b      	uxth	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	b29b      	uxth	r3, r3
 8001622:	331e      	adds	r3, #30
 8001624:	b299      	uxth	r1, r3
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001628:	f107 000c 	add.w	r0, r7, #12
 800162c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001630:	9202      	str	r2, [sp, #8]
 8001632:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001636:	9201      	str	r2, [sp, #4]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	9200      	str	r2, [sp, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4602      	mov	r2, r0
 8001640:	2000      	movs	r0, #0
 8001642:	f000 fd57 	bl	80020f4 <ST7789_WriteString>
            for(int i=0;i<8;i++){
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	3301      	adds	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	2b07      	cmp	r3, #7
 8001650:	ddd4      	ble.n	80015fc <HAL_CAN_RxFifo1MsgPendingCallback+0x58>
            }

            if(RxData_Node2[0] != 0x22){
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b22      	cmp	r3, #34	; 0x22
 8001658:	d00a      	beq.n	8001670 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
            	TxData_Node2[0] = 0x7F;
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 800165c:	227f      	movs	r2, #127	; 0x7f
 800165e:	701a      	strb	r2, [r3, #0]
            	TxData_Node2[1] = RxData_Node2[0];
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001666:	705a      	strb	r2, [r3, #1]
            	TxData_Node2[2] = 0x11;
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 800166a:	2211      	movs	r2, #17
 800166c:	709a      	strb	r2, [r3, #2]
 800166e:	e030      	b.n	80016d2 <HAL_CAN_RxFifo1MsgPendingCallback+0x12e>
            }
            else if(RxData_Node2[0] == 0x22 && (RxData_Node2[1] != 0x34 || RxData_Node2[2] != 0x10)){
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b22      	cmp	r3, #34	; 0x22
 8001676:	d112      	bne.n	800169e <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 800167a:	785b      	ldrb	r3, [r3, #1]
 800167c:	2b34      	cmp	r3, #52	; 0x34
 800167e:	d103      	bne.n	8001688 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	2b10      	cmp	r3, #16
 8001686:	d00a      	beq.n	800169e <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
            	TxData_Node2[0] = 0x7F;
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 800168a:	227f      	movs	r2, #127	; 0x7f
 800168c:	701a      	strb	r2, [r3, #0]
            	TxData_Node2[1] = RxData_Node2[0];
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001694:	705a      	strb	r2, [r3, #1]
            	TxData_Node2[2] = 0x31;
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001698:	2231      	movs	r2, #49	; 0x31
 800169a:	709a      	strb	r2, [r3, #2]
 800169c:	e019      	b.n	80016d2 <HAL_CAN_RxFifo1MsgPendingCallback+0x12e>
            }
            else{
            	TxData_Node2[0] = 0x62;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 80016a0:	2262      	movs	r2, #98	; 0x62
 80016a2:	701a      	strb	r2, [r3, #0]
            	TxData_Node2[1] = RxData_Node2[1];
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80016a6:	785a      	ldrb	r2, [r3, #1]
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 80016aa:	705a      	strb	r2, [r3, #1]
            	TxData_Node2[2] = RxData_Node2[2];
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80016ae:	789a      	ldrb	r2, [r3, #2]
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 80016b2:	709a      	strb	r2, [r3, #2]
            	HAL_ADC_Start_IT(&hadc1);
 80016b4:	4816      	ldr	r0, [pc, #88]	; (8001710 <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 80016b6:	f001 f979 	bl	80029ac <HAL_ADC_Start_IT>
            	TxData_Node2[3] = (uint8_t)(u16_ADCVal >> 8);
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_CAN_RxFifo1MsgPendingCallback+0x170>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 80016c6:	70da      	strb	r2, [r3, #3]
            	TxData_Node2[4] = (uint8_t)(u16_ADCVal & 0xFF);
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_CAN_RxFifo1MsgPendingCallback+0x170>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 80016d0:	711a      	strb	r2, [r3, #4]
            }

			if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader_Node2, TxData_Node2, &TxMailbox) == HAL_OK){
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_CAN_RxFifo1MsgPendingCallback+0x174>)
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 80016d6:	4911      	ldr	r1, [pc, #68]	; (800171c <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 80016d8:	4811      	ldr	r0, [pc, #68]	; (8001720 <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 80016da:	f001 ffef 	bl	80036bc <HAL_CAN_AddTxMessage>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d104      	bne.n	80016ee <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2101      	movs	r1, #1
 80016e8:	480e      	ldr	r0, [pc, #56]	; (8001724 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>)
 80016ea:	f002 fecd 	bl	8004488 <HAL_GPIO_WritePin>

			}
		}
}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000298 	.word	0x20000298
 80016fc:	20000224 	.word	0x20000224
 8001700:	080085f8 	.word	0x080085f8
 8001704:	20000000 	.word	0x20000000
 8001708:	08008608 	.word	0x08008608
 800170c:	2000020c 	.word	0x2000020c
 8001710:	200002bc 	.word	0x200002bc
 8001714:	20000350 	.word	0x20000350
 8001718:	2000034c 	.word	0x2000034c
 800171c:	20000334 	.word	0x20000334
 8001720:	20000304 	.word	0x20000304
 8001724:	40020400 	.word	0x40020400

08001728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b094      	sub	sp, #80	; 0x50
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172e:	f001 f863 	bl	80027f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001732:	f000 f891 	bl	8001858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001736:	f000 fa21 	bl	8001b7c <MX_GPIO_Init>
  MX_CAN1_Init();
 800173a:	f000 f947 	bl	80019cc <MX_CAN1_Init>
  MX_CAN2_Init();
 800173e:	f000 f97b 	bl	8001a38 <MX_CAN2_Init>
  MX_SPI1_Init();
 8001742:	f000 f9af 	bl	8001aa4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001746:	f000 f8ef 	bl	8001928 <MX_ADC1_Init>
  MX_SPI2_Init();
 800174a:	f000 f9e1 	bl	8001b10 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  TxHeader_Node1.DLC = 8;
 800174e:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <main+0x118>)
 8001750:	2208      	movs	r2, #8
 8001752:	611a      	str	r2, [r3, #16]
    TxHeader_Node1.ExtId = 0x02;
 8001754:	4b3a      	ldr	r3, [pc, #232]	; (8001840 <main+0x118>)
 8001756:	2202      	movs	r2, #2
 8001758:	605a      	str	r2, [r3, #4]
    TxHeader_Node1.IDE = CAN_ID_STD;
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <main+0x118>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
    TxHeader_Node1.RTR = CAN_RTR_DATA;
 8001760:	4b37      	ldr	r3, [pc, #220]	; (8001840 <main+0x118>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
    TxHeader_Node1.StdId = 0x012;
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <main+0x118>)
 8001768:	2212      	movs	r2, #18
 800176a:	601a      	str	r2, [r3, #0]
    TxHeader_Node1.TransmitGlobalTime = DISABLE;
 800176c:	4b34      	ldr	r3, [pc, #208]	; (8001840 <main+0x118>)
 800176e:	2200      	movs	r2, #0
 8001770:	751a      	strb	r2, [r3, #20]

    TxHeader_Node2.DLC = 8;
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <main+0x11c>)
 8001774:	2208      	movs	r2, #8
 8001776:	611a      	str	r2, [r3, #16]
    TxHeader_Node2.ExtId = 0x02;
 8001778:	4b32      	ldr	r3, [pc, #200]	; (8001844 <main+0x11c>)
 800177a:	2202      	movs	r2, #2
 800177c:	605a      	str	r2, [r3, #4]
    TxHeader_Node2.IDE = CAN_ID_STD;
 800177e:	4b31      	ldr	r3, [pc, #196]	; (8001844 <main+0x11c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
    TxHeader_Node2.RTR = CAN_RTR_DATA;
 8001784:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <main+0x11c>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
    TxHeader_Node2.StdId = 0x0A2;
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <main+0x11c>)
 800178c:	22a2      	movs	r2, #162	; 0xa2
 800178e:	601a      	str	r2, [r3, #0]
    TxHeader_Node2.TransmitGlobalTime = DISABLE;
 8001790:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <main+0x11c>)
 8001792:	2200      	movs	r2, #0
 8001794:	751a      	strb	r2, [r3, #20]

      HAL_CAN_Start(&hcan1);
 8001796:	482c      	ldr	r0, [pc, #176]	; (8001848 <main+0x120>)
 8001798:	f001 ff4c 	bl	8003634 <HAL_CAN_Start>
      HAL_CAN_Start(&hcan2);
 800179c:	482b      	ldr	r0, [pc, #172]	; (800184c <main+0x124>)
 800179e:	f001 ff49 	bl	8003634 <HAL_CAN_Start>

      //CAN1 filter
      CAN_FilterTypeDef can1filterconfig;

          can1filterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	64bb      	str	r3, [r7, #72]	; 0x48
          can1filterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 80017a6:	2300      	movs	r3, #0
 80017a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          can1filterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
          can1filterconfig.FilterIdHigh = 0x0A2 << 5;
 80017ae:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
          can1filterconfig.FilterIdLow = 0x0000;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
          can1filterconfig.FilterMaskIdHigh = 0x0A2 << 5;
 80017b8:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
          can1filterconfig.FilterMaskIdLow = 0x0000;
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
          can1filterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	643b      	str	r3, [r7, #64]	; 0x40
          can1filterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80017c6:	2301      	movs	r3, #1
 80017c8:	647b      	str	r3, [r7, #68]	; 0x44
          can1filterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 80017ca:	230e      	movs	r3, #14
 80017cc:	64fb      	str	r3, [r7, #76]	; 0x4c

          HAL_CAN_ConfigFilter(&hcan1, &can1filterconfig);
 80017ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d2:	4619      	mov	r1, r3
 80017d4:	481c      	ldr	r0, [pc, #112]	; (8001848 <main+0x120>)
 80017d6:	f001 fe4d 	bl	8003474 <HAL_CAN_ConfigFilter>
      //End CAN1 filter

      //CAN1 filter
      CAN_FilterTypeDef can2filterconfig;

      	can2filterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80017da:	2301      	movs	r3, #1
 80017dc:	623b      	str	r3, [r7, #32]
          can2filterconfig.FilterBank = 14;  // which filter bank to use from the assigned ones
 80017de:	230e      	movs	r3, #14
 80017e0:	617b      	str	r3, [r7, #20]
          can2filterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	613b      	str	r3, [r7, #16]
          can2filterconfig.FilterIdHigh = 0x012 << 5;
 80017e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80017ea:	603b      	str	r3, [r7, #0]
          can2filterconfig.FilterIdLow = 0x0000;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
          can2filterconfig.FilterMaskIdHigh = 0x012 << 5;
 80017f0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80017f4:	60bb      	str	r3, [r7, #8]
          can2filterconfig.FilterMaskIdLow = 0x0000;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
          can2filterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
          can2filterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80017fe:	2301      	movs	r3, #1
 8001800:	61fb      	str	r3, [r7, #28]
          can2filterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8001802:	230e      	movs	r3, #14
 8001804:	627b      	str	r3, [r7, #36]	; 0x24

          HAL_CAN_ConfigFilter(&hcan2, &can2filterconfig);
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	4810      	ldr	r0, [pc, #64]	; (800184c <main+0x124>)
 800180c:	f001 fe32 	bl	8003474 <HAL_CAN_ConfigFilter>
       //End CAN1 filter

          HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8001810:	2102      	movs	r1, #2
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <main+0x120>)
 8001814:	f002 f93f 	bl	8003a96 <HAL_CAN_ActivateNotification>
          HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 8001818:	2110      	movs	r1, #16
 800181a:	480c      	ldr	r0, [pc, #48]	; (800184c <main+0x124>)
 800181c:	f002 f93b 	bl	8003a96 <HAL_CAN_ActivateNotification>

  lcd_init();
 8001820:	f7ff fc7a 	bl	8001118 <lcd_init>
  ST7789_Init();
 8001824:	f000 fb0a 	bl	8001e3c <ST7789_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Node1, TxData_Node1, &TxMailbox);
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <main+0x128>)
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <main+0x12c>)
 800182c:	4904      	ldr	r1, [pc, #16]	; (8001840 <main+0x118>)
 800182e:	4806      	ldr	r0, [pc, #24]	; (8001848 <main+0x120>)
 8001830:	f001 ff44 	bl	80036bc <HAL_CAN_AddTxMessage>



	  HAL_Delay(1000);
 8001834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001838:	f001 f850 	bl	80028dc <HAL_Delay>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Node1, TxData_Node1, &TxMailbox);
 800183c:	e7f4      	b.n	8001828 <main+0x100>
 800183e:	bf00      	nop
 8001840:	200002a4 	.word	0x200002a4
 8001844:	20000334 	.word	0x20000334
 8001848:	200003ac 	.word	0x200003ac
 800184c:	20000304 	.word	0x20000304
 8001850:	2000034c 	.word	0x2000034c
 8001854:	20000008 	.word	0x20000008

08001858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b094      	sub	sp, #80	; 0x50
 800185c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185e:	f107 0320 	add.w	r3, r7, #32
 8001862:	2230      	movs	r2, #48	; 0x30
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f004 f81c 	bl	80058a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <SystemClock_Config+0xc8>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	4a26      	ldr	r2, [pc, #152]	; (8001920 <SystemClock_Config+0xc8>)
 8001886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188a:	6413      	str	r3, [r2, #64]	; 0x40
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <SystemClock_Config+0xc8>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <SystemClock_Config+0xcc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a20      	ldr	r2, [pc, #128]	; (8001924 <SystemClock_Config+0xcc>)
 80018a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <SystemClock_Config+0xcc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b4:	2301      	movs	r3, #1
 80018b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018be:	2302      	movs	r3, #2
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80018c8:	230f      	movs	r3, #15
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80018cc:	2360      	movs	r3, #96	; 0x60
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018d4:	2304      	movs	r3, #4
 80018d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d8:	f107 0320 	add.w	r3, r7, #32
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fded 	bl	80044bc <HAL_RCC_OscConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018e8:	f000 f99a 	bl	8001c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ec:	230f      	movs	r3, #15
 80018ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f0:	2302      	movs	r3, #2
 80018f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2101      	movs	r1, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f003 f850 	bl	80049ac <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001912:	f000 f985 	bl	8001c20 <Error_Handler>
  }
}
 8001916:	bf00      	nop
 8001918:	3750      	adds	r7, #80	; 0x50
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800192e:	463b      	mov	r3, r7
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_ADC1_Init+0x98>)
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <MX_ADC1_Init+0x9c>)
 800193e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_ADC1_Init+0x98>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001954:	2200      	movs	r2, #0
 8001956:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_ADC1_Init+0x98>)
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001968:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <MX_ADC1_Init+0xa0>)
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_ADC1_Init+0x98>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001974:	2201      	movs	r2, #1
 8001976:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_ADC1_Init+0x98>)
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001982:	2201      	movs	r2, #1
 8001984:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001986:	480e      	ldr	r0, [pc, #56]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001988:	f000 ffcc 	bl	8002924 <HAL_ADC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001992:	f000 f945 	bl	8001c20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800199a:	2301      	movs	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800199e:	2306      	movs	r3, #6
 80019a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a2:	463b      	mov	r3, r7
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <MX_ADC1_Init+0x98>)
 80019a8:	f001 fa40 	bl	8002e2c <HAL_ADC_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80019b2:	f000 f935 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200002bc 	.word	0x200002bc
 80019c4:	40012000 	.word	0x40012000
 80019c8:	0f000001 	.word	0x0f000001

080019cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_CAN1_Init+0x64>)
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <MX_CAN1_Init+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_CAN1_Init+0x64>)
 80019d8:	2214      	movs	r2, #20
 80019da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_CAN1_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <MX_CAN1_Init+0x64>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_CAN1_Init+0x64>)
 80019ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_CAN1_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_CAN1_Init+0x64>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_CAN1_Init+0x64>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_CAN1_Init+0x64>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_CAN1_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_CAN1_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_CAN1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_CAN1_Init+0x64>)
 8001a1c:	f001 fc2e 	bl	800327c <HAL_CAN_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001a26:	f000 f8fb 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200003ac 	.word	0x200003ac
 8001a34:	40006400 	.word	0x40006400

08001a38 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a3e:	4a18      	ldr	r2, [pc, #96]	; (8001aa0 <MX_CAN2_Init+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 20;
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a44:	2214      	movs	r2, #20
 8001a46:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a5a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_CAN2_Init+0x64>)
 8001a88:	f001 fbf8 	bl	800327c <HAL_CAN_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001a92:	f000 f8c5 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000304 	.word	0x20000304
 8001aa0:	40006800 	.word	0x40006800

08001aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001aaa:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <MX_SPI1_Init+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001af0:	220a      	movs	r2, #10
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001af6:	f003 f8f5 	bl	8004ce4 <HAL_SPI_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b00:	f000 f88e 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000354 	.word	0x20000354
 8001b0c:	40013000 	.word	0x40013000

08001b10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <MX_SPI2_Init+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b5c:	220a      	movs	r2, #10
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <MX_SPI2_Init+0x64>)
 8001b62:	f003 f8bf 	bl	8004ce4 <HAL_SPI_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b6c:	f000 f858 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000240 	.word	0x20000240
 8001b78:	40003800 	.word	0x40003800

08001b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <MX_GPIO_Init+0x9c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <MX_GPIO_Init+0x9c>)
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <MX_GPIO_Init+0x9c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <MX_GPIO_Init+0x9c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <MX_GPIO_Init+0x9c>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_GPIO_Init+0x9c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_GPIO_Init+0x9c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <MX_GPIO_Init+0x9c>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_GPIO_Init+0x9c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LCD_RESET_Pin|LCD_CS_Pin
 8001be6:	2200      	movs	r2, #0
 8001be8:	f240 1187 	movw	r1, #391	; 0x187
 8001bec:	480b      	ldr	r0, [pc, #44]	; (8001c1c <MX_GPIO_Init+0xa0>)
 8001bee:	f002 fc4b 	bl	8004488 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 LCD_RESET_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LCD_RESET_Pin|LCD_CS_Pin
 8001bf2:	f240 1387 	movw	r3, #391	; 0x187
 8001bf6:	60fb      	str	r3, [r7, #12]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4804      	ldr	r0, [pc, #16]	; (8001c1c <MX_GPIO_Init+0xa0>)
 8001c0c:	f002 faa0 	bl	8004150 <HAL_GPIO_Init>

}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020400 	.word	0x40020400

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001c36:	2200      	movs	r2, #0
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <ST7789_WriteCommand+0x40>)
 8001c3c:	f002 fc24 	bl	8004488 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c46:	4809      	ldr	r0, [pc, #36]	; (8001c6c <ST7789_WriteCommand+0x40>)
 8001c48:	f002 fc1e 	bl	8004488 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001c4c:	1df9      	adds	r1, r7, #7
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	2201      	movs	r2, #1
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <ST7789_WriteCommand+0x44>)
 8001c56:	f003 f8ce 	bl	8004df6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <ST7789_WriteCommand+0x40>)
 8001c60:	f002 fc12 	bl	8004488 <HAL_GPIO_WritePin>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	20000354 	.word	0x20000354

08001c74 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	4816      	ldr	r0, [pc, #88]	; (8001cdc <ST7789_WriteData+0x68>)
 8001c84:	f002 fc00 	bl	8004488 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8e:	4813      	ldr	r0, [pc, #76]	; (8001cdc <ST7789_WriteData+0x68>)
 8001c90:	f002 fbfa 	bl	8004488 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001c94:	e015      	b.n	8001cc2 <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	bf28      	it	cs
 8001ca0:	4613      	movcs	r3, r2
 8001ca2:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001ca4:	89fa      	ldrh	r2, [r7, #14]
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <ST7789_WriteData+0x6c>)
 8001cae:	f003 f8a2 	bl	8004df6 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8001cb2:	89fb      	ldrh	r3, [r7, #14]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001cba:	89fb      	ldrh	r3, [r7, #14]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e6      	bne.n	8001c96 <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ST7789_WriteData+0x68>)
 8001cce:	f002 fbdb 	bl	8004488 <HAL_GPIO_WritePin>
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	20000354 	.word	0x20000354

08001ce4 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2180      	movs	r1, #128	; 0x80
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <ST7789_WriteSmallData+0x40>)
 8001cf4:	f002 fbc8 	bl	8004488 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cfe:	4809      	ldr	r0, [pc, #36]	; (8001d24 <ST7789_WriteSmallData+0x40>)
 8001d00:	f002 fbc2 	bl	8004488 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001d04:	1df9      	adds	r1, r7, #7
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4806      	ldr	r0, [pc, #24]	; (8001d28 <ST7789_WriteSmallData+0x44>)
 8001d0e:	f003 f872 	bl	8004df6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001d12:	2201      	movs	r2, #1
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	4803      	ldr	r0, [pc, #12]	; (8001d24 <ST7789_WriteSmallData+0x40>)
 8001d18:	f002 fbb6 	bl	8004488 <HAL_GPIO_WritePin>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40020400 	.word	0x40020400
 8001d28:	20000354 	.word	0x20000354

08001d2c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001d36:	2036      	movs	r0, #54	; 0x36
 8001d38:	f7ff ff78 	bl	8001c2c <ST7789_WriteCommand>
	switch (m) {
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d81a      	bhi.n	8001d78 <ST7789_SetRotation+0x4c>
 8001d42:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <ST7789_SetRotation+0x1c>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001d61 	.word	0x08001d61
 8001d50:	08001d69 	.word	0x08001d69
 8001d54:	08001d71 	.word	0x08001d71
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001d58:	20c0      	movs	r0, #192	; 0xc0
 8001d5a:	f7ff ffc3 	bl	8001ce4 <ST7789_WriteSmallData>
		break;
 8001d5e:	e00c      	b.n	8001d7a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001d60:	20a0      	movs	r0, #160	; 0xa0
 8001d62:	f7ff ffbf 	bl	8001ce4 <ST7789_WriteSmallData>
		break;
 8001d66:	e008      	b.n	8001d7a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff ffbb 	bl	8001ce4 <ST7789_WriteSmallData>
		break;
 8001d6e:	e004      	b.n	8001d7a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001d70:	2060      	movs	r0, #96	; 0x60
 8001d72:	f7ff ffb7 	bl	8001ce4 <ST7789_WriteSmallData>
		break;
 8001d76:	e000      	b.n	8001d7a <ST7789_SetRotation+0x4e>
	default:
		break;
 8001d78:	bf00      	nop
	}
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop

08001d84 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	4608      	mov	r0, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	80fb      	strh	r3, [r7, #6]
 8001d96:	4603      	mov	r3, r0
 8001d98:	80bb      	strh	r3, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	807b      	strh	r3, [r7, #2]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001da2:	2200      	movs	r2, #0
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	4824      	ldr	r0, [pc, #144]	; (8001e38 <ST7789_SetAddressWindow+0xb4>)
 8001da8:	f002 fb6e 	bl	8004488 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	82fb      	strh	r3, [r7, #22]
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001db4:	88bb      	ldrh	r3, [r7, #4]
 8001db6:	827b      	strh	r3, [r7, #18]
 8001db8:	883b      	ldrh	r3, [r7, #0]
 8001dba:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001dbc:	202a      	movs	r0, #42	; 0x2a
 8001dbe:	f7ff ff35 	bl	8001c2c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001dc2:	8afb      	ldrh	r3, [r7, #22]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	733b      	strb	r3, [r7, #12]
 8001dcc:	8afb      	ldrh	r3, [r7, #22]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	737b      	strb	r3, [r7, #13]
 8001dd2:	8abb      	ldrh	r3, [r7, #20]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	73bb      	strb	r3, [r7, #14]
 8001ddc:	8abb      	ldrh	r3, [r7, #20]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	2104      	movs	r1, #4
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff43 	bl	8001c74 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001dee:	202b      	movs	r0, #43	; 0x2b
 8001df0:	f7ff ff1c 	bl	8001c2c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001df4:	8a7b      	ldrh	r3, [r7, #18]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	723b      	strb	r3, [r7, #8]
 8001dfe:	8a7b      	ldrh	r3, [r7, #18]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	727b      	strb	r3, [r7, #9]
 8001e04:	8a3b      	ldrh	r3, [r7, #16]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	72bb      	strb	r3, [r7, #10]
 8001e0e:	8a3b      	ldrh	r3, [r7, #16]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff2a 	bl	8001c74 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001e20:	202c      	movs	r0, #44	; 0x2c
 8001e22:	f7ff ff03 	bl	8001c2c <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001e26:	2201      	movs	r2, #1
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	4803      	ldr	r0, [pc, #12]	; (8001e38 <ST7789_SetAddressWindow+0xb4>)
 8001e2c:	f002 fb2c 	bl	8004488 <HAL_GPIO_WritePin>
}
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	40020400 	.word	0x40020400

08001e3c <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b08b      	sub	sp, #44	; 0x2c
 8001e40:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 8001e42:	2019      	movs	r0, #25
 8001e44:	f000 fd4a 	bl	80028dc <HAL_Delay>
    ST7789_RST_Clr();
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	4846      	ldr	r0, [pc, #280]	; (8001f68 <ST7789_Init+0x12c>)
 8001e4e:	f002 fb1b 	bl	8004488 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8001e52:	2019      	movs	r0, #25
 8001e54:	f000 fd42 	bl	80028dc <HAL_Delay>
    ST7789_RST_Set();
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	4842      	ldr	r0, [pc, #264]	; (8001f68 <ST7789_Init+0x12c>)
 8001e5e:	f002 fb13 	bl	8004488 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001e62:	2032      	movs	r0, #50	; 0x32
 8001e64:	f000 fd3a 	bl	80028dc <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001e68:	203a      	movs	r0, #58	; 0x3a
 8001e6a:	f7ff fedf 	bl	8001c2c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001e6e:	2055      	movs	r0, #85	; 0x55
 8001e70:	f7ff ff38 	bl	8001ce4 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001e74:	20b2      	movs	r0, #178	; 0xb2
 8001e76:	f7ff fed9 	bl	8001c2c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001e7a:	4a3c      	ldr	r2, [pc, #240]	; (8001f6c <ST7789_Init+0x130>)
 8001e7c:	f107 0320 	add.w	r3, r7, #32
 8001e80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e84:	6018      	str	r0, [r3, #0]
 8001e86:	3304      	adds	r3, #4
 8001e88:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001e8a:	f107 0320 	add.w	r3, r7, #32
 8001e8e:	2105      	movs	r1, #5
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff feef 	bl	8001c74 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff48 	bl	8001d2c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001e9c:	20b7      	movs	r0, #183	; 0xb7
 8001e9e:	f7ff fec5 	bl	8001c2c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001ea2:	2035      	movs	r0, #53	; 0x35
 8001ea4:	f7ff ff1e 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001ea8:	20bb      	movs	r0, #187	; 0xbb
 8001eaa:	f7ff febf 	bl	8001c2c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001eae:	2019      	movs	r0, #25
 8001eb0:	f7ff ff18 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001eb4:	20c0      	movs	r0, #192	; 0xc0
 8001eb6:	f7ff feb9 	bl	8001c2c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001eba:	202c      	movs	r0, #44	; 0x2c
 8001ebc:	f7ff ff12 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001ec0:	20c2      	movs	r0, #194	; 0xc2
 8001ec2:	f7ff feb3 	bl	8001c2c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f7ff ff0c 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001ecc:	20c3      	movs	r0, #195	; 0xc3
 8001ece:	f7ff fead 	bl	8001c2c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001ed2:	2012      	movs	r0, #18
 8001ed4:	f7ff ff06 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001ed8:	20c4      	movs	r0, #196	; 0xc4
 8001eda:	f7ff fea7 	bl	8001c2c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001ede:	2020      	movs	r0, #32
 8001ee0:	f7ff ff00 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001ee4:	20c6      	movs	r0, #198	; 0xc6
 8001ee6:	f7ff fea1 	bl	8001c2c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001eea:	200f      	movs	r0, #15
 8001eec:	f7ff fefa 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001ef0:	20d0      	movs	r0, #208	; 0xd0
 8001ef2:	f7ff fe9b 	bl	8001c2c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001ef6:	20a4      	movs	r0, #164	; 0xa4
 8001ef8:	f7ff fef4 	bl	8001ce4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001efc:	20a1      	movs	r0, #161	; 0xa1
 8001efe:	f7ff fef1 	bl	8001ce4 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001f02:	20e0      	movs	r0, #224	; 0xe0
 8001f04:	f7ff fe92 	bl	8001c2c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <ST7789_Init+0x134>)
 8001f0a:	f107 0410 	add.w	r4, r7, #16
 8001f0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f10:	c407      	stmia	r4!, {r0, r1, r2}
 8001f12:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	210e      	movs	r1, #14
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff feaa 	bl	8001c74 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001f20:	20e1      	movs	r0, #225	; 0xe1
 8001f22:	f7ff fe83 	bl	8001c2c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <ST7789_Init+0x138>)
 8001f28:	463c      	mov	r4, r7
 8001f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f2c:	c407      	stmia	r4!, {r0, r1, r2}
 8001f2e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001f30:	463b      	mov	r3, r7
 8001f32:	210e      	movs	r1, #14
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fe9d 	bl	8001c74 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001f3a:	2021      	movs	r0, #33	; 0x21
 8001f3c:	f7ff fe76 	bl	8001c2c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001f40:	2011      	movs	r0, #17
 8001f42:	f7ff fe73 	bl	8001c2c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001f46:	2013      	movs	r0, #19
 8001f48:	f7ff fe70 	bl	8001c2c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001f4c:	2029      	movs	r0, #41	; 0x29
 8001f4e:	f7ff fe6d 	bl	8001c2c <ST7789_WriteCommand>

	HAL_Delay(50);
 8001f52:	2032      	movs	r0, #50	; 0x32
 8001f54:	f000 fcc2 	bl	80028dc <HAL_Delay>
	ST7789_Fill_Color(WHITE);				//	Fill with WHITE.
 8001f58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f5c:	f000 f80c 	bl	8001f78 <ST7789_Fill_Color>
}
 8001f60:	bf00      	nop
 8001f62:	372c      	adds	r7, #44	; 0x2c
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	08008668 	.word	0x08008668
 8001f70:	08008670 	.word	0x08008670
 8001f74:	08008680 	.word	0x08008680

08001f78 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001f82:	f240 133f 	movw	r3, #319	; 0x13f
 8001f86:	22ef      	movs	r2, #239	; 0xef
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff fefa 	bl	8001d84 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001f90:	2200      	movs	r2, #0
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <ST7789_Fill_Color+0x78>)
 8001f96:	f002 fa77 	bl	8004488 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	81fb      	strh	r3, [r7, #14]
 8001f9e:	e01a      	b.n	8001fd6 <ST7789_Fill_Color+0x5e>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	81bb      	strh	r3, [r7, #12]
 8001fa4:	e010      	b.n	8001fc8 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	723b      	strb	r3, [r7, #8]
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	2102      	movs	r1, #2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fe59 	bl	8001c74 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001fc2:	89bb      	ldrh	r3, [r7, #12]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	81bb      	strh	r3, [r7, #12]
 8001fc8:	89bb      	ldrh	r3, [r7, #12]
 8001fca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001fce:	d3ea      	bcc.n	8001fa6 <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 8001fd0:	89fb      	ldrh	r3, [r7, #14]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	81fb      	strh	r3, [r7, #14]
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	2bef      	cmp	r3, #239	; 0xef
 8001fda:	d9e1      	bls.n	8001fa0 <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <ST7789_Fill_Color+0x78>)
 8001fe2:	f002 fa51 	bl	8004488 <HAL_GPIO_WritePin>
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40020400 	.word	0x40020400

08001ff4 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	b590      	push	{r4, r7, lr}
 8001ff8:	b089      	sub	sp, #36	; 0x24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
 8002002:	460b      	mov	r3, r1
 8002004:	80bb      	strh	r3, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800200a:	2200      	movs	r2, #0
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	4838      	ldr	r0, [pc, #224]	; (80020f0 <ST7789_WriteChar+0xfc>)
 8002010:	f002 fa3a 	bl	8004488 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002014:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002018:	b29a      	uxth	r2, r3
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	4413      	add	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29c      	uxth	r4, r3
 8002024:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002028:	b29a      	uxth	r2, r3
 800202a:	88bb      	ldrh	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	b29b      	uxth	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	88b9      	ldrh	r1, [r7, #4]
 8002036:	88f8      	ldrh	r0, [r7, #6]
 8002038:	4622      	mov	r2, r4
 800203a:	f7ff fea3 	bl	8001d84 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e043      	b.n	80020cc <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8002044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	3b20      	subs	r3, #32
 800204a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4619      	mov	r1, r3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	440b      	add	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	e029      	b.n	80020ba <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00e      	beq.n	8002094 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8002076:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	b29b      	uxth	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	743b      	strb	r3, [r7, #16]
 8002080:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002082:	b2db      	uxtb	r3, r3
 8002084:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	2102      	movs	r1, #2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fdf1 	bl	8001c74 <ST7789_WriteData>
 8002092:	e00f      	b.n	80020b4 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002094:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	b29b      	uxth	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	733b      	strb	r3, [r7, #12]
 80020a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	2102      	movs	r1, #2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fde0 	bl	8001c74 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	3301      	adds	r3, #1
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020be:	461a      	mov	r2, r3
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d3cf      	bcc.n	8002066 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3301      	adds	r3, #1
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020d0:	461a      	mov	r2, r3
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d3b5      	bcc.n	8002044 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 80020d8:	2201      	movs	r2, #1
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	4804      	ldr	r0, [pc, #16]	; (80020f0 <ST7789_WriteChar+0xfc>)
 80020de:	f002 f9d3 	bl	8004488 <HAL_GPIO_WritePin>
}
 80020e2:	bf00      	nop
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80020ec:	b002      	add	sp, #8
 80020ee:	4770      	bx	lr
 80020f0:	40020400 	.word	0x40020400

080020f4 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80020f4:	b082      	sub	sp, #8
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af04      	add	r7, sp, #16
 80020fc:	603a      	str	r2, [r7, #0]
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	4603      	mov	r3, r0
 8002102:	80fb      	strh	r3, [r7, #6]
 8002104:	460b      	mov	r3, r1
 8002106:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8002108:	2200      	movs	r2, #0
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	4822      	ldr	r0, [pc, #136]	; (8002198 <ST7789_WriteString+0xa4>)
 800210e:	f002 f9bb 	bl	8004488 <HAL_GPIO_WritePin>
	while (*str) {
 8002112:	e02e      	b.n	8002172 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	7d3a      	ldrb	r2, [r7, #20]
 8002118:	4413      	add	r3, r2
 800211a:	2bef      	cmp	r3, #239	; 0xef
 800211c:	dd14      	ble.n	8002148 <ST7789_WriteString+0x54>
			x = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002122:	7d7b      	ldrb	r3, [r7, #21]
 8002124:	b29a      	uxth	r2, r3
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 800212c:	88bb      	ldrh	r3, [r7, #4]
 800212e:	7d7a      	ldrb	r2, [r7, #21]
 8002130:	4413      	add	r3, r2
 8002132:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002136:	da21      	bge.n	800217c <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b20      	cmp	r3, #32
 800213e:	d103      	bne.n	8002148 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	603b      	str	r3, [r7, #0]
				continue;
 8002146:	e014      	b.n	8002172 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	88b9      	ldrh	r1, [r7, #4]
 800214e:	88f8      	ldrh	r0, [r7, #6]
 8002150:	8c3b      	ldrh	r3, [r7, #32]
 8002152:	9302      	str	r3, [sp, #8]
 8002154:	8bbb      	ldrh	r3, [r7, #28]
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f7ff ff49 	bl	8001ff4 <ST7789_WriteChar>
		x += font.width;
 8002162:	7d3b      	ldrb	r3, [r7, #20]
 8002164:	b29a      	uxth	r2, r3
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	4413      	add	r3, r2
 800216a:	80fb      	strh	r3, [r7, #6]
		str++;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	603b      	str	r3, [r7, #0]
	while (*str) {
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1cc      	bne.n	8002114 <ST7789_WriteString+0x20>
 800217a:	e000      	b.n	800217e <ST7789_WriteString+0x8a>
				break;
 800217c:	bf00      	nop
	}
	ST7789_UnSelect();
 800217e:	2201      	movs	r2, #1
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <ST7789_WriteString+0xa4>)
 8002184:	f002 f980 	bl	8004488 <HAL_GPIO_WritePin>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002192:	b002      	add	sp, #8
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40020400 	.word	0x40020400

0800219c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_MspInit+0x4c>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_MspInit+0x4c>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	; 0x44
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_MspInit+0x4c>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_MspInit+0x4c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_MspInit+0x4c>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_MspInit+0x4c>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800

080021ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1b      	ldr	r2, [pc, #108]	; (8002278 <HAL_ADC_MspInit+0x8c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d12f      	bne.n	800226e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_ADC_MspInit+0x90>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_ADC_MspInit+0x90>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_ADC_MspInit+0x90>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_ADC_MspInit+0x90>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <HAL_ADC_MspInit+0x90>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_ADC_MspInit+0x90>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002246:	2301      	movs	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800224a:	2303      	movs	r3, #3
 800224c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4809      	ldr	r0, [pc, #36]	; (8002280 <HAL_ADC_MspInit+0x94>)
 800225a:	f001 ff79 	bl	8004150 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2012      	movs	r0, #18
 8002264:	f001 ff3d 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002268:	2012      	movs	r0, #18
 800226a:	f001 ff56 	bl	800411a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40012000 	.word	0x40012000
 800227c:	40023800 	.word	0x40023800
 8002280:	40020000 	.word	0x40020000

08002284 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_CAN_MspInit+0x168>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d146      	bne.n	8002334 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80022a6:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <HAL_CAN_MspInit+0x16c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	4a50      	ldr	r2, [pc, #320]	; (80023f0 <HAL_CAN_MspInit+0x16c>)
 80022ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80022b0:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <HAL_CAN_MspInit+0x16c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d10d      	bne.n	80022d4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	4a4c      	ldr	r2, [pc, #304]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 80022c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c6:	6413      	str	r3, [r2, #64]	; 0x40
 80022c8:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4a45      	ldr	r2, [pc, #276]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6313      	str	r3, [r2, #48]	; 0x30
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002302:	2309      	movs	r3, #9
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	483a      	ldr	r0, [pc, #232]	; (80023f8 <HAL_CAN_MspInit+0x174>)
 800230e:	f001 ff1f 	bl	8004150 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	2014      	movs	r0, #20
 8002318:	f001 fee3 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800231c:	2014      	movs	r0, #20
 800231e:	f001 fefc 	bl	800411a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2015      	movs	r0, #21
 8002328:	f001 fedb 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800232c:	2015      	movs	r0, #21
 800232e:	f001 fef4 	bl	800411a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002332:	e057      	b.n	80023e4 <HAL_CAN_MspInit+0x160>
  else if(hcan->Instance==CAN2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a30      	ldr	r2, [pc, #192]	; (80023fc <HAL_CAN_MspInit+0x178>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d152      	bne.n	80023e4 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 8002348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <HAL_CAN_MspInit+0x16c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_CAN_MspInit+0x16c>)
 8002362:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_CAN_MspInit+0x16c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d10d      	bne.n	8002388 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 8002376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800237a:	6413      	str	r3, [r2, #64]	; 0x40
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_CAN_MspInit+0x170>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023a4:	2360      	movs	r3, #96	; 0x60
 80023a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80023b4:	2309      	movs	r3, #9
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4810      	ldr	r0, [pc, #64]	; (8002400 <HAL_CAN_MspInit+0x17c>)
 80023c0:	f001 fec6 	bl	8004150 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2100      	movs	r1, #0
 80023c8:	2040      	movs	r0, #64	; 0x40
 80023ca:	f001 fe8a 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80023ce:	2040      	movs	r0, #64	; 0x40
 80023d0:	f001 fea3 	bl	800411a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	2041      	movs	r0, #65	; 0x41
 80023da:	f001 fe82 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80023de:	2041      	movs	r0, #65	; 0x41
 80023e0:	f001 fe9b 	bl	800411a <HAL_NVIC_EnableIRQ>
}
 80023e4:	bf00      	nop
 80023e6:	3730      	adds	r7, #48	; 0x30
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40006400 	.word	0x40006400
 80023f0:	20000214 	.word	0x20000214
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40006800 	.word	0x40006800
 8002400:	40020400 	.word	0x40020400

08002404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	; 0x30
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a41      	ldr	r2, [pc, #260]	; (8002528 <HAL_SPI_MspInit+0x124>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d14a      	bne.n	80024bc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_SPI_MspInit+0x128>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a3f      	ldr	r2, [pc, #252]	; (800252c <HAL_SPI_MspInit+0x128>)
 8002430:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_SPI_MspInit+0x128>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_SPI_MspInit+0x128>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a38      	ldr	r2, [pc, #224]	; (800252c <HAL_SPI_MspInit+0x128>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_SPI_MspInit+0x128>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_SPI_MspInit+0x128>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a31      	ldr	r2, [pc, #196]	; (800252c <HAL_SPI_MspInit+0x128>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b2f      	ldr	r3, [pc, #188]	; (800252c <HAL_SPI_MspInit+0x128>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800247a:	23c0      	movs	r3, #192	; 0xc0
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800248a:	2305      	movs	r3, #5
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4619      	mov	r1, r3
 8002494:	4826      	ldr	r0, [pc, #152]	; (8002530 <HAL_SPI_MspInit+0x12c>)
 8002496:	f001 fe5b 	bl	8004150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800249a:	2308      	movs	r3, #8
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024aa:	2305      	movs	r3, #5
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ae:	f107 031c 	add.w	r3, r7, #28
 80024b2:	4619      	mov	r1, r3
 80024b4:	481f      	ldr	r0, [pc, #124]	; (8002534 <HAL_SPI_MspInit+0x130>)
 80024b6:	f001 fe4b 	bl	8004150 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024ba:	e031      	b.n	8002520 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_SPI_MspInit+0x134>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d12c      	bne.n	8002520 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_SPI_MspInit+0x128>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a17      	ldr	r2, [pc, #92]	; (800252c <HAL_SPI_MspInit+0x128>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_SPI_MspInit+0x128>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_SPI_MspInit+0x128>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <HAL_SPI_MspInit+0x128>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_SPI_MspInit+0x128>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9;
 80024fe:	f44f 4362 	mov.w	r3, #57856	; 0xe200
 8002502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002510:	2305      	movs	r3, #5
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	4619      	mov	r1, r3
 800251a:	4806      	ldr	r0, [pc, #24]	; (8002534 <HAL_SPI_MspInit+0x130>)
 800251c:	f001 fe18 	bl	8004150 <HAL_GPIO_Init>
}
 8002520:	bf00      	nop
 8002522:	3730      	adds	r7, #48	; 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40013000 	.word	0x40013000
 800252c:	40023800 	.word	0x40023800
 8002530:	40020000 	.word	0x40020000
 8002534:	40020400 	.word	0x40020400
 8002538:	40003800 	.word	0x40003800

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <MemManage_Handler+0x4>

0800254e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <UsageFault_Handler+0x4>

0800255a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002588:	f000 f988 	bl	800289c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <ADC_IRQHandler+0x10>)
 8002596:	f000 fae7 	bl	8002b68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200002bc 	.word	0x200002bc

080025a4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <CAN1_RX0_IRQHandler+0x10>)
 80025aa:	f001 fa9a 	bl	8003ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200003ac 	.word	0x200003ac

080025b8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <CAN1_RX1_IRQHandler+0x10>)
 80025be:	f001 fa90 	bl	8003ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200003ac 	.word	0x200003ac

080025cc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <CAN2_RX0_IRQHandler+0x10>)
 80025d2:	f001 fa86 	bl	8003ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000304 	.word	0x20000304

080025e0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <CAN2_RX1_IRQHandler+0x10>)
 80025e6:	f001 fa7c 	bl	8003ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000304 	.word	0x20000304

080025f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
	return 1;
 80025f8:	2301      	movs	r3, #1
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_kill>:

int _kill(int pid, int sig)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800260e:	f003 f91f 	bl	8005850 <__errno>
 8002612:	4603      	mov	r3, r0
 8002614:	2216      	movs	r2, #22
 8002616:	601a      	str	r2, [r3, #0]
	return -1;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_exit>:

void _exit (int status)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ffe7 	bl	8002604 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002636:	e7fe      	b.n	8002636 <_exit+0x12>

08002638 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	e00a      	b.n	8002660 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800264a:	f3af 8000 	nop.w
 800264e:	4601      	mov	r1, r0
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	60ba      	str	r2, [r7, #8]
 8002656:	b2ca      	uxtb	r2, r1
 8002658:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	dbf0      	blt.n	800264a <_read+0x12>
	}

return len;
 8002668:	687b      	ldr	r3, [r7, #4]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e009      	b.n	8002698 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	60ba      	str	r2, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	dbf1      	blt.n	8002684 <_write+0x12>
	}
	return len;
 80026a0:	687b      	ldr	r3, [r7, #4]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_close>:

int _close(int file)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026d2:	605a      	str	r2, [r3, #4]
	return 0;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <_isatty>:

int _isatty(int file)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
	return 1;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	return 0;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <_sbrk+0x5c>)
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <_sbrk+0x60>)
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <_sbrk+0x64>)
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <_sbrk+0x68>)
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <_sbrk+0x64>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	429a      	cmp	r2, r3
 8002742:	d207      	bcs.n	8002754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002744:	f003 f884 	bl	8005850 <__errno>
 8002748:	4603      	mov	r3, r0
 800274a:	220c      	movs	r2, #12
 800274c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	e009      	b.n	8002768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <_sbrk+0x64>)
 8002764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002766:	68fb      	ldr	r3, [r7, #12]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20020000 	.word	0x20020000
 8002774:	00000400 	.word	0x00000400
 8002778:	20000218 	.word	0x20000218
 800277c:	20000408 	.word	0x20000408

08002780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <SystemInit+0x20>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <SystemInit+0x20>)
 800278c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027a8:	480d      	ldr	r0, [pc, #52]	; (80027e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027aa:	490e      	ldr	r1, [pc, #56]	; (80027e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b0:	e002      	b.n	80027b8 <LoopCopyDataInit>

080027b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b6:	3304      	adds	r3, #4

080027b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027bc:	d3f9      	bcc.n	80027b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027c0:	4c0b      	ldr	r4, [pc, #44]	; (80027f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c4:	e001      	b.n	80027ca <LoopFillZerobss>

080027c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c8:	3204      	adds	r2, #4

080027ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027cc:	d3fb      	bcc.n	80027c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027ce:	f7ff ffd7 	bl	8002780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027d2:	f003 f843 	bl	800585c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027d6:	f7fe ffa7 	bl	8001728 <main>
  bx  lr    
 80027da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80027e8:	0800926c 	.word	0x0800926c
  ldr r2, =_sbss
 80027ec:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80027f0:	20000404 	.word	0x20000404

080027f4 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <CAN1_SCE_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <HAL_Init+0x40>)
 8002802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_Init+0x40>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_Init+0x40>)
 800280e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_Init+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a07      	ldr	r2, [pc, #28]	; (8002838 <HAL_Init+0x40>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002820:	2003      	movs	r0, #3
 8002822:	f001 fc53 	bl	80040cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002826:	200f      	movs	r0, #15
 8002828:	f000 f808 	bl	800283c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800282c:	f7ff fcb6 	bl	800219c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00

0800283c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_InitTick+0x54>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x58>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002852:	fbb3 f3f1 	udiv	r3, r3, r1
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	4618      	mov	r0, r3
 800285c:	f001 fc6b 	bl	8004136 <HAL_SYSTICK_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e00e      	b.n	8002888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b0f      	cmp	r3, #15
 800286e:	d80a      	bhi.n	8002886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002870:	2200      	movs	r2, #0
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f001 fc33 	bl	80040e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800287c:	4a06      	ldr	r2, [pc, #24]	; (8002898 <HAL_InitTick+0x5c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000010 	.word	0x20000010
 8002894:	20000018 	.word	0x20000018
 8002898:	20000014 	.word	0x20000014

0800289c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_IncTick+0x20>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x24>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_IncTick+0x24>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000018 	.word	0x20000018
 80028c0:	200003f0 	.word	0x200003f0

080028c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_GetTick+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	200003f0 	.word	0x200003f0

080028dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff ffee 	bl	80028c4 <HAL_GetTick>
 80028e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d005      	beq.n	8002902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_Delay+0x44>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002902:	bf00      	nop
 8002904:	f7ff ffde 	bl	80028c4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	429a      	cmp	r2, r3
 8002912:	d8f7      	bhi.n	8002904 <HAL_Delay+0x28>
  {
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000018 	.word	0x20000018

08002924 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e033      	b.n	80029a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fc52 	bl	80021ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d118      	bne.n	8002994 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800296a:	f023 0302 	bic.w	r3, r3, #2
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fb7a 	bl	8003070 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
 8002992:	e001      	b.n	8002998 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_Start_IT+0x1a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e0bd      	b.n	8002b42 <HAL_ADC_Start_IT+0x196>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d018      	beq.n	8002a0e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029ec:	4b58      	ldr	r3, [pc, #352]	; (8002b50 <HAL_ADC_Start_IT+0x1a4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_ADC_Start_IT+0x1a8>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0c9a      	lsrs	r2, r3, #18
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a00:	e002      	b.n	8002a08 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f9      	bne.n	8002a02 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	f040 8085 	bne.w	8002b28 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5c:	d106      	bne.n	8002a6c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f023 0206 	bic.w	r2, r3, #6
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
 8002a6a:	e002      	b.n	8002a72 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <HAL_ADC_Start_IT+0x1ac>)
 8002a7c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a86:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a96:	f043 0320 	orr.w	r3, r3, #32
 8002a9a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d12a      	bne.n	8002afe <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a2b      	ldr	r2, [pc, #172]	; (8002b5c <HAL_ADC_Start_IT+0x1b0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d015      	beq.n	8002ade <HAL_ADC_Start_IT+0x132>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2a      	ldr	r2, [pc, #168]	; (8002b60 <HAL_ADC_Start_IT+0x1b4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_Start_IT+0x11c>
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <HAL_ADC_Start_IT+0x1ac>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a25      	ldr	r2, [pc, #148]	; (8002b64 <HAL_ADC_Start_IT+0x1b8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d136      	bne.n	8002b40 <HAL_ADC_Start_IT+0x194>
 8002ad2:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_ADC_Start_IT+0x1ac>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d130      	bne.n	8002b40 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d129      	bne.n	8002b40 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	e020      	b.n	8002b40 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_ADC_Start_IT+0x1b0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d11b      	bne.n	8002b40 <HAL_ADC_Start_IT+0x194>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d114      	bne.n	8002b40 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	e00b      	b.n	8002b40 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f043 0210 	orr.w	r2, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000010 	.word	0x20000010
 8002b54:	431bde83 	.word	0x431bde83
 8002b58:	40012300 	.word	0x40012300
 8002b5c:	40012000 	.word	0x40012000
 8002b60:	40012100 	.word	0x40012100
 8002b64:	40012200 	.word	0x40012200

08002b68 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d049      	beq.n	8002c3e <HAL_ADC_IRQHandler+0xd6>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d046      	beq.n	8002c3e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d12b      	bne.n	8002c2e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d127      	bne.n	8002c2e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d119      	bne.n	8002c2e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0220 	bic.w	r2, r2, #32
 8002c08:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d105      	bne.n	8002c2e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0201 	orr.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fe fb7e 	bl	8001330 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0212 	mvn.w	r2, #18
 8002c3c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d057      	beq.n	8002d20 <HAL_ADC_IRQHandler+0x1b8>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d054      	beq.n	8002d20 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d105      	bne.n	8002c8e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d139      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d006      	beq.n	8002cb8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d12b      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d124      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11d      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d119      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f043 0201 	orr.w	r2, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 faa9 	bl	8003268 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 020c 	mvn.w	r2, #12
 8002d1e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d017      	beq.n	8002d82 <HAL_ADC_IRQHandler+0x21a>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d014      	beq.n	8002d82 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10d      	bne.n	8002d82 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f846 	bl	8002e04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0201 	mvn.w	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d015      	beq.n	8002de2 <HAL_ADC_IRQHandler+0x27a>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d012      	beq.n	8002de2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f043 0202 	orr.w	r2, r3, #2
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0220 	mvn.w	r2, #32
 8002dd0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f820 	bl	8002e18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0220 	mvn.w	r2, #32
 8002de0:	601a      	str	r2, [r3, #0]
  }
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x1c>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e105      	b.n	8003054 <HAL_ADC_ConfigChannel+0x228>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b09      	cmp	r3, #9
 8002e56:	d925      	bls.n	8002ea4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68d9      	ldr	r1, [r3, #12]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b1e      	subs	r3, #30
 8002e6e:	2207      	movs	r2, #7
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43da      	mvns	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68d9      	ldr	r1, [r3, #12]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	4603      	mov	r3, r0
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4403      	add	r3, r0
 8002e96:	3b1e      	subs	r3, #30
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	e022      	b.n	8002eea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6919      	ldr	r1, [r3, #16]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	2207      	movs	r2, #7
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6919      	ldr	r1, [r3, #16]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4403      	add	r3, r0
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d824      	bhi.n	8002f3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	3b05      	subs	r3, #5
 8002f04:	221f      	movs	r2, #31
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	400a      	ands	r2, r1
 8002f12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3b05      	subs	r3, #5
 8002f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34
 8002f3a:	e04c      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	d824      	bhi.n	8002f8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	3b23      	subs	r3, #35	; 0x23
 8002f56:	221f      	movs	r2, #31
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	400a      	ands	r2, r1
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	4618      	mov	r0, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3b23      	subs	r3, #35	; 0x23
 8002f80:	fa00 f203 	lsl.w	r2, r0, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f8c:	e023      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3b41      	subs	r3, #65	; 0x41
 8002fa0:	221f      	movs	r2, #31
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	400a      	ands	r2, r1
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3b41      	subs	r3, #65	; 0x41
 8002fca:	fa00 f203 	lsl.w	r2, r0, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd6:	4b22      	ldr	r3, [pc, #136]	; (8003060 <HAL_ADC_ConfigChannel+0x234>)
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a21      	ldr	r2, [pc, #132]	; (8003064 <HAL_ADC_ConfigChannel+0x238>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d109      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x1cc>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b12      	cmp	r3, #18
 8002fea:	d105      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <HAL_ADC_ConfigChannel+0x238>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d123      	bne.n	800304a <HAL_ADC_ConfigChannel+0x21e>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b10      	cmp	r3, #16
 8003008:	d003      	beq.n	8003012 <HAL_ADC_ConfigChannel+0x1e6>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b11      	cmp	r3, #17
 8003010:	d11b      	bne.n	800304a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b10      	cmp	r3, #16
 8003024:	d111      	bne.n	800304a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_ADC_ConfigChannel+0x23c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a10      	ldr	r2, [pc, #64]	; (800306c <HAL_ADC_ConfigChannel+0x240>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	0c9a      	lsrs	r2, r3, #18
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800303c:	e002      	b.n	8003044 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	3b01      	subs	r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f9      	bne.n	800303e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	40012300 	.word	0x40012300
 8003064:	40012000 	.word	0x40012000
 8003068:	20000010 	.word	0x20000010
 800306c:	431bde83 	.word	0x431bde83

08003070 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003078:	4b79      	ldr	r3, [pc, #484]	; (8003260 <ADC_Init+0x1f0>)
 800307a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	021a      	lsls	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	4a58      	ldr	r2, [pc, #352]	; (8003264 <ADC_Init+0x1f4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003116:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6899      	ldr	r1, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6899      	ldr	r1, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	e00f      	b.n	800316e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800315c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800316c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0202 	bic.w	r2, r2, #2
 800317c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6899      	ldr	r1, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7e1b      	ldrb	r3, [r3, #24]
 8003188:	005a      	lsls	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	3b01      	subs	r3, #1
 80031c8:	035a      	lsls	r2, r3, #13
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e007      	b.n	80031e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	3b01      	subs	r3, #1
 8003200:	051a      	lsls	r2, r3, #20
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003218:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6899      	ldr	r1, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003226:	025a      	lsls	r2, r3, #9
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	029a      	lsls	r2, r3, #10
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40012300 	.word	0x40012300
 8003264:	0f000001 	.word	0x0f000001

08003268 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0ed      	b.n	800346a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe fff2 	bl	8002284 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032b0:	f7ff fb08 	bl	80028c4 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032b6:	e012      	b.n	80032de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032b8:	f7ff fb04 	bl	80028c4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b0a      	cmp	r3, #10
 80032c4:	d90b      	bls.n	80032de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2205      	movs	r2, #5
 80032d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0c5      	b.n	800346a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0e5      	beq.n	80032b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0202 	bic.w	r2, r2, #2
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032fc:	f7ff fae2 	bl	80028c4 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003302:	e012      	b.n	800332a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003304:	f7ff fade 	bl	80028c4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b0a      	cmp	r3, #10
 8003310:	d90b      	bls.n	800332a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2205      	movs	r2, #5
 8003322:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e09f      	b.n	800346a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e5      	bne.n	8003304 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7e1b      	ldrb	r3, [r3, #24]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d108      	bne.n	8003352 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e007      	b.n	8003362 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003360:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7e5b      	ldrb	r3, [r3, #25]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d108      	bne.n	800337c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e007      	b.n	800338c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7e9b      	ldrb	r3, [r3, #26]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d108      	bne.n	80033a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0220 	orr.w	r2, r2, #32
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e007      	b.n	80033b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0220 	bic.w	r2, r2, #32
 80033b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7edb      	ldrb	r3, [r3, #27]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d108      	bne.n	80033d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0210 	bic.w	r2, r2, #16
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e007      	b.n	80033e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0210 	orr.w	r2, r2, #16
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7f1b      	ldrb	r3, [r3, #28]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d108      	bne.n	80033fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0208 	orr.w	r2, r2, #8
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e007      	b.n	800340a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0208 	bic.w	r2, r2, #8
 8003408:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	7f5b      	ldrb	r3, [r3, #29]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d108      	bne.n	8003424 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0204 	orr.w	r2, r2, #4
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e007      	b.n	8003434 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0204 	bic.w	r2, r2, #4
 8003432:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	ea42 0103 	orr.w	r1, r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	1e5a      	subs	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800348a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d003      	beq.n	800349a <HAL_CAN_ConfigFilter+0x26>
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	2b02      	cmp	r3, #2
 8003496:	f040 80be 	bne.w	8003616 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800349a:	4b65      	ldr	r3, [pc, #404]	; (8003630 <HAL_CAN_ConfigFilter+0x1bc>)
 800349c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	431a      	orrs	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	2201      	movs	r2, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	401a      	ands	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d123      	bne.n	8003544 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	43db      	mvns	r3, r3
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800351e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3248      	adds	r2, #72	; 0x48
 8003524:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003538:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800353a:	6979      	ldr	r1, [r7, #20]
 800353c:	3348      	adds	r3, #72	; 0x48
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d122      	bne.n	8003592 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	431a      	orrs	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800356c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	3248      	adds	r2, #72	; 0x48
 8003572:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003586:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003588:	6979      	ldr	r1, [r7, #20]
 800358a:	3348      	adds	r3, #72	; 0x48
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	401a      	ands	r2, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80035ac:	e007      	b.n	80035be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	401a      	ands	r2, r3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80035d8:	e007      	b.n	80035ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d107      	bne.n	8003602 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003608:	f023 0201 	bic.w	r2, r3, #1
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e006      	b.n	8003624 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	40006400 	.word	0x40006400

08003634 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d12e      	bne.n	80036a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003660:	f7ff f930 	bl	80028c4 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003666:	e012      	b.n	800368e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003668:	f7ff f92c 	bl	80028c4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b0a      	cmp	r3, #10
 8003674:	d90b      	bls.n	800368e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2205      	movs	r2, #5
 8003686:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e012      	b.n	80036b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e5      	bne.n	8003668 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e006      	b.n	80036b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
  }
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80036da:	7ffb      	ldrb	r3, [r7, #31]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d003      	beq.n	80036e8 <HAL_CAN_AddTxMessage+0x2c>
 80036e0:	7ffb      	ldrb	r3, [r7, #31]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	f040 80b8 	bne.w	8003858 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80a0 	beq.w	8003848 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	0e1b      	lsrs	r3, r3, #24
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d907      	bls.n	8003728 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e09e      	b.n	8003866 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003728:	2201      	movs	r2, #1
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	409a      	lsls	r2, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10d      	bne.n	8003756 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	6809      	ldr	r1, [r1, #0]
 8003748:	431a      	orrs	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3318      	adds	r3, #24
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	440b      	add	r3, r1
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e00f      	b.n	8003776 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003760:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003766:	68f9      	ldr	r1, [r7, #12]
 8003768:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800376a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	3318      	adds	r3, #24
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	440b      	add	r3, r1
 8003774:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3318      	adds	r3, #24
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	440b      	add	r3, r1
 8003786:	3304      	adds	r3, #4
 8003788:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	7d1b      	ldrb	r3, [r3, #20]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d111      	bne.n	80037b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3318      	adds	r3, #24
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	4413      	add	r3, r2
 800379e:	3304      	adds	r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3318      	adds	r3, #24
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	440b      	add	r3, r1
 80037b2:	3304      	adds	r3, #4
 80037b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3307      	adds	r3, #7
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	061a      	lsls	r2, r3, #24
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3306      	adds	r3, #6
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3305      	adds	r3, #5
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	4313      	orrs	r3, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	3204      	adds	r2, #4
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	4610      	mov	r0, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6811      	ldr	r1, [r2, #0]
 80037de:	ea43 0200 	orr.w	r2, r3, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80037ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3303      	adds	r3, #3
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	061a      	lsls	r2, r3, #24
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3302      	adds	r3, #2
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	041b      	lsls	r3, r3, #16
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3301      	adds	r3, #1
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	4313      	orrs	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	4610      	mov	r0, r2
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	6811      	ldr	r1, [r2, #0]
 8003814:	ea43 0200 	orr.w	r2, r3, r0
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	440b      	add	r3, r1
 800381e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003822:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	3318      	adds	r3, #24
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	4413      	add	r3, r2
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	6811      	ldr	r1, [r2, #0]
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3318      	adds	r3, #24
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	440b      	add	r3, r1
 8003842:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e00e      	b.n	8003866 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e006      	b.n	8003866 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003872:	b480      	push	{r7}
 8003874:	b087      	sub	sp, #28
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003886:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d003      	beq.n	8003896 <HAL_CAN_GetRxMessage+0x24>
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b02      	cmp	r3, #2
 8003892:	f040 80f3 	bne.w	8003a7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10e      	bne.n	80038ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d116      	bne.n	80038d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0e7      	b.n	8003a8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0d8      	b.n	8003a8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	331b      	adds	r3, #27
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	4413      	add	r3, r2
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0204 	and.w	r2, r3, #4
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10c      	bne.n	8003910 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	331b      	adds	r3, #27
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4413      	add	r3, r2
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0d5b      	lsrs	r3, r3, #21
 8003906:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e00b      	b.n	8003928 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	331b      	adds	r3, #27
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4413      	add	r3, r2
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	08db      	lsrs	r3, r3, #3
 8003920:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	331b      	adds	r3, #27
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	4413      	add	r3, r2
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0202 	and.w	r2, r3, #2
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	331b      	adds	r3, #27
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	4413      	add	r3, r2
 800394a:	3304      	adds	r3, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 020f 	and.w	r2, r3, #15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	331b      	adds	r3, #27
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	4413      	add	r3, r2
 8003962:	3304      	adds	r3, #4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	b2da      	uxtb	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	331b      	adds	r3, #27
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	b29a      	uxth	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	4413      	add	r3, r2
 8003990:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0a1a      	lsrs	r2, r3, #8
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	4413      	add	r3, r2
 80039c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0c1a      	lsrs	r2, r3, #16
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	3302      	adds	r3, #2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	4413      	add	r3, r2
 80039da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0e1a      	lsrs	r2, r3, #24
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	3303      	adds	r3, #3
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	3304      	adds	r3, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0a1a      	lsrs	r2, r3, #8
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	3305      	adds	r3, #5
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	0c1a      	lsrs	r2, r3, #16
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	3306      	adds	r3, #6
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0e1a      	lsrs	r2, r3, #24
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	3307      	adds	r3, #7
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0220 	orr.w	r2, r2, #32
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	e007      	b.n	8003a78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0220 	orr.w	r2, r2, #32
 8003a76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e006      	b.n	8003a8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d002      	beq.n	8003ab4 <HAL_CAN_ActivateNotification+0x1e>
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d109      	bne.n	8003ac8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6959      	ldr	r1, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e006      	b.n	8003ad6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b08a      	sub	sp, #40	; 0x28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d07c      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d023      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2201      	movs	r2, #1
 8003b38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f983 	bl	8003e50 <HAL_CAN_TxMailbox0CompleteCallback>
 8003b4a:	e016      	b.n	8003b7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	e00c      	b.n	8003b7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
 8003b72:	e002      	b.n	8003b7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f989 	bl	8003e8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d024      	beq.n	8003bce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f963 	bl	8003e64 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b9e:	e016      	b.n	8003bce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	e00c      	b.n	8003bce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	e002      	b.n	8003bce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f969 	bl	8003ea0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d024      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003be0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f943 	bl	8003e78 <HAL_CAN_TxMailbox2CompleteCallback>
 8003bf2:	e016      	b.n	8003c22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	e00c      	b.n	8003c22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	e002      	b.n	8003c22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f949 	bl	8003eb4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2210      	movs	r2, #16
 8003c44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d006      	beq.n	8003c68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f930 	bl	8003ec8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fd fb95 	bl	80013b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f908 	bl	8003edc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7fd fc5d 	bl	80015a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d006      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2210      	movs	r2, #16
 8003d04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8f2 	bl	8003ef0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d006      	beq.n	8003d2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2208      	movs	r2, #8
 8003d26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f8eb 	bl	8003f04 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d07b      	beq.n	8003e30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d072      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d043      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03e      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003db0:	2b60      	cmp	r3, #96	; 0x60
 8003db2:	d02b      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x32a>
 8003db4:	2b60      	cmp	r3, #96	; 0x60
 8003db6:	d82e      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d022      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x320>
 8003dbc:	2b50      	cmp	r3, #80	; 0x50
 8003dbe:	d82a      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d019      	beq.n	8003df8 <HAL_CAN_IRQHandler+0x316>
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d826      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003dc8:	2b30      	cmp	r3, #48	; 0x30
 8003dca:	d010      	beq.n	8003dee <HAL_CAN_IRQHandler+0x30c>
 8003dcc:	2b30      	cmp	r3, #48	; 0x30
 8003dce:	d822      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d002      	beq.n	8003dda <HAL_CAN_IRQHandler+0x2f8>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d005      	beq.n	8003de4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003dd8:	e01d      	b.n	8003e16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	f043 0308 	orr.w	r3, r3, #8
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003de2:	e019      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	f043 0310 	orr.w	r3, r3, #16
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003dec:	e014      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	f043 0320 	orr.w	r3, r3, #32
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003df6:	e00f      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e00:	e00a      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e0a:	e005      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e14:	e000      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            break;
 8003e16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f868 	bl	8003f18 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3728      	adds	r7, #40	; 0x28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <__NVIC_SetPriorityGrouping+0x44>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f5e:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <__NVIC_SetPriorityGrouping+0x44>)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	60d3      	str	r3, [r2, #12]
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <__NVIC_GetPriorityGrouping+0x18>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	f003 0307 	and.w	r3, r3, #7
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	db0b      	blt.n	8003fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	f003 021f 	and.w	r2, r3, #31
 8003fa8:	4907      	ldr	r1, [pc, #28]	; (8003fc8 <__NVIC_EnableIRQ+0x38>)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	e000e100 	.word	0xe000e100

08003fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	6039      	str	r1, [r7, #0]
 8003fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	db0a      	blt.n	8003ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	490c      	ldr	r1, [pc, #48]	; (8004018 <__NVIC_SetPriority+0x4c>)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	0112      	lsls	r2, r2, #4
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	440b      	add	r3, r1
 8003ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ff4:	e00a      	b.n	800400c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4908      	ldr	r1, [pc, #32]	; (800401c <__NVIC_SetPriority+0x50>)
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	3b04      	subs	r3, #4
 8004004:	0112      	lsls	r2, r2, #4
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	440b      	add	r3, r1
 800400a:	761a      	strb	r2, [r3, #24]
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000e100 	.word	0xe000e100
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004020:	b480      	push	{r7}
 8004022:	b089      	sub	sp, #36	; 0x24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f1c3 0307 	rsb	r3, r3, #7
 800403a:	2b04      	cmp	r3, #4
 800403c:	bf28      	it	cs
 800403e:	2304      	movcs	r3, #4
 8004040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3304      	adds	r3, #4
 8004046:	2b06      	cmp	r3, #6
 8004048:	d902      	bls.n	8004050 <NVIC_EncodePriority+0x30>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3b03      	subs	r3, #3
 800404e:	e000      	b.n	8004052 <NVIC_EncodePriority+0x32>
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004054:	f04f 32ff 	mov.w	r2, #4294967295
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43da      	mvns	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	401a      	ands	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004068:	f04f 31ff 	mov.w	r1, #4294967295
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	43d9      	mvns	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004078:	4313      	orrs	r3, r2
         );
}
 800407a:	4618      	mov	r0, r3
 800407c:	3724      	adds	r7, #36	; 0x24
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3b01      	subs	r3, #1
 8004094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004098:	d301      	bcc.n	800409e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800409a:	2301      	movs	r3, #1
 800409c:	e00f      	b.n	80040be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800409e:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <SysTick_Config+0x40>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040a6:	210f      	movs	r1, #15
 80040a8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ac:	f7ff ff8e 	bl	8003fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <SysTick_Config+0x40>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040b6:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <SysTick_Config+0x40>)
 80040b8:	2207      	movs	r2, #7
 80040ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	e000e010 	.word	0xe000e010

080040cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff29 	bl	8003f2c <__NVIC_SetPriorityGrouping>
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	4603      	mov	r3, r0
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040f4:	f7ff ff3e 	bl	8003f74 <__NVIC_GetPriorityGrouping>
 80040f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	6978      	ldr	r0, [r7, #20]
 8004100:	f7ff ff8e 	bl	8004020 <NVIC_EncodePriority>
 8004104:	4602      	mov	r2, r0
 8004106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800410a:	4611      	mov	r1, r2
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff ff5d 	bl	8003fcc <__NVIC_SetPriority>
}
 8004112:	bf00      	nop
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	4603      	mov	r3, r0
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff31 	bl	8003f90 <__NVIC_EnableIRQ>
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff ffa2 	bl	8004088 <SysTick_Config>
 8004144:	4603      	mov	r3, r0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	e16b      	b.n	8004444 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800416c:	2201      	movs	r2, #1
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4013      	ands	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	429a      	cmp	r2, r3
 8004186:	f040 815a 	bne.w	800443e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d005      	beq.n	80041a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d130      	bne.n	8004204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	2203      	movs	r2, #3
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041d8:	2201      	movs	r2, #1
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 0201 	and.w	r2, r3, #1
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	2b03      	cmp	r3, #3
 800420e:	d017      	beq.n	8004240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	2203      	movs	r2, #3
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d123      	bne.n	8004294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	08da      	lsrs	r2, r3, #3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3208      	adds	r2, #8
 8004254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	220f      	movs	r2, #15
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	08da      	lsrs	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3208      	adds	r2, #8
 800428e:	69b9      	ldr	r1, [r7, #24]
 8004290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	2203      	movs	r2, #3
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0203 	and.w	r2, r3, #3
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80b4 	beq.w	800443e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	4b60      	ldr	r3, [pc, #384]	; (800445c <HAL_GPIO_Init+0x30c>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	4a5f      	ldr	r2, [pc, #380]	; (800445c <HAL_GPIO_Init+0x30c>)
 80042e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042e4:	6453      	str	r3, [r2, #68]	; 0x44
 80042e6:	4b5d      	ldr	r3, [pc, #372]	; (800445c <HAL_GPIO_Init+0x30c>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042f2:	4a5b      	ldr	r2, [pc, #364]	; (8004460 <HAL_GPIO_Init+0x310>)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	089b      	lsrs	r3, r3, #2
 80042f8:	3302      	adds	r3, #2
 80042fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	220f      	movs	r2, #15
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a52      	ldr	r2, [pc, #328]	; (8004464 <HAL_GPIO_Init+0x314>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d02b      	beq.n	8004376 <HAL_GPIO_Init+0x226>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a51      	ldr	r2, [pc, #324]	; (8004468 <HAL_GPIO_Init+0x318>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d025      	beq.n	8004372 <HAL_GPIO_Init+0x222>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a50      	ldr	r2, [pc, #320]	; (800446c <HAL_GPIO_Init+0x31c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d01f      	beq.n	800436e <HAL_GPIO_Init+0x21e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a4f      	ldr	r2, [pc, #316]	; (8004470 <HAL_GPIO_Init+0x320>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d019      	beq.n	800436a <HAL_GPIO_Init+0x21a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a4e      	ldr	r2, [pc, #312]	; (8004474 <HAL_GPIO_Init+0x324>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d013      	beq.n	8004366 <HAL_GPIO_Init+0x216>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a4d      	ldr	r2, [pc, #308]	; (8004478 <HAL_GPIO_Init+0x328>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00d      	beq.n	8004362 <HAL_GPIO_Init+0x212>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a4c      	ldr	r2, [pc, #304]	; (800447c <HAL_GPIO_Init+0x32c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d007      	beq.n	800435e <HAL_GPIO_Init+0x20e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a4b      	ldr	r2, [pc, #300]	; (8004480 <HAL_GPIO_Init+0x330>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_GPIO_Init+0x20a>
 8004356:	2307      	movs	r3, #7
 8004358:	e00e      	b.n	8004378 <HAL_GPIO_Init+0x228>
 800435a:	2308      	movs	r3, #8
 800435c:	e00c      	b.n	8004378 <HAL_GPIO_Init+0x228>
 800435e:	2306      	movs	r3, #6
 8004360:	e00a      	b.n	8004378 <HAL_GPIO_Init+0x228>
 8004362:	2305      	movs	r3, #5
 8004364:	e008      	b.n	8004378 <HAL_GPIO_Init+0x228>
 8004366:	2304      	movs	r3, #4
 8004368:	e006      	b.n	8004378 <HAL_GPIO_Init+0x228>
 800436a:	2303      	movs	r3, #3
 800436c:	e004      	b.n	8004378 <HAL_GPIO_Init+0x228>
 800436e:	2302      	movs	r3, #2
 8004370:	e002      	b.n	8004378 <HAL_GPIO_Init+0x228>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_GPIO_Init+0x228>
 8004376:	2300      	movs	r3, #0
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	f002 0203 	and.w	r2, r2, #3
 800437e:	0092      	lsls	r2, r2, #2
 8004380:	4093      	lsls	r3, r2
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004388:	4935      	ldr	r1, [pc, #212]	; (8004460 <HAL_GPIO_Init+0x310>)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	089b      	lsrs	r3, r3, #2
 800438e:	3302      	adds	r3, #2
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004396:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <HAL_GPIO_Init+0x334>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043ba:	4a32      	ldr	r2, [pc, #200]	; (8004484 <HAL_GPIO_Init+0x334>)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043c0:	4b30      	ldr	r3, [pc, #192]	; (8004484 <HAL_GPIO_Init+0x334>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043e4:	4a27      	ldr	r2, [pc, #156]	; (8004484 <HAL_GPIO_Init+0x334>)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_GPIO_Init+0x334>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800440e:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <HAL_GPIO_Init+0x334>)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <HAL_GPIO_Init+0x334>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004438:	4a12      	ldr	r2, [pc, #72]	; (8004484 <HAL_GPIO_Init+0x334>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3301      	adds	r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b0f      	cmp	r3, #15
 8004448:	f67f ae90 	bls.w	800416c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	3724      	adds	r7, #36	; 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800
 8004460:	40013800 	.word	0x40013800
 8004464:	40020000 	.word	0x40020000
 8004468:	40020400 	.word	0x40020400
 800446c:	40020800 	.word	0x40020800
 8004470:	40020c00 	.word	0x40020c00
 8004474:	40021000 	.word	0x40021000
 8004478:	40021400 	.word	0x40021400
 800447c:	40021800 	.word	0x40021800
 8004480:	40021c00 	.word	0x40021c00
 8004484:	40013c00 	.word	0x40013c00

08004488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
 8004494:	4613      	mov	r3, r2
 8004496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004498:	787b      	ldrb	r3, [r7, #1]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449e:	887a      	ldrh	r2, [r7, #2]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a4:	e003      	b.n	80044ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	041a      	lsls	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	619a      	str	r2, [r3, #24]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e264      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d075      	beq.n	80045c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044da:	4ba3      	ldr	r3, [pc, #652]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d00c      	beq.n	8004500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e6:	4ba0      	ldr	r3, [pc, #640]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d112      	bne.n	8004518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f2:	4b9d      	ldr	r3, [pc, #628]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fe:	d10b      	bne.n	8004518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004500:	4b99      	ldr	r3, [pc, #612]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d05b      	beq.n	80045c4 <HAL_RCC_OscConfig+0x108>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d157      	bne.n	80045c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e23f      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d106      	bne.n	8004530 <HAL_RCC_OscConfig+0x74>
 8004522:	4b91      	ldr	r3, [pc, #580]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a90      	ldr	r2, [pc, #576]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e01d      	b.n	800456c <HAL_RCC_OscConfig+0xb0>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x98>
 800453a:	4b8b      	ldr	r3, [pc, #556]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a8a      	ldr	r2, [pc, #552]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b88      	ldr	r3, [pc, #544]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a87      	ldr	r2, [pc, #540]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e00b      	b.n	800456c <HAL_RCC_OscConfig+0xb0>
 8004554:	4b84      	ldr	r3, [pc, #528]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a83      	ldr	r2, [pc, #524]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 800455a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4b81      	ldr	r3, [pc, #516]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a80      	ldr	r2, [pc, #512]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fe f9a6 	bl	80028c4 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800457c:	f7fe f9a2 	bl	80028c4 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e204      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b76      	ldr	r3, [pc, #472]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0xc0>
 800459a:	e014      	b.n	80045c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fe f992 	bl	80028c4 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fe f98e 	bl	80028c4 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e1f0      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b6:	4b6c      	ldr	r3, [pc, #432]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0xe8>
 80045c2:	e000      	b.n	80045c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d063      	beq.n	800469a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045d2:	4b65      	ldr	r3, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045de:	4b62      	ldr	r3, [pc, #392]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d11c      	bne.n	8004624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ea:	4b5f      	ldr	r3, [pc, #380]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d116      	bne.n	8004624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	4b5c      	ldr	r3, [pc, #368]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <HAL_RCC_OscConfig+0x152>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d001      	beq.n	800460e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e1c4      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460e:	4b56      	ldr	r3, [pc, #344]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4952      	ldr	r1, [pc, #328]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004622:	e03a      	b.n	800469a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d020      	beq.n	800466e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800462c:	4b4f      	ldr	r3, [pc, #316]	; (800476c <HAL_RCC_OscConfig+0x2b0>)
 800462e:	2201      	movs	r2, #1
 8004630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fe f947 	bl	80028c4 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463a:	f7fe f943 	bl	80028c4 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e1a5      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464c:	4b46      	ldr	r3, [pc, #280]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004658:	4b43      	ldr	r3, [pc, #268]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4940      	ldr	r1, [pc, #256]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004668:	4313      	orrs	r3, r2
 800466a:	600b      	str	r3, [r1, #0]
 800466c:	e015      	b.n	800469a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466e:	4b3f      	ldr	r3, [pc, #252]	; (800476c <HAL_RCC_OscConfig+0x2b0>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fe f926 	bl	80028c4 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467c:	f7fe f922 	bl	80028c4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e184      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468e:	4b36      	ldr	r3, [pc, #216]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d030      	beq.n	8004708 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d016      	beq.n	80046dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ae:	4b30      	ldr	r3, [pc, #192]	; (8004770 <HAL_RCC_OscConfig+0x2b4>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b4:	f7fe f906 	bl	80028c4 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046bc:	f7fe f902 	bl	80028c4 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e164      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ce:	4b26      	ldr	r3, [pc, #152]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0x200>
 80046da:	e015      	b.n	8004708 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046dc:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_RCC_OscConfig+0x2b4>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e2:	f7fe f8ef 	bl	80028c4 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ea:	f7fe f8eb 	bl	80028c4 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e14d      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046fc:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 80046fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 80a0 	beq.w	8004856 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471a:	4b13      	ldr	r3, [pc, #76]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10f      	bne.n	8004746 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	4a0e      	ldr	r2, [pc, #56]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004734:	6413      	str	r3, [r2, #64]	; 0x40
 8004736:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_OscConfig+0x2b8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d121      	bne.n	8004796 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <HAL_RCC_OscConfig+0x2b8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a07      	ldr	r2, [pc, #28]	; (8004774 <HAL_RCC_OscConfig+0x2b8>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475e:	f7fe f8b1 	bl	80028c4 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	e011      	b.n	800478a <HAL_RCC_OscConfig+0x2ce>
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800
 800476c:	42470000 	.word	0x42470000
 8004770:	42470e80 	.word	0x42470e80
 8004774:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004778:	f7fe f8a4 	bl	80028c4 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e106      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	4b85      	ldr	r3, [pc, #532]	; (80049a0 <HAL_RCC_OscConfig+0x4e4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d106      	bne.n	80047ac <HAL_RCC_OscConfig+0x2f0>
 800479e:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	4a80      	ldr	r2, [pc, #512]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6713      	str	r3, [r2, #112]	; 0x70
 80047aa:	e01c      	b.n	80047e6 <HAL_RCC_OscConfig+0x32a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b05      	cmp	r3, #5
 80047b2:	d10c      	bne.n	80047ce <HAL_RCC_OscConfig+0x312>
 80047b4:	4b7b      	ldr	r3, [pc, #492]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	4a7a      	ldr	r2, [pc, #488]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80047ba:	f043 0304 	orr.w	r3, r3, #4
 80047be:	6713      	str	r3, [r2, #112]	; 0x70
 80047c0:	4b78      	ldr	r3, [pc, #480]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	4a77      	ldr	r2, [pc, #476]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6713      	str	r3, [r2, #112]	; 0x70
 80047cc:	e00b      	b.n	80047e6 <HAL_RCC_OscConfig+0x32a>
 80047ce:	4b75      	ldr	r3, [pc, #468]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	4a74      	ldr	r2, [pc, #464]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	6713      	str	r3, [r2, #112]	; 0x70
 80047da:	4b72      	ldr	r3, [pc, #456]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	4a71      	ldr	r2, [pc, #452]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80047e0:	f023 0304 	bic.w	r3, r3, #4
 80047e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d015      	beq.n	800481a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ee:	f7fe f869 	bl	80028c4 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f4:	e00a      	b.n	800480c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fe f865 	bl	80028c4 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e0c5      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480c:	4b65      	ldr	r3, [pc, #404]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0ee      	beq.n	80047f6 <HAL_RCC_OscConfig+0x33a>
 8004818:	e014      	b.n	8004844 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481a:	f7fe f853 	bl	80028c4 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004820:	e00a      	b.n	8004838 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fe f84f 	bl	80028c4 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e0af      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004838:	4b5a      	ldr	r3, [pc, #360]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ee      	bne.n	8004822 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d105      	bne.n	8004856 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4b56      	ldr	r3, [pc, #344]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	4a55      	ldr	r2, [pc, #340]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 809b 	beq.w	8004996 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004860:	4b50      	ldr	r3, [pc, #320]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 030c 	and.w	r3, r3, #12
 8004868:	2b08      	cmp	r3, #8
 800486a:	d05c      	beq.n	8004926 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d141      	bne.n	80048f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004874:	4b4c      	ldr	r3, [pc, #304]	; (80049a8 <HAL_RCC_OscConfig+0x4ec>)
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fe f823 	bl	80028c4 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004882:	f7fe f81f 	bl	80028c4 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e081      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004894:	4b43      	ldr	r3, [pc, #268]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f0      	bne.n	8004882 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	019b      	lsls	r3, r3, #6
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	3b01      	subs	r3, #1
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	061b      	lsls	r3, r3, #24
 80048c4:	4937      	ldr	r1, [pc, #220]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ca:	4b37      	ldr	r3, [pc, #220]	; (80049a8 <HAL_RCC_OscConfig+0x4ec>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fd fff8 	bl	80028c4 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd fff4 	bl	80028c4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e056      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b2e      	ldr	r3, [pc, #184]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x41c>
 80048f6:	e04e      	b.n	8004996 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f8:	4b2b      	ldr	r3, [pc, #172]	; (80049a8 <HAL_RCC_OscConfig+0x4ec>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fe:	f7fd ffe1 	bl	80028c4 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004906:	f7fd ffdd 	bl	80028c4 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e03f      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004918:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1f0      	bne.n	8004906 <HAL_RCC_OscConfig+0x44a>
 8004924:	e037      	b.n	8004996 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e032      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <HAL_RCC_OscConfig+0x4e8>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d028      	beq.n	8004992 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d121      	bne.n	8004992 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d11a      	bne.n	8004992 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004962:	4013      	ands	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004968:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800496a:	4293      	cmp	r3, r2
 800496c:	d111      	bne.n	8004992 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	3b01      	subs	r3, #1
 800497c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d107      	bne.n	8004992 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d001      	beq.n	8004996 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40007000 	.word	0x40007000
 80049a4:	40023800 	.word	0x40023800
 80049a8:	42470060 	.word	0x42470060

080049ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0cc      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c0:	4b68      	ldr	r3, [pc, #416]	; (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d90c      	bls.n	80049e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b65      	ldr	r3, [pc, #404]	; (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b63      	ldr	r3, [pc, #396]	; (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0b8      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d020      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a00:	4b59      	ldr	r3, [pc, #356]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4a58      	ldr	r2, [pc, #352]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a18:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a52      	ldr	r2, [pc, #328]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a24:	4b50      	ldr	r3, [pc, #320]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	494d      	ldr	r1, [pc, #308]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d044      	beq.n	8004acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d107      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4a:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d119      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e07f      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d003      	beq.n	8004a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6a:	4b3f      	ldr	r3, [pc, #252]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e06f      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7a:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e067      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8a:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f023 0203 	bic.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4934      	ldr	r1, [pc, #208]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a9c:	f7fd ff12 	bl	80028c4 <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	e00a      	b.n	8004aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa4:	f7fd ff0e 	bl	80028c4 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e04f      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 020c 	and.w	r2, r3, #12
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d1eb      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004acc:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d20c      	bcs.n	8004af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae2:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e032      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b00:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4916      	ldr	r1, [pc, #88]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	490e      	ldr	r1, [pc, #56]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b32:	f000 f821 	bl	8004b78 <HAL_RCC_GetSysClockFreq>
 8004b36:	4602      	mov	r2, r0
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	490a      	ldr	r1, [pc, #40]	; (8004b6c <HAL_RCC_ClockConfig+0x1c0>)
 8004b44:	5ccb      	ldrb	r3, [r1, r3]
 8004b46:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4a:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fe72 	bl	800283c <HAL_InitTick>

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40023c00 	.word	0x40023c00
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	08008e6c 	.word	0x08008e6c
 8004b70:	20000010 	.word	0x20000010
 8004b74:	20000014 	.word	0x20000014

08004b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b78:	b5b0      	push	{r4, r5, r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b7e:	2100      	movs	r1, #0
 8004b80:	6079      	str	r1, [r7, #4]
 8004b82:	2100      	movs	r1, #0
 8004b84:	60f9      	str	r1, [r7, #12]
 8004b86:	2100      	movs	r1, #0
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b8e:	4952      	ldr	r1, [pc, #328]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b90:	6889      	ldr	r1, [r1, #8]
 8004b92:	f001 010c 	and.w	r1, r1, #12
 8004b96:	2908      	cmp	r1, #8
 8004b98:	d00d      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x3e>
 8004b9a:	2908      	cmp	r1, #8
 8004b9c:	f200 8094 	bhi.w	8004cc8 <HAL_RCC_GetSysClockFreq+0x150>
 8004ba0:	2900      	cmp	r1, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x32>
 8004ba4:	2904      	cmp	r1, #4
 8004ba6:	d003      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x38>
 8004ba8:	e08e      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004baa:	4b4c      	ldr	r3, [pc, #304]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x164>)
 8004bac:	60bb      	str	r3, [r7, #8]
       break;
 8004bae:	e08e      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bb0:	4b4b      	ldr	r3, [pc, #300]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004bb2:	60bb      	str	r3, [r7, #8]
      break;
 8004bb4:	e08b      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb6:	4948      	ldr	r1, [pc, #288]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bb8:	6849      	ldr	r1, [r1, #4]
 8004bba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004bbe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc0:	4945      	ldr	r1, [pc, #276]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bc2:	6849      	ldr	r1, [r1, #4]
 8004bc4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	d024      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bcc:	4942      	ldr	r1, [pc, #264]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bce:	6849      	ldr	r1, [r1, #4]
 8004bd0:	0989      	lsrs	r1, r1, #6
 8004bd2:	4608      	mov	r0, r1
 8004bd4:	f04f 0100 	mov.w	r1, #0
 8004bd8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004bdc:	f04f 0500 	mov.w	r5, #0
 8004be0:	ea00 0204 	and.w	r2, r0, r4
 8004be4:	ea01 0305 	and.w	r3, r1, r5
 8004be8:	493d      	ldr	r1, [pc, #244]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004bea:	fb01 f003 	mul.w	r0, r1, r3
 8004bee:	2100      	movs	r1, #0
 8004bf0:	fb01 f102 	mul.w	r1, r1, r2
 8004bf4:	1844      	adds	r4, r0, r1
 8004bf6:	493a      	ldr	r1, [pc, #232]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004bf8:	fba2 0101 	umull	r0, r1, r2, r1
 8004bfc:	1863      	adds	r3, r4, r1
 8004bfe:	4619      	mov	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	f7fc f81e 	bl	8000c48 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4613      	mov	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e04a      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c16:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	ea02 0400 	and.w	r4, r2, r0
 8004c2e:	ea03 0501 	and.w	r5, r3, r1
 8004c32:	4620      	mov	r0, r4
 8004c34:	4629      	mov	r1, r5
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	014b      	lsls	r3, r1, #5
 8004c40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c44:	0142      	lsls	r2, r0, #5
 8004c46:	4610      	mov	r0, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	1b00      	subs	r0, r0, r4
 8004c4c:	eb61 0105 	sbc.w	r1, r1, r5
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	018b      	lsls	r3, r1, #6
 8004c5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c5e:	0182      	lsls	r2, r0, #6
 8004c60:	1a12      	subs	r2, r2, r0
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	f04f 0000 	mov.w	r0, #0
 8004c6a:	f04f 0100 	mov.w	r1, #0
 8004c6e:	00d9      	lsls	r1, r3, #3
 8004c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c74:	00d0      	lsls	r0, r2, #3
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	1912      	adds	r2, r2, r4
 8004c7c:	eb45 0303 	adc.w	r3, r5, r3
 8004c80:	f04f 0000 	mov.w	r0, #0
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	0299      	lsls	r1, r3, #10
 8004c8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c8e:	0290      	lsls	r0, r2, #10
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	f7fb ffd2 	bl	8000c48 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc4:	60bb      	str	r3, [r7, #8]
      break;
 8004cc6:	e002      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc8:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x164>)
 8004cca:	60bb      	str	r3, [r7, #8]
      break;
 8004ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cce:	68bb      	ldr	r3, [r7, #8]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	00f42400 	.word	0x00f42400
 8004ce0:	017d7840 	.word	0x017d7840

08004ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07b      	b.n	8004dee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d06:	d009      	beq.n	8004d1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	61da      	str	r2, [r3, #28]
 8004d0e:	e005      	b.n	8004d1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fd fb64 	bl	8002404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da0:	ea42 0103 	orr.w	r1, r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	f003 0104 	and.w	r1, r3, #4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f003 0210 	and.w	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b088      	sub	sp, #32
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_SPI_Transmit+0x22>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e126      	b.n	8005066 <HAL_SPI_Transmit+0x270>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e20:	f7fd fd50 	bl	80028c4 <HAL_GetTick>
 8004e24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d002      	beq.n	8004e3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
 8004e38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e3a:	e10b      	b.n	8005054 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_SPI_Transmit+0x52>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e4c:	e102      	b.n	8005054 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2203      	movs	r2, #3
 8004e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e94:	d10f      	bne.n	8004eb6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d007      	beq.n	8004ed4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004edc:	d14b      	bne.n	8004f76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_Transmit+0xf6>
 8004ee6:	8afb      	ldrh	r3, [r7, #22]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d13e      	bne.n	8004f6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f10:	e02b      	b.n	8004f6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d112      	bne.n	8004f46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	1c9a      	adds	r2, r3, #2
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f44:	e011      	b.n	8004f6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f46:	f7fd fcbd 	bl	80028c4 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d803      	bhi.n	8004f5e <HAL_SPI_Transmit+0x168>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d102      	bne.n	8004f64 <HAL_SPI_Transmit+0x16e>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f68:	e074      	b.n	8005054 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ce      	bne.n	8004f12 <HAL_SPI_Transmit+0x11c>
 8004f74:	e04c      	b.n	8005010 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <HAL_SPI_Transmit+0x18e>
 8004f7e:	8afb      	ldrh	r3, [r7, #22]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d140      	bne.n	8005006 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	7812      	ldrb	r2, [r2, #0]
 8004f90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004faa:	e02c      	b.n	8005006 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d113      	bne.n	8004fe2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fe0:	e011      	b.n	8005006 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe2:	f7fd fc6f 	bl	80028c4 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d803      	bhi.n	8004ffa <HAL_SPI_Transmit+0x204>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d102      	bne.n	8005000 <HAL_SPI_Transmit+0x20a>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d102      	bne.n	8005006 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005004:	e026      	b.n	8005054 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1cd      	bne.n	8004fac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fbd9 	bl	80057cc <SPI_EndRxTxTransaction>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e000      	b.n	8005054 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005052:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005064:	7ffb      	ldrb	r3, [r7, #31]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b088      	sub	sp, #32
 8005072:	af02      	add	r7, sp, #8
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	4613      	mov	r3, r2
 800507c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508a:	d112      	bne.n	80050b2 <HAL_SPI_Receive+0x44>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10e      	bne.n	80050b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2204      	movs	r2, #4
 8005098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f8f1 	bl	8005290 <HAL_SPI_TransmitReceive>
 80050ae:	4603      	mov	r3, r0
 80050b0:	e0ea      	b.n	8005288 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_SPI_Receive+0x52>
 80050bc:	2302      	movs	r3, #2
 80050be:	e0e3      	b.n	8005288 <HAL_SPI_Receive+0x21a>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050c8:	f7fd fbfc 	bl	80028c4 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d002      	beq.n	80050e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80050da:	2302      	movs	r3, #2
 80050dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050de:	e0ca      	b.n	8005276 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_SPI_Receive+0x7e>
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050f0:	e0c1      	b.n	8005276 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2204      	movs	r2, #4
 80050f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	88fa      	ldrh	r2, [r7, #6]
 800510a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	88fa      	ldrh	r2, [r7, #6]
 8005110:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005138:	d10f      	bne.n	800515a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005148:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005158:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d007      	beq.n	8005178 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005176:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d162      	bne.n	8005246 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005180:	e02e      	b.n	80051e0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d115      	bne.n	80051bc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f103 020c 	add.w	r2, r3, #12
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	7812      	ldrb	r2, [r2, #0]
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ba:	e011      	b.n	80051e0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051bc:	f7fd fb82 	bl	80028c4 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d803      	bhi.n	80051d4 <HAL_SPI_Receive+0x166>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d2:	d102      	bne.n	80051da <HAL_SPI_Receive+0x16c>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051de:	e04a      	b.n	8005276 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1cb      	bne.n	8005182 <HAL_SPI_Receive+0x114>
 80051ea:	e031      	b.n	8005250 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d113      	bne.n	8005222 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	b292      	uxth	r2, r2
 8005206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	1c9a      	adds	r2, r3, #2
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005220:	e011      	b.n	8005246 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005222:	f7fd fb4f 	bl	80028c4 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d803      	bhi.n	800523a <HAL_SPI_Receive+0x1cc>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d102      	bne.n	8005240 <HAL_SPI_Receive+0x1d2>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005244:	e017      	b.n	8005276 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1cd      	bne.n	80051ec <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fa53 	bl	8005700 <SPI_EndRxTransaction>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
 8005272:	e000      	b.n	8005276 <HAL_SPI_Receive+0x208>
  }

error :
 8005274:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08c      	sub	sp, #48	; 0x30
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800529e:	2301      	movs	r3, #1
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x26>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e18a      	b.n	80055cc <HAL_SPI_TransmitReceive+0x33c>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052be:	f7fd fb01 	bl	80028c4 <HAL_GetTick>
 80052c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80052d4:	887b      	ldrh	r3, [r7, #2]
 80052d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d00f      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x70>
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e6:	d107      	bne.n	80052f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d103      	bne.n	80052f8 <HAL_SPI_TransmitReceive+0x68>
 80052f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d003      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052f8:	2302      	movs	r3, #2
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052fe:	e15b      	b.n	80055b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_SPI_TransmitReceive+0x82>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_SPI_TransmitReceive+0x82>
 800530c:	887b      	ldrh	r3, [r7, #2]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d103      	bne.n	800531a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005318:	e14e      	b.n	80055b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b04      	cmp	r3, #4
 8005324:	d003      	beq.n	800532e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2205      	movs	r2, #5
 800532a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	887a      	ldrh	r2, [r7, #2]
 800533e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	887a      	ldrh	r2, [r7, #2]
 8005344:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	887a      	ldrh	r2, [r7, #2]
 8005350:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	887a      	ldrh	r2, [r7, #2]
 8005356:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d007      	beq.n	8005382 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800538a:	d178      	bne.n	800547e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <HAL_SPI_TransmitReceive+0x10a>
 8005394:	8b7b      	ldrh	r3, [r7, #26]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d166      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	881a      	ldrh	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	1c9a      	adds	r2, r3, #2
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053be:	e053      	b.n	8005468 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d11b      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x176>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d016      	beq.n	8005406 <HAL_SPI_TransmitReceive+0x176>
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d113      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	881a      	ldrh	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	1c9a      	adds	r2, r3, #2
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d119      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x1b8>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d014      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	b292      	uxth	r2, r2
 800542a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	1c9a      	adds	r2, r3, #2
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005444:	2301      	movs	r3, #1
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005448:	f7fd fa3c 	bl	80028c4 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005454:	429a      	cmp	r2, r3
 8005456:	d807      	bhi.n	8005468 <HAL_SPI_TransmitReceive+0x1d8>
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d003      	beq.n	8005468 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005466:	e0a7      	b.n	80055b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1a6      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x130>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1a1      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x130>
 800547c:	e07c      	b.n	8005578 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_SPI_TransmitReceive+0x1fc>
 8005486:	8b7b      	ldrh	r3, [r7, #26]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d16b      	bne.n	8005564 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	330c      	adds	r3, #12
 8005496:	7812      	ldrb	r2, [r2, #0]
 8005498:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054b2:	e057      	b.n	8005564 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d11c      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x26c>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d017      	beq.n	80054fc <HAL_SPI_TransmitReceive+0x26c>
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d114      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	330c      	adds	r3, #12
 80054dc:	7812      	ldrb	r2, [r2, #0]
 80054de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d119      	bne.n	800553e <HAL_SPI_TransmitReceive+0x2ae>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d014      	beq.n	800553e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800553a:	2301      	movs	r3, #1
 800553c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800553e:	f7fd f9c1 	bl	80028c4 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800554a:	429a      	cmp	r2, r3
 800554c:	d803      	bhi.n	8005556 <HAL_SPI_TransmitReceive+0x2c6>
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d102      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2cc>
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005562:	e029      	b.n	80055b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1a2      	bne.n	80054b4 <HAL_SPI_TransmitReceive+0x224>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d19d      	bne.n	80054b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f925 	bl	80057cc <SPI_EndRxTxTransaction>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d006      	beq.n	8005596 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005594:	e010      	b.n	80055b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10b      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800559e:	2300      	movs	r3, #0
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	e000      	b.n	80055b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80055b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3730      	adds	r7, #48	; 0x30
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e2:	b2db      	uxtb	r3, r3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005600:	f7fd f960 	bl	80028c4 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	4413      	add	r3, r2
 800560e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005610:	f7fd f958 	bl	80028c4 <HAL_GetTick>
 8005614:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005616:	4b39      	ldr	r3, [pc, #228]	; (80056fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	015b      	lsls	r3, r3, #5
 800561c:	0d1b      	lsrs	r3, r3, #20
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	fb02 f303 	mul.w	r3, r2, r3
 8005624:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005626:	e054      	b.n	80056d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d050      	beq.n	80056d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005630:	f7fd f948 	bl	80028c4 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	429a      	cmp	r2, r3
 800563e:	d902      	bls.n	8005646 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d13d      	bne.n	80056c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005654:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800565e:	d111      	bne.n	8005684 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005668:	d004      	beq.n	8005674 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005672:	d107      	bne.n	8005684 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005682:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568c:	d10f      	bne.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e017      	b.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4013      	ands	r3, r2
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	429a      	cmp	r2, r3
 80056e0:	bf0c      	ite	eq
 80056e2:	2301      	moveq	r3, #1
 80056e4:	2300      	movne	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d19b      	bne.n	8005628 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000010 	.word	0x20000010

08005700 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005714:	d111      	bne.n	800573a <SPI_EndRxTransaction+0x3a>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571e:	d004      	beq.n	800572a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005728:	d107      	bne.n	800573a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005738:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005742:	d12a      	bne.n	800579a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574c:	d012      	beq.n	8005774 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2200      	movs	r2, #0
 8005756:	2180      	movs	r1, #128	; 0x80
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff ff49 	bl	80055f0 <SPI_WaitFlagStateUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d02d      	beq.n	80057c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005768:	f043 0220 	orr.w	r2, r3, #32
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e026      	b.n	80057c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	2101      	movs	r1, #1
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff ff36 	bl	80055f0 <SPI_WaitFlagStateUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01a      	beq.n	80057c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e013      	b.n	80057c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2200      	movs	r2, #0
 80057a2:	2101      	movs	r1, #1
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7ff ff23 	bl	80055f0 <SPI_WaitFlagStateUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	f043 0220 	orr.w	r2, r3, #32
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e000      	b.n	80057c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057d8:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <SPI_EndRxTxTransaction+0x7c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1b      	ldr	r2, [pc, #108]	; (800584c <SPI_EndRxTxTransaction+0x80>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	0d5b      	lsrs	r3, r3, #21
 80057e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f6:	d112      	bne.n	800581e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fef4 	bl	80055f0 <SPI_WaitFlagStateUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d016      	beq.n	800583c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	f043 0220 	orr.w	r2, r3, #32
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e00f      	b.n	800583e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	3b01      	subs	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d0f2      	beq.n	800581e <SPI_EndRxTxTransaction+0x52>
 8005838:	e000      	b.n	800583c <SPI_EndRxTxTransaction+0x70>
        break;
 800583a:	bf00      	nop
  }

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000010 	.word	0x20000010
 800584c:	165e9f81 	.word	0x165e9f81

08005850 <__errno>:
 8005850:	4b01      	ldr	r3, [pc, #4]	; (8005858 <__errno+0x8>)
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	2000001c 	.word	0x2000001c

0800585c <__libc_init_array>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	4d0d      	ldr	r5, [pc, #52]	; (8005894 <__libc_init_array+0x38>)
 8005860:	4c0d      	ldr	r4, [pc, #52]	; (8005898 <__libc_init_array+0x3c>)
 8005862:	1b64      	subs	r4, r4, r5
 8005864:	10a4      	asrs	r4, r4, #2
 8005866:	2600      	movs	r6, #0
 8005868:	42a6      	cmp	r6, r4
 800586a:	d109      	bne.n	8005880 <__libc_init_array+0x24>
 800586c:	4d0b      	ldr	r5, [pc, #44]	; (800589c <__libc_init_array+0x40>)
 800586e:	4c0c      	ldr	r4, [pc, #48]	; (80058a0 <__libc_init_array+0x44>)
 8005870:	f002 feb4 	bl	80085dc <_init>
 8005874:	1b64      	subs	r4, r4, r5
 8005876:	10a4      	asrs	r4, r4, #2
 8005878:	2600      	movs	r6, #0
 800587a:	42a6      	cmp	r6, r4
 800587c:	d105      	bne.n	800588a <__libc_init_array+0x2e>
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	f855 3b04 	ldr.w	r3, [r5], #4
 8005884:	4798      	blx	r3
 8005886:	3601      	adds	r6, #1
 8005888:	e7ee      	b.n	8005868 <__libc_init_array+0xc>
 800588a:	f855 3b04 	ldr.w	r3, [r5], #4
 800588e:	4798      	blx	r3
 8005890:	3601      	adds	r6, #1
 8005892:	e7f2      	b.n	800587a <__libc_init_array+0x1e>
 8005894:	08009264 	.word	0x08009264
 8005898:	08009264 	.word	0x08009264
 800589c:	08009264 	.word	0x08009264
 80058a0:	08009268 	.word	0x08009268

080058a4 <memset>:
 80058a4:	4402      	add	r2, r0
 80058a6:	4603      	mov	r3, r0
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d100      	bne.n	80058ae <memset+0xa>
 80058ac:	4770      	bx	lr
 80058ae:	f803 1b01 	strb.w	r1, [r3], #1
 80058b2:	e7f9      	b.n	80058a8 <memset+0x4>

080058b4 <__cvt>:
 80058b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058b8:	ec55 4b10 	vmov	r4, r5, d0
 80058bc:	2d00      	cmp	r5, #0
 80058be:	460e      	mov	r6, r1
 80058c0:	4619      	mov	r1, r3
 80058c2:	462b      	mov	r3, r5
 80058c4:	bfbb      	ittet	lt
 80058c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058ca:	461d      	movlt	r5, r3
 80058cc:	2300      	movge	r3, #0
 80058ce:	232d      	movlt	r3, #45	; 0x2d
 80058d0:	700b      	strb	r3, [r1, #0]
 80058d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058d8:	4691      	mov	r9, r2
 80058da:	f023 0820 	bic.w	r8, r3, #32
 80058de:	bfbc      	itt	lt
 80058e0:	4622      	movlt	r2, r4
 80058e2:	4614      	movlt	r4, r2
 80058e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058e8:	d005      	beq.n	80058f6 <__cvt+0x42>
 80058ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058ee:	d100      	bne.n	80058f2 <__cvt+0x3e>
 80058f0:	3601      	adds	r6, #1
 80058f2:	2102      	movs	r1, #2
 80058f4:	e000      	b.n	80058f8 <__cvt+0x44>
 80058f6:	2103      	movs	r1, #3
 80058f8:	ab03      	add	r3, sp, #12
 80058fa:	9301      	str	r3, [sp, #4]
 80058fc:	ab02      	add	r3, sp, #8
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	ec45 4b10 	vmov	d0, r4, r5
 8005904:	4653      	mov	r3, sl
 8005906:	4632      	mov	r2, r6
 8005908:	f000 fcea 	bl	80062e0 <_dtoa_r>
 800590c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005910:	4607      	mov	r7, r0
 8005912:	d102      	bne.n	800591a <__cvt+0x66>
 8005914:	f019 0f01 	tst.w	r9, #1
 8005918:	d022      	beq.n	8005960 <__cvt+0xac>
 800591a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800591e:	eb07 0906 	add.w	r9, r7, r6
 8005922:	d110      	bne.n	8005946 <__cvt+0x92>
 8005924:	783b      	ldrb	r3, [r7, #0]
 8005926:	2b30      	cmp	r3, #48	; 0x30
 8005928:	d10a      	bne.n	8005940 <__cvt+0x8c>
 800592a:	2200      	movs	r2, #0
 800592c:	2300      	movs	r3, #0
 800592e:	4620      	mov	r0, r4
 8005930:	4629      	mov	r1, r5
 8005932:	f7fb f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005936:	b918      	cbnz	r0, 8005940 <__cvt+0x8c>
 8005938:	f1c6 0601 	rsb	r6, r6, #1
 800593c:	f8ca 6000 	str.w	r6, [sl]
 8005940:	f8da 3000 	ldr.w	r3, [sl]
 8005944:	4499      	add	r9, r3
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	4620      	mov	r0, r4
 800594c:	4629      	mov	r1, r5
 800594e:	f7fb f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005952:	b108      	cbz	r0, 8005958 <__cvt+0xa4>
 8005954:	f8cd 900c 	str.w	r9, [sp, #12]
 8005958:	2230      	movs	r2, #48	; 0x30
 800595a:	9b03      	ldr	r3, [sp, #12]
 800595c:	454b      	cmp	r3, r9
 800595e:	d307      	bcc.n	8005970 <__cvt+0xbc>
 8005960:	9b03      	ldr	r3, [sp, #12]
 8005962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005964:	1bdb      	subs	r3, r3, r7
 8005966:	4638      	mov	r0, r7
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	b004      	add	sp, #16
 800596c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005970:	1c59      	adds	r1, r3, #1
 8005972:	9103      	str	r1, [sp, #12]
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	e7f0      	b.n	800595a <__cvt+0xa6>

08005978 <__exponent>:
 8005978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800597a:	4603      	mov	r3, r0
 800597c:	2900      	cmp	r1, #0
 800597e:	bfb8      	it	lt
 8005980:	4249      	neglt	r1, r1
 8005982:	f803 2b02 	strb.w	r2, [r3], #2
 8005986:	bfb4      	ite	lt
 8005988:	222d      	movlt	r2, #45	; 0x2d
 800598a:	222b      	movge	r2, #43	; 0x2b
 800598c:	2909      	cmp	r1, #9
 800598e:	7042      	strb	r2, [r0, #1]
 8005990:	dd2a      	ble.n	80059e8 <__exponent+0x70>
 8005992:	f10d 0407 	add.w	r4, sp, #7
 8005996:	46a4      	mov	ip, r4
 8005998:	270a      	movs	r7, #10
 800599a:	46a6      	mov	lr, r4
 800599c:	460a      	mov	r2, r1
 800599e:	fb91 f6f7 	sdiv	r6, r1, r7
 80059a2:	fb07 1516 	mls	r5, r7, r6, r1
 80059a6:	3530      	adds	r5, #48	; 0x30
 80059a8:	2a63      	cmp	r2, #99	; 0x63
 80059aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80059ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059b2:	4631      	mov	r1, r6
 80059b4:	dcf1      	bgt.n	800599a <__exponent+0x22>
 80059b6:	3130      	adds	r1, #48	; 0x30
 80059b8:	f1ae 0502 	sub.w	r5, lr, #2
 80059bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059c0:	1c44      	adds	r4, r0, #1
 80059c2:	4629      	mov	r1, r5
 80059c4:	4561      	cmp	r1, ip
 80059c6:	d30a      	bcc.n	80059de <__exponent+0x66>
 80059c8:	f10d 0209 	add.w	r2, sp, #9
 80059cc:	eba2 020e 	sub.w	r2, r2, lr
 80059d0:	4565      	cmp	r5, ip
 80059d2:	bf88      	it	hi
 80059d4:	2200      	movhi	r2, #0
 80059d6:	4413      	add	r3, r2
 80059d8:	1a18      	subs	r0, r3, r0
 80059da:	b003      	add	sp, #12
 80059dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059e6:	e7ed      	b.n	80059c4 <__exponent+0x4c>
 80059e8:	2330      	movs	r3, #48	; 0x30
 80059ea:	3130      	adds	r1, #48	; 0x30
 80059ec:	7083      	strb	r3, [r0, #2]
 80059ee:	70c1      	strb	r1, [r0, #3]
 80059f0:	1d03      	adds	r3, r0, #4
 80059f2:	e7f1      	b.n	80059d8 <__exponent+0x60>

080059f4 <_printf_float>:
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	ed2d 8b02 	vpush	{d8}
 80059fc:	b08d      	sub	sp, #52	; 0x34
 80059fe:	460c      	mov	r4, r1
 8005a00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a04:	4616      	mov	r6, r2
 8005a06:	461f      	mov	r7, r3
 8005a08:	4605      	mov	r5, r0
 8005a0a:	f001 fa55 	bl	8006eb8 <_localeconv_r>
 8005a0e:	f8d0 a000 	ldr.w	sl, [r0]
 8005a12:	4650      	mov	r0, sl
 8005a14:	f7fa fbdc 	bl	80001d0 <strlen>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	9305      	str	r3, [sp, #20]
 8005a20:	f8d8 3000 	ldr.w	r3, [r8]
 8005a24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a28:	3307      	adds	r3, #7
 8005a2a:	f023 0307 	bic.w	r3, r3, #7
 8005a2e:	f103 0208 	add.w	r2, r3, #8
 8005a32:	f8c8 2000 	str.w	r2, [r8]
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a46:	9307      	str	r3, [sp, #28]
 8005a48:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a4c:	ee08 0a10 	vmov	s16, r0
 8005a50:	4b9f      	ldr	r3, [pc, #636]	; (8005cd0 <_printf_float+0x2dc>)
 8005a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	f7fb f867 	bl	8000b2c <__aeabi_dcmpun>
 8005a5e:	bb88      	cbnz	r0, 8005ac4 <_printf_float+0xd0>
 8005a60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a64:	4b9a      	ldr	r3, [pc, #616]	; (8005cd0 <_printf_float+0x2dc>)
 8005a66:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6a:	f7fb f841 	bl	8000af0 <__aeabi_dcmple>
 8005a6e:	bb48      	cbnz	r0, 8005ac4 <_printf_float+0xd0>
 8005a70:	2200      	movs	r2, #0
 8005a72:	2300      	movs	r3, #0
 8005a74:	4640      	mov	r0, r8
 8005a76:	4649      	mov	r1, r9
 8005a78:	f7fb f830 	bl	8000adc <__aeabi_dcmplt>
 8005a7c:	b110      	cbz	r0, 8005a84 <_printf_float+0x90>
 8005a7e:	232d      	movs	r3, #45	; 0x2d
 8005a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a84:	4b93      	ldr	r3, [pc, #588]	; (8005cd4 <_printf_float+0x2e0>)
 8005a86:	4894      	ldr	r0, [pc, #592]	; (8005cd8 <_printf_float+0x2e4>)
 8005a88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a8c:	bf94      	ite	ls
 8005a8e:	4698      	movls	r8, r3
 8005a90:	4680      	movhi	r8, r0
 8005a92:	2303      	movs	r3, #3
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	9b05      	ldr	r3, [sp, #20]
 8005a98:	f023 0204 	bic.w	r2, r3, #4
 8005a9c:	6022      	str	r2, [r4, #0]
 8005a9e:	f04f 0900 	mov.w	r9, #0
 8005aa2:	9700      	str	r7, [sp, #0]
 8005aa4:	4633      	mov	r3, r6
 8005aa6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f000 f9d8 	bl	8005e60 <_printf_common>
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f040 8090 	bne.w	8005bd6 <_printf_float+0x1e2>
 8005ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aba:	b00d      	add	sp, #52	; 0x34
 8005abc:	ecbd 8b02 	vpop	{d8}
 8005ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	4649      	mov	r1, r9
 8005acc:	f7fb f82e 	bl	8000b2c <__aeabi_dcmpun>
 8005ad0:	b140      	cbz	r0, 8005ae4 <_printf_float+0xf0>
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bfbc      	itt	lt
 8005ad8:	232d      	movlt	r3, #45	; 0x2d
 8005ada:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ade:	487f      	ldr	r0, [pc, #508]	; (8005cdc <_printf_float+0x2e8>)
 8005ae0:	4b7f      	ldr	r3, [pc, #508]	; (8005ce0 <_printf_float+0x2ec>)
 8005ae2:	e7d1      	b.n	8005a88 <_printf_float+0x94>
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005aea:	9206      	str	r2, [sp, #24]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	d13f      	bne.n	8005b70 <_printf_float+0x17c>
 8005af0:	2306      	movs	r3, #6
 8005af2:	6063      	str	r3, [r4, #4]
 8005af4:	9b05      	ldr	r3, [sp, #20]
 8005af6:	6861      	ldr	r1, [r4, #4]
 8005af8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005afc:	2300      	movs	r3, #0
 8005afe:	9303      	str	r3, [sp, #12]
 8005b00:	ab0a      	add	r3, sp, #40	; 0x28
 8005b02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b06:	ab09      	add	r3, sp, #36	; 0x24
 8005b08:	ec49 8b10 	vmov	d0, r8, r9
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	6022      	str	r2, [r4, #0]
 8005b10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b14:	4628      	mov	r0, r5
 8005b16:	f7ff fecd 	bl	80058b4 <__cvt>
 8005b1a:	9b06      	ldr	r3, [sp, #24]
 8005b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b1e:	2b47      	cmp	r3, #71	; 0x47
 8005b20:	4680      	mov	r8, r0
 8005b22:	d108      	bne.n	8005b36 <_printf_float+0x142>
 8005b24:	1cc8      	adds	r0, r1, #3
 8005b26:	db02      	blt.n	8005b2e <_printf_float+0x13a>
 8005b28:	6863      	ldr	r3, [r4, #4]
 8005b2a:	4299      	cmp	r1, r3
 8005b2c:	dd41      	ble.n	8005bb2 <_printf_float+0x1be>
 8005b2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005b32:	fa5f fb8b 	uxtb.w	fp, fp
 8005b36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b3a:	d820      	bhi.n	8005b7e <_printf_float+0x18a>
 8005b3c:	3901      	subs	r1, #1
 8005b3e:	465a      	mov	r2, fp
 8005b40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b44:	9109      	str	r1, [sp, #36]	; 0x24
 8005b46:	f7ff ff17 	bl	8005978 <__exponent>
 8005b4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b4c:	1813      	adds	r3, r2, r0
 8005b4e:	2a01      	cmp	r2, #1
 8005b50:	4681      	mov	r9, r0
 8005b52:	6123      	str	r3, [r4, #16]
 8005b54:	dc02      	bgt.n	8005b5c <_printf_float+0x168>
 8005b56:	6822      	ldr	r2, [r4, #0]
 8005b58:	07d2      	lsls	r2, r2, #31
 8005b5a:	d501      	bpl.n	8005b60 <_printf_float+0x16c>
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	6123      	str	r3, [r4, #16]
 8005b60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d09c      	beq.n	8005aa2 <_printf_float+0xae>
 8005b68:	232d      	movs	r3, #45	; 0x2d
 8005b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b6e:	e798      	b.n	8005aa2 <_printf_float+0xae>
 8005b70:	9a06      	ldr	r2, [sp, #24]
 8005b72:	2a47      	cmp	r2, #71	; 0x47
 8005b74:	d1be      	bne.n	8005af4 <_printf_float+0x100>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1bc      	bne.n	8005af4 <_printf_float+0x100>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e7b9      	b.n	8005af2 <_printf_float+0xfe>
 8005b7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b82:	d118      	bne.n	8005bb6 <_printf_float+0x1c2>
 8005b84:	2900      	cmp	r1, #0
 8005b86:	6863      	ldr	r3, [r4, #4]
 8005b88:	dd0b      	ble.n	8005ba2 <_printf_float+0x1ae>
 8005b8a:	6121      	str	r1, [r4, #16]
 8005b8c:	b913      	cbnz	r3, 8005b94 <_printf_float+0x1a0>
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	07d0      	lsls	r0, r2, #31
 8005b92:	d502      	bpl.n	8005b9a <_printf_float+0x1a6>
 8005b94:	3301      	adds	r3, #1
 8005b96:	440b      	add	r3, r1
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b9c:	f04f 0900 	mov.w	r9, #0
 8005ba0:	e7de      	b.n	8005b60 <_printf_float+0x16c>
 8005ba2:	b913      	cbnz	r3, 8005baa <_printf_float+0x1b6>
 8005ba4:	6822      	ldr	r2, [r4, #0]
 8005ba6:	07d2      	lsls	r2, r2, #31
 8005ba8:	d501      	bpl.n	8005bae <_printf_float+0x1ba>
 8005baa:	3302      	adds	r3, #2
 8005bac:	e7f4      	b.n	8005b98 <_printf_float+0x1a4>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e7f2      	b.n	8005b98 <_printf_float+0x1a4>
 8005bb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	db05      	blt.n	8005bc8 <_printf_float+0x1d4>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	6121      	str	r1, [r4, #16]
 8005bc0:	07d8      	lsls	r0, r3, #31
 8005bc2:	d5ea      	bpl.n	8005b9a <_printf_float+0x1a6>
 8005bc4:	1c4b      	adds	r3, r1, #1
 8005bc6:	e7e7      	b.n	8005b98 <_printf_float+0x1a4>
 8005bc8:	2900      	cmp	r1, #0
 8005bca:	bfd4      	ite	le
 8005bcc:	f1c1 0202 	rsble	r2, r1, #2
 8005bd0:	2201      	movgt	r2, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	e7e0      	b.n	8005b98 <_printf_float+0x1a4>
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	055a      	lsls	r2, r3, #21
 8005bda:	d407      	bmi.n	8005bec <_printf_float+0x1f8>
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	4642      	mov	r2, r8
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b8      	blx	r7
 8005be6:	3001      	adds	r0, #1
 8005be8:	d12c      	bne.n	8005c44 <_printf_float+0x250>
 8005bea:	e764      	b.n	8005ab6 <_printf_float+0xc2>
 8005bec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bf0:	f240 80e0 	bls.w	8005db4 <_printf_float+0x3c0>
 8005bf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f7fa ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d034      	beq.n	8005c6e <_printf_float+0x27a>
 8005c04:	4a37      	ldr	r2, [pc, #220]	; (8005ce4 <_printf_float+0x2f0>)
 8005c06:	2301      	movs	r3, #1
 8005c08:	4631      	mov	r1, r6
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b8      	blx	r7
 8005c0e:	3001      	adds	r0, #1
 8005c10:	f43f af51 	beq.w	8005ab6 <_printf_float+0xc2>
 8005c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	db02      	blt.n	8005c22 <_printf_float+0x22e>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	07d8      	lsls	r0, r3, #31
 8005c20:	d510      	bpl.n	8005c44 <_printf_float+0x250>
 8005c22:	ee18 3a10 	vmov	r3, s16
 8005c26:	4652      	mov	r2, sl
 8005c28:	4631      	mov	r1, r6
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	47b8      	blx	r7
 8005c2e:	3001      	adds	r0, #1
 8005c30:	f43f af41 	beq.w	8005ab6 <_printf_float+0xc2>
 8005c34:	f04f 0800 	mov.w	r8, #0
 8005c38:	f104 091a 	add.w	r9, r4, #26
 8005c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	4543      	cmp	r3, r8
 8005c42:	dc09      	bgt.n	8005c58 <_printf_float+0x264>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	079b      	lsls	r3, r3, #30
 8005c48:	f100 8105 	bmi.w	8005e56 <_printf_float+0x462>
 8005c4c:	68e0      	ldr	r0, [r4, #12]
 8005c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c50:	4298      	cmp	r0, r3
 8005c52:	bfb8      	it	lt
 8005c54:	4618      	movlt	r0, r3
 8005c56:	e730      	b.n	8005aba <_printf_float+0xc6>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	464a      	mov	r2, r9
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	f43f af27 	beq.w	8005ab6 <_printf_float+0xc2>
 8005c68:	f108 0801 	add.w	r8, r8, #1
 8005c6c:	e7e6      	b.n	8005c3c <_printf_float+0x248>
 8005c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	dc39      	bgt.n	8005ce8 <_printf_float+0x2f4>
 8005c74:	4a1b      	ldr	r2, [pc, #108]	; (8005ce4 <_printf_float+0x2f0>)
 8005c76:	2301      	movs	r3, #1
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f af19 	beq.w	8005ab6 <_printf_float+0xc2>
 8005c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	d102      	bne.n	8005c92 <_printf_float+0x29e>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	07d9      	lsls	r1, r3, #31
 8005c90:	d5d8      	bpl.n	8005c44 <_printf_float+0x250>
 8005c92:	ee18 3a10 	vmov	r3, s16
 8005c96:	4652      	mov	r2, sl
 8005c98:	4631      	mov	r1, r6
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	47b8      	blx	r7
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	f43f af09 	beq.w	8005ab6 <_printf_float+0xc2>
 8005ca4:	f04f 0900 	mov.w	r9, #0
 8005ca8:	f104 0a1a 	add.w	sl, r4, #26
 8005cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cae:	425b      	negs	r3, r3
 8005cb0:	454b      	cmp	r3, r9
 8005cb2:	dc01      	bgt.n	8005cb8 <_printf_float+0x2c4>
 8005cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb6:	e792      	b.n	8005bde <_printf_float+0x1ea>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	4652      	mov	r2, sl
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	47b8      	blx	r7
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	f43f aef7 	beq.w	8005ab6 <_printf_float+0xc2>
 8005cc8:	f109 0901 	add.w	r9, r9, #1
 8005ccc:	e7ee      	b.n	8005cac <_printf_float+0x2b8>
 8005cce:	bf00      	nop
 8005cd0:	7fefffff 	.word	0x7fefffff
 8005cd4:	08008e80 	.word	0x08008e80
 8005cd8:	08008e84 	.word	0x08008e84
 8005cdc:	08008e8c 	.word	0x08008e8c
 8005ce0:	08008e88 	.word	0x08008e88
 8005ce4:	08008e90 	.word	0x08008e90
 8005ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cec:	429a      	cmp	r2, r3
 8005cee:	bfa8      	it	ge
 8005cf0:	461a      	movge	r2, r3
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	4691      	mov	r9, r2
 8005cf6:	dc37      	bgt.n	8005d68 <_printf_float+0x374>
 8005cf8:	f04f 0b00 	mov.w	fp, #0
 8005cfc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d00:	f104 021a 	add.w	r2, r4, #26
 8005d04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d06:	9305      	str	r3, [sp, #20]
 8005d08:	eba3 0309 	sub.w	r3, r3, r9
 8005d0c:	455b      	cmp	r3, fp
 8005d0e:	dc33      	bgt.n	8005d78 <_printf_float+0x384>
 8005d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d14:	429a      	cmp	r2, r3
 8005d16:	db3b      	blt.n	8005d90 <_printf_float+0x39c>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	07da      	lsls	r2, r3, #31
 8005d1c:	d438      	bmi.n	8005d90 <_printf_float+0x39c>
 8005d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d20:	9b05      	ldr	r3, [sp, #20]
 8005d22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	eba2 0901 	sub.w	r9, r2, r1
 8005d2a:	4599      	cmp	r9, r3
 8005d2c:	bfa8      	it	ge
 8005d2e:	4699      	movge	r9, r3
 8005d30:	f1b9 0f00 	cmp.w	r9, #0
 8005d34:	dc35      	bgt.n	8005da2 <_printf_float+0x3ae>
 8005d36:	f04f 0800 	mov.w	r8, #0
 8005d3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d3e:	f104 0a1a 	add.w	sl, r4, #26
 8005d42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	eba3 0309 	sub.w	r3, r3, r9
 8005d4c:	4543      	cmp	r3, r8
 8005d4e:	f77f af79 	ble.w	8005c44 <_printf_float+0x250>
 8005d52:	2301      	movs	r3, #1
 8005d54:	4652      	mov	r2, sl
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	f43f aeaa 	beq.w	8005ab6 <_printf_float+0xc2>
 8005d62:	f108 0801 	add.w	r8, r8, #1
 8005d66:	e7ec      	b.n	8005d42 <_printf_float+0x34e>
 8005d68:	4613      	mov	r3, r2
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	4628      	mov	r0, r5
 8005d70:	47b8      	blx	r7
 8005d72:	3001      	adds	r0, #1
 8005d74:	d1c0      	bne.n	8005cf8 <_printf_float+0x304>
 8005d76:	e69e      	b.n	8005ab6 <_printf_float+0xc2>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	9205      	str	r2, [sp, #20]
 8005d80:	47b8      	blx	r7
 8005d82:	3001      	adds	r0, #1
 8005d84:	f43f ae97 	beq.w	8005ab6 <_printf_float+0xc2>
 8005d88:	9a05      	ldr	r2, [sp, #20]
 8005d8a:	f10b 0b01 	add.w	fp, fp, #1
 8005d8e:	e7b9      	b.n	8005d04 <_printf_float+0x310>
 8005d90:	ee18 3a10 	vmov	r3, s16
 8005d94:	4652      	mov	r2, sl
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b8      	blx	r7
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d1be      	bne.n	8005d1e <_printf_float+0x32a>
 8005da0:	e689      	b.n	8005ab6 <_printf_float+0xc2>
 8005da2:	9a05      	ldr	r2, [sp, #20]
 8005da4:	464b      	mov	r3, r9
 8005da6:	4442      	add	r2, r8
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	d1c1      	bne.n	8005d36 <_printf_float+0x342>
 8005db2:	e680      	b.n	8005ab6 <_printf_float+0xc2>
 8005db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005db6:	2a01      	cmp	r2, #1
 8005db8:	dc01      	bgt.n	8005dbe <_printf_float+0x3ca>
 8005dba:	07db      	lsls	r3, r3, #31
 8005dbc:	d538      	bpl.n	8005e30 <_printf_float+0x43c>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	47b8      	blx	r7
 8005dc8:	3001      	adds	r0, #1
 8005dca:	f43f ae74 	beq.w	8005ab6 <_printf_float+0xc2>
 8005dce:	ee18 3a10 	vmov	r3, s16
 8005dd2:	4652      	mov	r2, sl
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	47b8      	blx	r7
 8005dda:	3001      	adds	r0, #1
 8005ddc:	f43f ae6b 	beq.w	8005ab6 <_printf_float+0xc2>
 8005de0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005de4:	2200      	movs	r2, #0
 8005de6:	2300      	movs	r3, #0
 8005de8:	f7fa fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dec:	b9d8      	cbnz	r0, 8005e26 <_printf_float+0x432>
 8005dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df0:	f108 0201 	add.w	r2, r8, #1
 8005df4:	3b01      	subs	r3, #1
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d10e      	bne.n	8005e1e <_printf_float+0x42a>
 8005e00:	e659      	b.n	8005ab6 <_printf_float+0xc2>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4652      	mov	r2, sl
 8005e06:	4631      	mov	r1, r6
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b8      	blx	r7
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f43f ae52 	beq.w	8005ab6 <_printf_float+0xc2>
 8005e12:	f108 0801 	add.w	r8, r8, #1
 8005e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	4543      	cmp	r3, r8
 8005e1c:	dcf1      	bgt.n	8005e02 <_printf_float+0x40e>
 8005e1e:	464b      	mov	r3, r9
 8005e20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e24:	e6dc      	b.n	8005be0 <_printf_float+0x1ec>
 8005e26:	f04f 0800 	mov.w	r8, #0
 8005e2a:	f104 0a1a 	add.w	sl, r4, #26
 8005e2e:	e7f2      	b.n	8005e16 <_printf_float+0x422>
 8005e30:	2301      	movs	r3, #1
 8005e32:	4642      	mov	r2, r8
 8005e34:	e7df      	b.n	8005df6 <_printf_float+0x402>
 8005e36:	2301      	movs	r3, #1
 8005e38:	464a      	mov	r2, r9
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b8      	blx	r7
 8005e40:	3001      	adds	r0, #1
 8005e42:	f43f ae38 	beq.w	8005ab6 <_printf_float+0xc2>
 8005e46:	f108 0801 	add.w	r8, r8, #1
 8005e4a:	68e3      	ldr	r3, [r4, #12]
 8005e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e4e:	1a5b      	subs	r3, r3, r1
 8005e50:	4543      	cmp	r3, r8
 8005e52:	dcf0      	bgt.n	8005e36 <_printf_float+0x442>
 8005e54:	e6fa      	b.n	8005c4c <_printf_float+0x258>
 8005e56:	f04f 0800 	mov.w	r8, #0
 8005e5a:	f104 0919 	add.w	r9, r4, #25
 8005e5e:	e7f4      	b.n	8005e4a <_printf_float+0x456>

08005e60 <_printf_common>:
 8005e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	4616      	mov	r6, r2
 8005e66:	4699      	mov	r9, r3
 8005e68:	688a      	ldr	r2, [r1, #8]
 8005e6a:	690b      	ldr	r3, [r1, #16]
 8005e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e70:	4293      	cmp	r3, r2
 8005e72:	bfb8      	it	lt
 8005e74:	4613      	movlt	r3, r2
 8005e76:	6033      	str	r3, [r6, #0]
 8005e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	b10a      	cbz	r2, 8005e86 <_printf_common+0x26>
 8005e82:	3301      	adds	r3, #1
 8005e84:	6033      	str	r3, [r6, #0]
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	0699      	lsls	r1, r3, #26
 8005e8a:	bf42      	ittt	mi
 8005e8c:	6833      	ldrmi	r3, [r6, #0]
 8005e8e:	3302      	addmi	r3, #2
 8005e90:	6033      	strmi	r3, [r6, #0]
 8005e92:	6825      	ldr	r5, [r4, #0]
 8005e94:	f015 0506 	ands.w	r5, r5, #6
 8005e98:	d106      	bne.n	8005ea8 <_printf_common+0x48>
 8005e9a:	f104 0a19 	add.w	sl, r4, #25
 8005e9e:	68e3      	ldr	r3, [r4, #12]
 8005ea0:	6832      	ldr	r2, [r6, #0]
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dc26      	bgt.n	8005ef6 <_printf_common+0x96>
 8005ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005eac:	1e13      	subs	r3, r2, #0
 8005eae:	6822      	ldr	r2, [r4, #0]
 8005eb0:	bf18      	it	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	0692      	lsls	r2, r2, #26
 8005eb6:	d42b      	bmi.n	8005f10 <_printf_common+0xb0>
 8005eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	47c0      	blx	r8
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d01e      	beq.n	8005f04 <_printf_common+0xa4>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	68e5      	ldr	r5, [r4, #12]
 8005eca:	6832      	ldr	r2, [r6, #0]
 8005ecc:	f003 0306 	and.w	r3, r3, #6
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	bf08      	it	eq
 8005ed4:	1aad      	subeq	r5, r5, r2
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	6922      	ldr	r2, [r4, #16]
 8005eda:	bf0c      	ite	eq
 8005edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee0:	2500      	movne	r5, #0
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	bfc4      	itt	gt
 8005ee6:	1a9b      	subgt	r3, r3, r2
 8005ee8:	18ed      	addgt	r5, r5, r3
 8005eea:	2600      	movs	r6, #0
 8005eec:	341a      	adds	r4, #26
 8005eee:	42b5      	cmp	r5, r6
 8005ef0:	d11a      	bne.n	8005f28 <_printf_common+0xc8>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	e008      	b.n	8005f08 <_printf_common+0xa8>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4652      	mov	r2, sl
 8005efa:	4649      	mov	r1, r9
 8005efc:	4638      	mov	r0, r7
 8005efe:	47c0      	blx	r8
 8005f00:	3001      	adds	r0, #1
 8005f02:	d103      	bne.n	8005f0c <_printf_common+0xac>
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	e7c6      	b.n	8005e9e <_printf_common+0x3e>
 8005f10:	18e1      	adds	r1, r4, r3
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	2030      	movs	r0, #48	; 0x30
 8005f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f1a:	4422      	add	r2, r4
 8005f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f24:	3302      	adds	r3, #2
 8005f26:	e7c7      	b.n	8005eb8 <_printf_common+0x58>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c0      	blx	r8
 8005f32:	3001      	adds	r0, #1
 8005f34:	d0e6      	beq.n	8005f04 <_printf_common+0xa4>
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7d9      	b.n	8005eee <_printf_common+0x8e>
	...

08005f3c <_printf_i>:
 8005f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	460c      	mov	r4, r1
 8005f42:	4691      	mov	r9, r2
 8005f44:	7e27      	ldrb	r7, [r4, #24]
 8005f46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f48:	2f78      	cmp	r7, #120	; 0x78
 8005f4a:	4680      	mov	r8, r0
 8005f4c:	469a      	mov	sl, r3
 8005f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f52:	d807      	bhi.n	8005f64 <_printf_i+0x28>
 8005f54:	2f62      	cmp	r7, #98	; 0x62
 8005f56:	d80a      	bhi.n	8005f6e <_printf_i+0x32>
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	f000 80d8 	beq.w	800610e <_printf_i+0x1d2>
 8005f5e:	2f58      	cmp	r7, #88	; 0x58
 8005f60:	f000 80a3 	beq.w	80060aa <_printf_i+0x16e>
 8005f64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f6c:	e03a      	b.n	8005fe4 <_printf_i+0xa8>
 8005f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f72:	2b15      	cmp	r3, #21
 8005f74:	d8f6      	bhi.n	8005f64 <_printf_i+0x28>
 8005f76:	a001      	add	r0, pc, #4	; (adr r0, 8005f7c <_printf_i+0x40>)
 8005f78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005f65 	.word	0x08005f65
 8005f88:	08005f65 	.word	0x08005f65
 8005f8c:	08005f65 	.word	0x08005f65
 8005f90:	08005f65 	.word	0x08005f65
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005f65 	.word	0x08005f65
 8005f9c:	08005f65 	.word	0x08005f65
 8005fa0:	08005f65 	.word	0x08005f65
 8005fa4:	08005f65 	.word	0x08005f65
 8005fa8:	080060f5 	.word	0x080060f5
 8005fac:	08006019 	.word	0x08006019
 8005fb0:	080060d7 	.word	0x080060d7
 8005fb4:	08005f65 	.word	0x08005f65
 8005fb8:	08005f65 	.word	0x08005f65
 8005fbc:	08006117 	.word	0x08006117
 8005fc0:	08005f65 	.word	0x08005f65
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08005f65 	.word	0x08005f65
 8005fcc:	08005f65 	.word	0x08005f65
 8005fd0:	080060df 	.word	0x080060df
 8005fd4:	680b      	ldr	r3, [r1, #0]
 8005fd6:	1d1a      	adds	r2, r3, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	600a      	str	r2, [r1, #0]
 8005fdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0a3      	b.n	8006130 <_printf_i+0x1f4>
 8005fe8:	6825      	ldr	r5, [r4, #0]
 8005fea:	6808      	ldr	r0, [r1, #0]
 8005fec:	062e      	lsls	r6, r5, #24
 8005fee:	f100 0304 	add.w	r3, r0, #4
 8005ff2:	d50a      	bpl.n	800600a <_printf_i+0xce>
 8005ff4:	6805      	ldr	r5, [r0, #0]
 8005ff6:	600b      	str	r3, [r1, #0]
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	da03      	bge.n	8006004 <_printf_i+0xc8>
 8005ffc:	232d      	movs	r3, #45	; 0x2d
 8005ffe:	426d      	negs	r5, r5
 8006000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006004:	485e      	ldr	r0, [pc, #376]	; (8006180 <_printf_i+0x244>)
 8006006:	230a      	movs	r3, #10
 8006008:	e019      	b.n	800603e <_printf_i+0x102>
 800600a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800600e:	6805      	ldr	r5, [r0, #0]
 8006010:	600b      	str	r3, [r1, #0]
 8006012:	bf18      	it	ne
 8006014:	b22d      	sxthne	r5, r5
 8006016:	e7ef      	b.n	8005ff8 <_printf_i+0xbc>
 8006018:	680b      	ldr	r3, [r1, #0]
 800601a:	6825      	ldr	r5, [r4, #0]
 800601c:	1d18      	adds	r0, r3, #4
 800601e:	6008      	str	r0, [r1, #0]
 8006020:	0628      	lsls	r0, r5, #24
 8006022:	d501      	bpl.n	8006028 <_printf_i+0xec>
 8006024:	681d      	ldr	r5, [r3, #0]
 8006026:	e002      	b.n	800602e <_printf_i+0xf2>
 8006028:	0669      	lsls	r1, r5, #25
 800602a:	d5fb      	bpl.n	8006024 <_printf_i+0xe8>
 800602c:	881d      	ldrh	r5, [r3, #0]
 800602e:	4854      	ldr	r0, [pc, #336]	; (8006180 <_printf_i+0x244>)
 8006030:	2f6f      	cmp	r7, #111	; 0x6f
 8006032:	bf0c      	ite	eq
 8006034:	2308      	moveq	r3, #8
 8006036:	230a      	movne	r3, #10
 8006038:	2100      	movs	r1, #0
 800603a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800603e:	6866      	ldr	r6, [r4, #4]
 8006040:	60a6      	str	r6, [r4, #8]
 8006042:	2e00      	cmp	r6, #0
 8006044:	bfa2      	ittt	ge
 8006046:	6821      	ldrge	r1, [r4, #0]
 8006048:	f021 0104 	bicge.w	r1, r1, #4
 800604c:	6021      	strge	r1, [r4, #0]
 800604e:	b90d      	cbnz	r5, 8006054 <_printf_i+0x118>
 8006050:	2e00      	cmp	r6, #0
 8006052:	d04d      	beq.n	80060f0 <_printf_i+0x1b4>
 8006054:	4616      	mov	r6, r2
 8006056:	fbb5 f1f3 	udiv	r1, r5, r3
 800605a:	fb03 5711 	mls	r7, r3, r1, r5
 800605e:	5dc7      	ldrb	r7, [r0, r7]
 8006060:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006064:	462f      	mov	r7, r5
 8006066:	42bb      	cmp	r3, r7
 8006068:	460d      	mov	r5, r1
 800606a:	d9f4      	bls.n	8006056 <_printf_i+0x11a>
 800606c:	2b08      	cmp	r3, #8
 800606e:	d10b      	bne.n	8006088 <_printf_i+0x14c>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	07df      	lsls	r7, r3, #31
 8006074:	d508      	bpl.n	8006088 <_printf_i+0x14c>
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	6861      	ldr	r1, [r4, #4]
 800607a:	4299      	cmp	r1, r3
 800607c:	bfde      	ittt	le
 800607e:	2330      	movle	r3, #48	; 0x30
 8006080:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006084:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006088:	1b92      	subs	r2, r2, r6
 800608a:	6122      	str	r2, [r4, #16]
 800608c:	f8cd a000 	str.w	sl, [sp]
 8006090:	464b      	mov	r3, r9
 8006092:	aa03      	add	r2, sp, #12
 8006094:	4621      	mov	r1, r4
 8006096:	4640      	mov	r0, r8
 8006098:	f7ff fee2 	bl	8005e60 <_printf_common>
 800609c:	3001      	adds	r0, #1
 800609e:	d14c      	bne.n	800613a <_printf_i+0x1fe>
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	b004      	add	sp, #16
 80060a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060aa:	4835      	ldr	r0, [pc, #212]	; (8006180 <_printf_i+0x244>)
 80060ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	680e      	ldr	r6, [r1, #0]
 80060b4:	061f      	lsls	r7, r3, #24
 80060b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80060ba:	600e      	str	r6, [r1, #0]
 80060bc:	d514      	bpl.n	80060e8 <_printf_i+0x1ac>
 80060be:	07d9      	lsls	r1, r3, #31
 80060c0:	bf44      	itt	mi
 80060c2:	f043 0320 	orrmi.w	r3, r3, #32
 80060c6:	6023      	strmi	r3, [r4, #0]
 80060c8:	b91d      	cbnz	r5, 80060d2 <_printf_i+0x196>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	f023 0320 	bic.w	r3, r3, #32
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	2310      	movs	r3, #16
 80060d4:	e7b0      	b.n	8006038 <_printf_i+0xfc>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	f043 0320 	orr.w	r3, r3, #32
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	2378      	movs	r3, #120	; 0x78
 80060e0:	4828      	ldr	r0, [pc, #160]	; (8006184 <_printf_i+0x248>)
 80060e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060e6:	e7e3      	b.n	80060b0 <_printf_i+0x174>
 80060e8:	065e      	lsls	r6, r3, #25
 80060ea:	bf48      	it	mi
 80060ec:	b2ad      	uxthmi	r5, r5
 80060ee:	e7e6      	b.n	80060be <_printf_i+0x182>
 80060f0:	4616      	mov	r6, r2
 80060f2:	e7bb      	b.n	800606c <_printf_i+0x130>
 80060f4:	680b      	ldr	r3, [r1, #0]
 80060f6:	6826      	ldr	r6, [r4, #0]
 80060f8:	6960      	ldr	r0, [r4, #20]
 80060fa:	1d1d      	adds	r5, r3, #4
 80060fc:	600d      	str	r5, [r1, #0]
 80060fe:	0635      	lsls	r5, r6, #24
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	d501      	bpl.n	8006108 <_printf_i+0x1cc>
 8006104:	6018      	str	r0, [r3, #0]
 8006106:	e002      	b.n	800610e <_printf_i+0x1d2>
 8006108:	0671      	lsls	r1, r6, #25
 800610a:	d5fb      	bpl.n	8006104 <_printf_i+0x1c8>
 800610c:	8018      	strh	r0, [r3, #0]
 800610e:	2300      	movs	r3, #0
 8006110:	6123      	str	r3, [r4, #16]
 8006112:	4616      	mov	r6, r2
 8006114:	e7ba      	b.n	800608c <_printf_i+0x150>
 8006116:	680b      	ldr	r3, [r1, #0]
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	600a      	str	r2, [r1, #0]
 800611c:	681e      	ldr	r6, [r3, #0]
 800611e:	6862      	ldr	r2, [r4, #4]
 8006120:	2100      	movs	r1, #0
 8006122:	4630      	mov	r0, r6
 8006124:	f7fa f85c 	bl	80001e0 <memchr>
 8006128:	b108      	cbz	r0, 800612e <_printf_i+0x1f2>
 800612a:	1b80      	subs	r0, r0, r6
 800612c:	6060      	str	r0, [r4, #4]
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	6123      	str	r3, [r4, #16]
 8006132:	2300      	movs	r3, #0
 8006134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006138:	e7a8      	b.n	800608c <_printf_i+0x150>
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	4632      	mov	r2, r6
 800613e:	4649      	mov	r1, r9
 8006140:	4640      	mov	r0, r8
 8006142:	47d0      	blx	sl
 8006144:	3001      	adds	r0, #1
 8006146:	d0ab      	beq.n	80060a0 <_printf_i+0x164>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	079b      	lsls	r3, r3, #30
 800614c:	d413      	bmi.n	8006176 <_printf_i+0x23a>
 800614e:	68e0      	ldr	r0, [r4, #12]
 8006150:	9b03      	ldr	r3, [sp, #12]
 8006152:	4298      	cmp	r0, r3
 8006154:	bfb8      	it	lt
 8006156:	4618      	movlt	r0, r3
 8006158:	e7a4      	b.n	80060a4 <_printf_i+0x168>
 800615a:	2301      	movs	r3, #1
 800615c:	4632      	mov	r2, r6
 800615e:	4649      	mov	r1, r9
 8006160:	4640      	mov	r0, r8
 8006162:	47d0      	blx	sl
 8006164:	3001      	adds	r0, #1
 8006166:	d09b      	beq.n	80060a0 <_printf_i+0x164>
 8006168:	3501      	adds	r5, #1
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	9903      	ldr	r1, [sp, #12]
 800616e:	1a5b      	subs	r3, r3, r1
 8006170:	42ab      	cmp	r3, r5
 8006172:	dcf2      	bgt.n	800615a <_printf_i+0x21e>
 8006174:	e7eb      	b.n	800614e <_printf_i+0x212>
 8006176:	2500      	movs	r5, #0
 8006178:	f104 0619 	add.w	r6, r4, #25
 800617c:	e7f5      	b.n	800616a <_printf_i+0x22e>
 800617e:	bf00      	nop
 8006180:	08008e92 	.word	0x08008e92
 8006184:	08008ea3 	.word	0x08008ea3

08006188 <siprintf>:
 8006188:	b40e      	push	{r1, r2, r3}
 800618a:	b500      	push	{lr}
 800618c:	b09c      	sub	sp, #112	; 0x70
 800618e:	ab1d      	add	r3, sp, #116	; 0x74
 8006190:	9002      	str	r0, [sp, #8]
 8006192:	9006      	str	r0, [sp, #24]
 8006194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006198:	4809      	ldr	r0, [pc, #36]	; (80061c0 <siprintf+0x38>)
 800619a:	9107      	str	r1, [sp, #28]
 800619c:	9104      	str	r1, [sp, #16]
 800619e:	4909      	ldr	r1, [pc, #36]	; (80061c4 <siprintf+0x3c>)
 80061a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a4:	9105      	str	r1, [sp, #20]
 80061a6:	6800      	ldr	r0, [r0, #0]
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	a902      	add	r1, sp, #8
 80061ac:	f001 fb32 	bl	8007814 <_svfiprintf_r>
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	b01c      	add	sp, #112	; 0x70
 80061b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061bc:	b003      	add	sp, #12
 80061be:	4770      	bx	lr
 80061c0:	2000001c 	.word	0x2000001c
 80061c4:	ffff0208 	.word	0xffff0208

080061c8 <quorem>:
 80061c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	6903      	ldr	r3, [r0, #16]
 80061ce:	690c      	ldr	r4, [r1, #16]
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	4607      	mov	r7, r0
 80061d4:	f2c0 8081 	blt.w	80062da <quorem+0x112>
 80061d8:	3c01      	subs	r4, #1
 80061da:	f101 0814 	add.w	r8, r1, #20
 80061de:	f100 0514 	add.w	r5, r0, #20
 80061e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061f0:	3301      	adds	r3, #1
 80061f2:	429a      	cmp	r2, r3
 80061f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006200:	d331      	bcc.n	8006266 <quorem+0x9e>
 8006202:	f04f 0e00 	mov.w	lr, #0
 8006206:	4640      	mov	r0, r8
 8006208:	46ac      	mov	ip, r5
 800620a:	46f2      	mov	sl, lr
 800620c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006210:	b293      	uxth	r3, r2
 8006212:	fb06 e303 	mla	r3, r6, r3, lr
 8006216:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800621a:	b29b      	uxth	r3, r3
 800621c:	ebaa 0303 	sub.w	r3, sl, r3
 8006220:	0c12      	lsrs	r2, r2, #16
 8006222:	f8dc a000 	ldr.w	sl, [ip]
 8006226:	fb06 e202 	mla	r2, r6, r2, lr
 800622a:	fa13 f38a 	uxtah	r3, r3, sl
 800622e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006232:	fa1f fa82 	uxth.w	sl, r2
 8006236:	f8dc 2000 	ldr.w	r2, [ip]
 800623a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800623e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006242:	b29b      	uxth	r3, r3
 8006244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006248:	4581      	cmp	r9, r0
 800624a:	f84c 3b04 	str.w	r3, [ip], #4
 800624e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006252:	d2db      	bcs.n	800620c <quorem+0x44>
 8006254:	f855 300b 	ldr.w	r3, [r5, fp]
 8006258:	b92b      	cbnz	r3, 8006266 <quorem+0x9e>
 800625a:	9b01      	ldr	r3, [sp, #4]
 800625c:	3b04      	subs	r3, #4
 800625e:	429d      	cmp	r5, r3
 8006260:	461a      	mov	r2, r3
 8006262:	d32e      	bcc.n	80062c2 <quorem+0xfa>
 8006264:	613c      	str	r4, [r7, #16]
 8006266:	4638      	mov	r0, r7
 8006268:	f001 f8be 	bl	80073e8 <__mcmp>
 800626c:	2800      	cmp	r0, #0
 800626e:	db24      	blt.n	80062ba <quorem+0xf2>
 8006270:	3601      	adds	r6, #1
 8006272:	4628      	mov	r0, r5
 8006274:	f04f 0c00 	mov.w	ip, #0
 8006278:	f858 2b04 	ldr.w	r2, [r8], #4
 800627c:	f8d0 e000 	ldr.w	lr, [r0]
 8006280:	b293      	uxth	r3, r2
 8006282:	ebac 0303 	sub.w	r3, ip, r3
 8006286:	0c12      	lsrs	r2, r2, #16
 8006288:	fa13 f38e 	uxtah	r3, r3, lr
 800628c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006290:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006294:	b29b      	uxth	r3, r3
 8006296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800629a:	45c1      	cmp	r9, r8
 800629c:	f840 3b04 	str.w	r3, [r0], #4
 80062a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062a4:	d2e8      	bcs.n	8006278 <quorem+0xb0>
 80062a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062ae:	b922      	cbnz	r2, 80062ba <quorem+0xf2>
 80062b0:	3b04      	subs	r3, #4
 80062b2:	429d      	cmp	r5, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	d30a      	bcc.n	80062ce <quorem+0x106>
 80062b8:	613c      	str	r4, [r7, #16]
 80062ba:	4630      	mov	r0, r6
 80062bc:	b003      	add	sp, #12
 80062be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	3b04      	subs	r3, #4
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d1cc      	bne.n	8006264 <quorem+0x9c>
 80062ca:	3c01      	subs	r4, #1
 80062cc:	e7c7      	b.n	800625e <quorem+0x96>
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	3b04      	subs	r3, #4
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	d1f0      	bne.n	80062b8 <quorem+0xf0>
 80062d6:	3c01      	subs	r4, #1
 80062d8:	e7eb      	b.n	80062b2 <quorem+0xea>
 80062da:	2000      	movs	r0, #0
 80062dc:	e7ee      	b.n	80062bc <quorem+0xf4>
	...

080062e0 <_dtoa_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	ed2d 8b02 	vpush	{d8}
 80062e8:	ec57 6b10 	vmov	r6, r7, d0
 80062ec:	b095      	sub	sp, #84	; 0x54
 80062ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062f4:	9105      	str	r1, [sp, #20]
 80062f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80062fa:	4604      	mov	r4, r0
 80062fc:	9209      	str	r2, [sp, #36]	; 0x24
 80062fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006300:	b975      	cbnz	r5, 8006320 <_dtoa_r+0x40>
 8006302:	2010      	movs	r0, #16
 8006304:	f000 fddc 	bl	8006ec0 <malloc>
 8006308:	4602      	mov	r2, r0
 800630a:	6260      	str	r0, [r4, #36]	; 0x24
 800630c:	b920      	cbnz	r0, 8006318 <_dtoa_r+0x38>
 800630e:	4bb2      	ldr	r3, [pc, #712]	; (80065d8 <_dtoa_r+0x2f8>)
 8006310:	21ea      	movs	r1, #234	; 0xea
 8006312:	48b2      	ldr	r0, [pc, #712]	; (80065dc <_dtoa_r+0x2fc>)
 8006314:	f001 fb8e 	bl	8007a34 <__assert_func>
 8006318:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800631c:	6005      	str	r5, [r0, #0]
 800631e:	60c5      	str	r5, [r0, #12]
 8006320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006322:	6819      	ldr	r1, [r3, #0]
 8006324:	b151      	cbz	r1, 800633c <_dtoa_r+0x5c>
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	604a      	str	r2, [r1, #4]
 800632a:	2301      	movs	r3, #1
 800632c:	4093      	lsls	r3, r2
 800632e:	608b      	str	r3, [r1, #8]
 8006330:	4620      	mov	r0, r4
 8006332:	f000 fe1b 	bl	8006f6c <_Bfree>
 8006336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	1e3b      	subs	r3, r7, #0
 800633e:	bfb9      	ittee	lt
 8006340:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006344:	9303      	strlt	r3, [sp, #12]
 8006346:	2300      	movge	r3, #0
 8006348:	f8c8 3000 	strge.w	r3, [r8]
 800634c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006350:	4ba3      	ldr	r3, [pc, #652]	; (80065e0 <_dtoa_r+0x300>)
 8006352:	bfbc      	itt	lt
 8006354:	2201      	movlt	r2, #1
 8006356:	f8c8 2000 	strlt.w	r2, [r8]
 800635a:	ea33 0309 	bics.w	r3, r3, r9
 800635e:	d11b      	bne.n	8006398 <_dtoa_r+0xb8>
 8006360:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006362:	f242 730f 	movw	r3, #9999	; 0x270f
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800636c:	4333      	orrs	r3, r6
 800636e:	f000 857a 	beq.w	8006e66 <_dtoa_r+0xb86>
 8006372:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006374:	b963      	cbnz	r3, 8006390 <_dtoa_r+0xb0>
 8006376:	4b9b      	ldr	r3, [pc, #620]	; (80065e4 <_dtoa_r+0x304>)
 8006378:	e024      	b.n	80063c4 <_dtoa_r+0xe4>
 800637a:	4b9b      	ldr	r3, [pc, #620]	; (80065e8 <_dtoa_r+0x308>)
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	9800      	ldr	r0, [sp, #0]
 8006386:	b015      	add	sp, #84	; 0x54
 8006388:	ecbd 8b02 	vpop	{d8}
 800638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006390:	4b94      	ldr	r3, [pc, #592]	; (80065e4 <_dtoa_r+0x304>)
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	3303      	adds	r3, #3
 8006396:	e7f3      	b.n	8006380 <_dtoa_r+0xa0>
 8006398:	ed9d 7b02 	vldr	d7, [sp, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	ec51 0b17 	vmov	r0, r1, d7
 80063a2:	2300      	movs	r3, #0
 80063a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80063a8:	f7fa fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80063ac:	4680      	mov	r8, r0
 80063ae:	b158      	cbz	r0, 80063c8 <_dtoa_r+0xe8>
 80063b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063b2:	2301      	movs	r3, #1
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8551 	beq.w	8006e60 <_dtoa_r+0xb80>
 80063be:	488b      	ldr	r0, [pc, #556]	; (80065ec <_dtoa_r+0x30c>)
 80063c0:	6018      	str	r0, [r3, #0]
 80063c2:	1e43      	subs	r3, r0, #1
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	e7dd      	b.n	8006384 <_dtoa_r+0xa4>
 80063c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80063cc:	aa12      	add	r2, sp, #72	; 0x48
 80063ce:	a913      	add	r1, sp, #76	; 0x4c
 80063d0:	4620      	mov	r0, r4
 80063d2:	f001 f8ad 	bl	8007530 <__d2b>
 80063d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063da:	4683      	mov	fp, r0
 80063dc:	2d00      	cmp	r5, #0
 80063de:	d07c      	beq.n	80064da <_dtoa_r+0x1fa>
 80063e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80063e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80063ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80063f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80063f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063fa:	4b7d      	ldr	r3, [pc, #500]	; (80065f0 <_dtoa_r+0x310>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	4630      	mov	r0, r6
 8006400:	4639      	mov	r1, r7
 8006402:	f7f9 ff41 	bl	8000288 <__aeabi_dsub>
 8006406:	a36e      	add	r3, pc, #440	; (adr r3, 80065c0 <_dtoa_r+0x2e0>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7fa f8f4 	bl	80005f8 <__aeabi_dmul>
 8006410:	a36d      	add	r3, pc, #436	; (adr r3, 80065c8 <_dtoa_r+0x2e8>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f7f9 ff39 	bl	800028c <__adddf3>
 800641a:	4606      	mov	r6, r0
 800641c:	4628      	mov	r0, r5
 800641e:	460f      	mov	r7, r1
 8006420:	f7fa f880 	bl	8000524 <__aeabi_i2d>
 8006424:	a36a      	add	r3, pc, #424	; (adr r3, 80065d0 <_dtoa_r+0x2f0>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f7fa f8e5 	bl	80005f8 <__aeabi_dmul>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4630      	mov	r0, r6
 8006434:	4639      	mov	r1, r7
 8006436:	f7f9 ff29 	bl	800028c <__adddf3>
 800643a:	4606      	mov	r6, r0
 800643c:	460f      	mov	r7, r1
 800643e:	f7fa fb8b 	bl	8000b58 <__aeabi_d2iz>
 8006442:	2200      	movs	r2, #0
 8006444:	4682      	mov	sl, r0
 8006446:	2300      	movs	r3, #0
 8006448:	4630      	mov	r0, r6
 800644a:	4639      	mov	r1, r7
 800644c:	f7fa fb46 	bl	8000adc <__aeabi_dcmplt>
 8006450:	b148      	cbz	r0, 8006466 <_dtoa_r+0x186>
 8006452:	4650      	mov	r0, sl
 8006454:	f7fa f866 	bl	8000524 <__aeabi_i2d>
 8006458:	4632      	mov	r2, r6
 800645a:	463b      	mov	r3, r7
 800645c:	f7fa fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 8006460:	b908      	cbnz	r0, 8006466 <_dtoa_r+0x186>
 8006462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006466:	f1ba 0f16 	cmp.w	sl, #22
 800646a:	d854      	bhi.n	8006516 <_dtoa_r+0x236>
 800646c:	4b61      	ldr	r3, [pc, #388]	; (80065f4 <_dtoa_r+0x314>)
 800646e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800647a:	f7fa fb2f 	bl	8000adc <__aeabi_dcmplt>
 800647e:	2800      	cmp	r0, #0
 8006480:	d04b      	beq.n	800651a <_dtoa_r+0x23a>
 8006482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006486:	2300      	movs	r3, #0
 8006488:	930e      	str	r3, [sp, #56]	; 0x38
 800648a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800648c:	1b5d      	subs	r5, r3, r5
 800648e:	1e6b      	subs	r3, r5, #1
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	bf43      	ittte	mi
 8006494:	2300      	movmi	r3, #0
 8006496:	f1c5 0801 	rsbmi	r8, r5, #1
 800649a:	9304      	strmi	r3, [sp, #16]
 800649c:	f04f 0800 	movpl.w	r8, #0
 80064a0:	f1ba 0f00 	cmp.w	sl, #0
 80064a4:	db3b      	blt.n	800651e <_dtoa_r+0x23e>
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80064ac:	4453      	add	r3, sl
 80064ae:	9304      	str	r3, [sp, #16]
 80064b0:	2300      	movs	r3, #0
 80064b2:	9306      	str	r3, [sp, #24]
 80064b4:	9b05      	ldr	r3, [sp, #20]
 80064b6:	2b09      	cmp	r3, #9
 80064b8:	d869      	bhi.n	800658e <_dtoa_r+0x2ae>
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	bfc4      	itt	gt
 80064be:	3b04      	subgt	r3, #4
 80064c0:	9305      	strgt	r3, [sp, #20]
 80064c2:	9b05      	ldr	r3, [sp, #20]
 80064c4:	f1a3 0302 	sub.w	r3, r3, #2
 80064c8:	bfcc      	ite	gt
 80064ca:	2500      	movgt	r5, #0
 80064cc:	2501      	movle	r5, #1
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d869      	bhi.n	80065a6 <_dtoa_r+0x2c6>
 80064d2:	e8df f003 	tbb	[pc, r3]
 80064d6:	4e2c      	.short	0x4e2c
 80064d8:	5a4c      	.short	0x5a4c
 80064da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80064de:	441d      	add	r5, r3
 80064e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	bfc1      	itttt	gt
 80064e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80064f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80064f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064f8:	bfda      	itte	le
 80064fa:	f1c3 0320 	rsble	r3, r3, #32
 80064fe:	fa06 f003 	lslle.w	r0, r6, r3
 8006502:	4318      	orrgt	r0, r3
 8006504:	f7f9 fffe 	bl	8000504 <__aeabi_ui2d>
 8006508:	2301      	movs	r3, #1
 800650a:	4606      	mov	r6, r0
 800650c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006510:	3d01      	subs	r5, #1
 8006512:	9310      	str	r3, [sp, #64]	; 0x40
 8006514:	e771      	b.n	80063fa <_dtoa_r+0x11a>
 8006516:	2301      	movs	r3, #1
 8006518:	e7b6      	b.n	8006488 <_dtoa_r+0x1a8>
 800651a:	900e      	str	r0, [sp, #56]	; 0x38
 800651c:	e7b5      	b.n	800648a <_dtoa_r+0x1aa>
 800651e:	f1ca 0300 	rsb	r3, sl, #0
 8006522:	9306      	str	r3, [sp, #24]
 8006524:	2300      	movs	r3, #0
 8006526:	eba8 080a 	sub.w	r8, r8, sl
 800652a:	930d      	str	r3, [sp, #52]	; 0x34
 800652c:	e7c2      	b.n	80064b4 <_dtoa_r+0x1d4>
 800652e:	2300      	movs	r3, #0
 8006530:	9308      	str	r3, [sp, #32]
 8006532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006534:	2b00      	cmp	r3, #0
 8006536:	dc39      	bgt.n	80065ac <_dtoa_r+0x2cc>
 8006538:	f04f 0901 	mov.w	r9, #1
 800653c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006540:	464b      	mov	r3, r9
 8006542:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006546:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006548:	2200      	movs	r2, #0
 800654a:	6042      	str	r2, [r0, #4]
 800654c:	2204      	movs	r2, #4
 800654e:	f102 0614 	add.w	r6, r2, #20
 8006552:	429e      	cmp	r6, r3
 8006554:	6841      	ldr	r1, [r0, #4]
 8006556:	d92f      	bls.n	80065b8 <_dtoa_r+0x2d8>
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fcc7 	bl	8006eec <_Balloc>
 800655e:	9000      	str	r0, [sp, #0]
 8006560:	2800      	cmp	r0, #0
 8006562:	d14b      	bne.n	80065fc <_dtoa_r+0x31c>
 8006564:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <_dtoa_r+0x318>)
 8006566:	4602      	mov	r2, r0
 8006568:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800656c:	e6d1      	b.n	8006312 <_dtoa_r+0x32>
 800656e:	2301      	movs	r3, #1
 8006570:	e7de      	b.n	8006530 <_dtoa_r+0x250>
 8006572:	2300      	movs	r3, #0
 8006574:	9308      	str	r3, [sp, #32]
 8006576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006578:	eb0a 0903 	add.w	r9, sl, r3
 800657c:	f109 0301 	add.w	r3, r9, #1
 8006580:	2b01      	cmp	r3, #1
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	bfb8      	it	lt
 8006586:	2301      	movlt	r3, #1
 8006588:	e7dd      	b.n	8006546 <_dtoa_r+0x266>
 800658a:	2301      	movs	r3, #1
 800658c:	e7f2      	b.n	8006574 <_dtoa_r+0x294>
 800658e:	2501      	movs	r5, #1
 8006590:	2300      	movs	r3, #0
 8006592:	9305      	str	r3, [sp, #20]
 8006594:	9508      	str	r5, [sp, #32]
 8006596:	f04f 39ff 	mov.w	r9, #4294967295
 800659a:	2200      	movs	r2, #0
 800659c:	f8cd 9004 	str.w	r9, [sp, #4]
 80065a0:	2312      	movs	r3, #18
 80065a2:	9209      	str	r2, [sp, #36]	; 0x24
 80065a4:	e7cf      	b.n	8006546 <_dtoa_r+0x266>
 80065a6:	2301      	movs	r3, #1
 80065a8:	9308      	str	r3, [sp, #32]
 80065aa:	e7f4      	b.n	8006596 <_dtoa_r+0x2b6>
 80065ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80065b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80065b4:	464b      	mov	r3, r9
 80065b6:	e7c6      	b.n	8006546 <_dtoa_r+0x266>
 80065b8:	3101      	adds	r1, #1
 80065ba:	6041      	str	r1, [r0, #4]
 80065bc:	0052      	lsls	r2, r2, #1
 80065be:	e7c6      	b.n	800654e <_dtoa_r+0x26e>
 80065c0:	636f4361 	.word	0x636f4361
 80065c4:	3fd287a7 	.word	0x3fd287a7
 80065c8:	8b60c8b3 	.word	0x8b60c8b3
 80065cc:	3fc68a28 	.word	0x3fc68a28
 80065d0:	509f79fb 	.word	0x509f79fb
 80065d4:	3fd34413 	.word	0x3fd34413
 80065d8:	08008ec1 	.word	0x08008ec1
 80065dc:	08008ed8 	.word	0x08008ed8
 80065e0:	7ff00000 	.word	0x7ff00000
 80065e4:	08008ebd 	.word	0x08008ebd
 80065e8:	08008eb4 	.word	0x08008eb4
 80065ec:	08008e91 	.word	0x08008e91
 80065f0:	3ff80000 	.word	0x3ff80000
 80065f4:	08008fd0 	.word	0x08008fd0
 80065f8:	08008f37 	.word	0x08008f37
 80065fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065fe:	9a00      	ldr	r2, [sp, #0]
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	9b01      	ldr	r3, [sp, #4]
 8006604:	2b0e      	cmp	r3, #14
 8006606:	f200 80ad 	bhi.w	8006764 <_dtoa_r+0x484>
 800660a:	2d00      	cmp	r5, #0
 800660c:	f000 80aa 	beq.w	8006764 <_dtoa_r+0x484>
 8006610:	f1ba 0f00 	cmp.w	sl, #0
 8006614:	dd36      	ble.n	8006684 <_dtoa_r+0x3a4>
 8006616:	4ac3      	ldr	r2, [pc, #780]	; (8006924 <_dtoa_r+0x644>)
 8006618:	f00a 030f 	and.w	r3, sl, #15
 800661c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006620:	ed93 7b00 	vldr	d7, [r3]
 8006624:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006628:	ea4f 172a 	mov.w	r7, sl, asr #4
 800662c:	eeb0 8a47 	vmov.f32	s16, s14
 8006630:	eef0 8a67 	vmov.f32	s17, s15
 8006634:	d016      	beq.n	8006664 <_dtoa_r+0x384>
 8006636:	4bbc      	ldr	r3, [pc, #752]	; (8006928 <_dtoa_r+0x648>)
 8006638:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800663c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006640:	f7fa f904 	bl	800084c <__aeabi_ddiv>
 8006644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006648:	f007 070f 	and.w	r7, r7, #15
 800664c:	2503      	movs	r5, #3
 800664e:	4eb6      	ldr	r6, [pc, #728]	; (8006928 <_dtoa_r+0x648>)
 8006650:	b957      	cbnz	r7, 8006668 <_dtoa_r+0x388>
 8006652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006656:	ec53 2b18 	vmov	r2, r3, d8
 800665a:	f7fa f8f7 	bl	800084c <__aeabi_ddiv>
 800665e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006662:	e029      	b.n	80066b8 <_dtoa_r+0x3d8>
 8006664:	2502      	movs	r5, #2
 8006666:	e7f2      	b.n	800664e <_dtoa_r+0x36e>
 8006668:	07f9      	lsls	r1, r7, #31
 800666a:	d508      	bpl.n	800667e <_dtoa_r+0x39e>
 800666c:	ec51 0b18 	vmov	r0, r1, d8
 8006670:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006674:	f7f9 ffc0 	bl	80005f8 <__aeabi_dmul>
 8006678:	ec41 0b18 	vmov	d8, r0, r1
 800667c:	3501      	adds	r5, #1
 800667e:	107f      	asrs	r7, r7, #1
 8006680:	3608      	adds	r6, #8
 8006682:	e7e5      	b.n	8006650 <_dtoa_r+0x370>
 8006684:	f000 80a6 	beq.w	80067d4 <_dtoa_r+0x4f4>
 8006688:	f1ca 0600 	rsb	r6, sl, #0
 800668c:	4ba5      	ldr	r3, [pc, #660]	; (8006924 <_dtoa_r+0x644>)
 800668e:	4fa6      	ldr	r7, [pc, #664]	; (8006928 <_dtoa_r+0x648>)
 8006690:	f006 020f 	and.w	r2, r6, #15
 8006694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066a0:	f7f9 ffaa 	bl	80005f8 <__aeabi_dmul>
 80066a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a8:	1136      	asrs	r6, r6, #4
 80066aa:	2300      	movs	r3, #0
 80066ac:	2502      	movs	r5, #2
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	f040 8085 	bne.w	80067be <_dtoa_r+0x4de>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1d2      	bne.n	800665e <_dtoa_r+0x37e>
 80066b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 808c 	beq.w	80067d8 <_dtoa_r+0x4f8>
 80066c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066c4:	4b99      	ldr	r3, [pc, #612]	; (800692c <_dtoa_r+0x64c>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	4630      	mov	r0, r6
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7fa fa06 	bl	8000adc <__aeabi_dcmplt>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f000 8081 	beq.w	80067d8 <_dtoa_r+0x4f8>
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d07d      	beq.n	80067d8 <_dtoa_r+0x4f8>
 80066dc:	f1b9 0f00 	cmp.w	r9, #0
 80066e0:	dd3c      	ble.n	800675c <_dtoa_r+0x47c>
 80066e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80066e6:	9307      	str	r3, [sp, #28]
 80066e8:	2200      	movs	r2, #0
 80066ea:	4b91      	ldr	r3, [pc, #580]	; (8006930 <_dtoa_r+0x650>)
 80066ec:	4630      	mov	r0, r6
 80066ee:	4639      	mov	r1, r7
 80066f0:	f7f9 ff82 	bl	80005f8 <__aeabi_dmul>
 80066f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066f8:	3501      	adds	r5, #1
 80066fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80066fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006702:	4628      	mov	r0, r5
 8006704:	f7f9 ff0e 	bl	8000524 <__aeabi_i2d>
 8006708:	4632      	mov	r2, r6
 800670a:	463b      	mov	r3, r7
 800670c:	f7f9 ff74 	bl	80005f8 <__aeabi_dmul>
 8006710:	4b88      	ldr	r3, [pc, #544]	; (8006934 <_dtoa_r+0x654>)
 8006712:	2200      	movs	r2, #0
 8006714:	f7f9 fdba 	bl	800028c <__adddf3>
 8006718:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800671c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006720:	9303      	str	r3, [sp, #12]
 8006722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006724:	2b00      	cmp	r3, #0
 8006726:	d15c      	bne.n	80067e2 <_dtoa_r+0x502>
 8006728:	4b83      	ldr	r3, [pc, #524]	; (8006938 <_dtoa_r+0x658>)
 800672a:	2200      	movs	r2, #0
 800672c:	4630      	mov	r0, r6
 800672e:	4639      	mov	r1, r7
 8006730:	f7f9 fdaa 	bl	8000288 <__aeabi_dsub>
 8006734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006738:	4606      	mov	r6, r0
 800673a:	460f      	mov	r7, r1
 800673c:	f7fa f9ec 	bl	8000b18 <__aeabi_dcmpgt>
 8006740:	2800      	cmp	r0, #0
 8006742:	f040 8296 	bne.w	8006c72 <_dtoa_r+0x992>
 8006746:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800674a:	4630      	mov	r0, r6
 800674c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006750:	4639      	mov	r1, r7
 8006752:	f7fa f9c3 	bl	8000adc <__aeabi_dcmplt>
 8006756:	2800      	cmp	r0, #0
 8006758:	f040 8288 	bne.w	8006c6c <_dtoa_r+0x98c>
 800675c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006760:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006764:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006766:	2b00      	cmp	r3, #0
 8006768:	f2c0 8158 	blt.w	8006a1c <_dtoa_r+0x73c>
 800676c:	f1ba 0f0e 	cmp.w	sl, #14
 8006770:	f300 8154 	bgt.w	8006a1c <_dtoa_r+0x73c>
 8006774:	4b6b      	ldr	r3, [pc, #428]	; (8006924 <_dtoa_r+0x644>)
 8006776:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800677a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800677e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	f280 80e3 	bge.w	800694c <_dtoa_r+0x66c>
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f300 80df 	bgt.w	800694c <_dtoa_r+0x66c>
 800678e:	f040 826d 	bne.w	8006c6c <_dtoa_r+0x98c>
 8006792:	4b69      	ldr	r3, [pc, #420]	; (8006938 <_dtoa_r+0x658>)
 8006794:	2200      	movs	r2, #0
 8006796:	4640      	mov	r0, r8
 8006798:	4649      	mov	r1, r9
 800679a:	f7f9 ff2d 	bl	80005f8 <__aeabi_dmul>
 800679e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067a2:	f7fa f9af 	bl	8000b04 <__aeabi_dcmpge>
 80067a6:	9e01      	ldr	r6, [sp, #4]
 80067a8:	4637      	mov	r7, r6
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f040 8243 	bne.w	8006c36 <_dtoa_r+0x956>
 80067b0:	9d00      	ldr	r5, [sp, #0]
 80067b2:	2331      	movs	r3, #49	; 0x31
 80067b4:	f805 3b01 	strb.w	r3, [r5], #1
 80067b8:	f10a 0a01 	add.w	sl, sl, #1
 80067bc:	e23f      	b.n	8006c3e <_dtoa_r+0x95e>
 80067be:	07f2      	lsls	r2, r6, #31
 80067c0:	d505      	bpl.n	80067ce <_dtoa_r+0x4ee>
 80067c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067c6:	f7f9 ff17 	bl	80005f8 <__aeabi_dmul>
 80067ca:	3501      	adds	r5, #1
 80067cc:	2301      	movs	r3, #1
 80067ce:	1076      	asrs	r6, r6, #1
 80067d0:	3708      	adds	r7, #8
 80067d2:	e76c      	b.n	80066ae <_dtoa_r+0x3ce>
 80067d4:	2502      	movs	r5, #2
 80067d6:	e76f      	b.n	80066b8 <_dtoa_r+0x3d8>
 80067d8:	9b01      	ldr	r3, [sp, #4]
 80067da:	f8cd a01c 	str.w	sl, [sp, #28]
 80067de:	930c      	str	r3, [sp, #48]	; 0x30
 80067e0:	e78d      	b.n	80066fe <_dtoa_r+0x41e>
 80067e2:	9900      	ldr	r1, [sp, #0]
 80067e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80067e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067e8:	4b4e      	ldr	r3, [pc, #312]	; (8006924 <_dtoa_r+0x644>)
 80067ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067ee:	4401      	add	r1, r0
 80067f0:	9102      	str	r1, [sp, #8]
 80067f2:	9908      	ldr	r1, [sp, #32]
 80067f4:	eeb0 8a47 	vmov.f32	s16, s14
 80067f8:	eef0 8a67 	vmov.f32	s17, s15
 80067fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006800:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006804:	2900      	cmp	r1, #0
 8006806:	d045      	beq.n	8006894 <_dtoa_r+0x5b4>
 8006808:	494c      	ldr	r1, [pc, #304]	; (800693c <_dtoa_r+0x65c>)
 800680a:	2000      	movs	r0, #0
 800680c:	f7fa f81e 	bl	800084c <__aeabi_ddiv>
 8006810:	ec53 2b18 	vmov	r2, r3, d8
 8006814:	f7f9 fd38 	bl	8000288 <__aeabi_dsub>
 8006818:	9d00      	ldr	r5, [sp, #0]
 800681a:	ec41 0b18 	vmov	d8, r0, r1
 800681e:	4639      	mov	r1, r7
 8006820:	4630      	mov	r0, r6
 8006822:	f7fa f999 	bl	8000b58 <__aeabi_d2iz>
 8006826:	900c      	str	r0, [sp, #48]	; 0x30
 8006828:	f7f9 fe7c 	bl	8000524 <__aeabi_i2d>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7f9 fd28 	bl	8000288 <__aeabi_dsub>
 8006838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800683a:	3330      	adds	r3, #48	; 0x30
 800683c:	f805 3b01 	strb.w	r3, [r5], #1
 8006840:	ec53 2b18 	vmov	r2, r3, d8
 8006844:	4606      	mov	r6, r0
 8006846:	460f      	mov	r7, r1
 8006848:	f7fa f948 	bl	8000adc <__aeabi_dcmplt>
 800684c:	2800      	cmp	r0, #0
 800684e:	d165      	bne.n	800691c <_dtoa_r+0x63c>
 8006850:	4632      	mov	r2, r6
 8006852:	463b      	mov	r3, r7
 8006854:	4935      	ldr	r1, [pc, #212]	; (800692c <_dtoa_r+0x64c>)
 8006856:	2000      	movs	r0, #0
 8006858:	f7f9 fd16 	bl	8000288 <__aeabi_dsub>
 800685c:	ec53 2b18 	vmov	r2, r3, d8
 8006860:	f7fa f93c 	bl	8000adc <__aeabi_dcmplt>
 8006864:	2800      	cmp	r0, #0
 8006866:	f040 80b9 	bne.w	80069dc <_dtoa_r+0x6fc>
 800686a:	9b02      	ldr	r3, [sp, #8]
 800686c:	429d      	cmp	r5, r3
 800686e:	f43f af75 	beq.w	800675c <_dtoa_r+0x47c>
 8006872:	4b2f      	ldr	r3, [pc, #188]	; (8006930 <_dtoa_r+0x650>)
 8006874:	ec51 0b18 	vmov	r0, r1, d8
 8006878:	2200      	movs	r2, #0
 800687a:	f7f9 febd 	bl	80005f8 <__aeabi_dmul>
 800687e:	4b2c      	ldr	r3, [pc, #176]	; (8006930 <_dtoa_r+0x650>)
 8006880:	ec41 0b18 	vmov	d8, r0, r1
 8006884:	2200      	movs	r2, #0
 8006886:	4630      	mov	r0, r6
 8006888:	4639      	mov	r1, r7
 800688a:	f7f9 feb5 	bl	80005f8 <__aeabi_dmul>
 800688e:	4606      	mov	r6, r0
 8006890:	460f      	mov	r7, r1
 8006892:	e7c4      	b.n	800681e <_dtoa_r+0x53e>
 8006894:	ec51 0b17 	vmov	r0, r1, d7
 8006898:	f7f9 feae 	bl	80005f8 <__aeabi_dmul>
 800689c:	9b02      	ldr	r3, [sp, #8]
 800689e:	9d00      	ldr	r5, [sp, #0]
 80068a0:	930c      	str	r3, [sp, #48]	; 0x30
 80068a2:	ec41 0b18 	vmov	d8, r0, r1
 80068a6:	4639      	mov	r1, r7
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7fa f955 	bl	8000b58 <__aeabi_d2iz>
 80068ae:	9011      	str	r0, [sp, #68]	; 0x44
 80068b0:	f7f9 fe38 	bl	8000524 <__aeabi_i2d>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7f9 fce4 	bl	8000288 <__aeabi_dsub>
 80068c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068c2:	3330      	adds	r3, #48	; 0x30
 80068c4:	f805 3b01 	strb.w	r3, [r5], #1
 80068c8:	9b02      	ldr	r3, [sp, #8]
 80068ca:	429d      	cmp	r5, r3
 80068cc:	4606      	mov	r6, r0
 80068ce:	460f      	mov	r7, r1
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	d134      	bne.n	8006940 <_dtoa_r+0x660>
 80068d6:	4b19      	ldr	r3, [pc, #100]	; (800693c <_dtoa_r+0x65c>)
 80068d8:	ec51 0b18 	vmov	r0, r1, d8
 80068dc:	f7f9 fcd6 	bl	800028c <__adddf3>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4630      	mov	r0, r6
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7fa f916 	bl	8000b18 <__aeabi_dcmpgt>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d175      	bne.n	80069dc <_dtoa_r+0x6fc>
 80068f0:	ec53 2b18 	vmov	r2, r3, d8
 80068f4:	4911      	ldr	r1, [pc, #68]	; (800693c <_dtoa_r+0x65c>)
 80068f6:	2000      	movs	r0, #0
 80068f8:	f7f9 fcc6 	bl	8000288 <__aeabi_dsub>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	f7fa f8ea 	bl	8000adc <__aeabi_dcmplt>
 8006908:	2800      	cmp	r0, #0
 800690a:	f43f af27 	beq.w	800675c <_dtoa_r+0x47c>
 800690e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006910:	1e6b      	subs	r3, r5, #1
 8006912:	930c      	str	r3, [sp, #48]	; 0x30
 8006914:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006918:	2b30      	cmp	r3, #48	; 0x30
 800691a:	d0f8      	beq.n	800690e <_dtoa_r+0x62e>
 800691c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006920:	e04a      	b.n	80069b8 <_dtoa_r+0x6d8>
 8006922:	bf00      	nop
 8006924:	08008fd0 	.word	0x08008fd0
 8006928:	08008fa8 	.word	0x08008fa8
 800692c:	3ff00000 	.word	0x3ff00000
 8006930:	40240000 	.word	0x40240000
 8006934:	401c0000 	.word	0x401c0000
 8006938:	40140000 	.word	0x40140000
 800693c:	3fe00000 	.word	0x3fe00000
 8006940:	4baf      	ldr	r3, [pc, #700]	; (8006c00 <_dtoa_r+0x920>)
 8006942:	f7f9 fe59 	bl	80005f8 <__aeabi_dmul>
 8006946:	4606      	mov	r6, r0
 8006948:	460f      	mov	r7, r1
 800694a:	e7ac      	b.n	80068a6 <_dtoa_r+0x5c6>
 800694c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006950:	9d00      	ldr	r5, [sp, #0]
 8006952:	4642      	mov	r2, r8
 8006954:	464b      	mov	r3, r9
 8006956:	4630      	mov	r0, r6
 8006958:	4639      	mov	r1, r7
 800695a:	f7f9 ff77 	bl	800084c <__aeabi_ddiv>
 800695e:	f7fa f8fb 	bl	8000b58 <__aeabi_d2iz>
 8006962:	9002      	str	r0, [sp, #8]
 8006964:	f7f9 fdde 	bl	8000524 <__aeabi_i2d>
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	f7f9 fe44 	bl	80005f8 <__aeabi_dmul>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4630      	mov	r0, r6
 8006976:	4639      	mov	r1, r7
 8006978:	f7f9 fc86 	bl	8000288 <__aeabi_dsub>
 800697c:	9e02      	ldr	r6, [sp, #8]
 800697e:	9f01      	ldr	r7, [sp, #4]
 8006980:	3630      	adds	r6, #48	; 0x30
 8006982:	f805 6b01 	strb.w	r6, [r5], #1
 8006986:	9e00      	ldr	r6, [sp, #0]
 8006988:	1bae      	subs	r6, r5, r6
 800698a:	42b7      	cmp	r7, r6
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	d137      	bne.n	8006a02 <_dtoa_r+0x722>
 8006992:	f7f9 fc7b 	bl	800028c <__adddf3>
 8006996:	4642      	mov	r2, r8
 8006998:	464b      	mov	r3, r9
 800699a:	4606      	mov	r6, r0
 800699c:	460f      	mov	r7, r1
 800699e:	f7fa f8bb 	bl	8000b18 <__aeabi_dcmpgt>
 80069a2:	b9c8      	cbnz	r0, 80069d8 <_dtoa_r+0x6f8>
 80069a4:	4642      	mov	r2, r8
 80069a6:	464b      	mov	r3, r9
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	f7fa f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 80069b0:	b110      	cbz	r0, 80069b8 <_dtoa_r+0x6d8>
 80069b2:	9b02      	ldr	r3, [sp, #8]
 80069b4:	07d9      	lsls	r1, r3, #31
 80069b6:	d40f      	bmi.n	80069d8 <_dtoa_r+0x6f8>
 80069b8:	4620      	mov	r0, r4
 80069ba:	4659      	mov	r1, fp
 80069bc:	f000 fad6 	bl	8006f6c <_Bfree>
 80069c0:	2300      	movs	r3, #0
 80069c2:	702b      	strb	r3, [r5, #0]
 80069c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069c6:	f10a 0001 	add.w	r0, sl, #1
 80069ca:	6018      	str	r0, [r3, #0]
 80069cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f43f acd8 	beq.w	8006384 <_dtoa_r+0xa4>
 80069d4:	601d      	str	r5, [r3, #0]
 80069d6:	e4d5      	b.n	8006384 <_dtoa_r+0xa4>
 80069d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80069dc:	462b      	mov	r3, r5
 80069de:	461d      	mov	r5, r3
 80069e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069e4:	2a39      	cmp	r2, #57	; 0x39
 80069e6:	d108      	bne.n	80069fa <_dtoa_r+0x71a>
 80069e8:	9a00      	ldr	r2, [sp, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d1f7      	bne.n	80069de <_dtoa_r+0x6fe>
 80069ee:	9a07      	ldr	r2, [sp, #28]
 80069f0:	9900      	ldr	r1, [sp, #0]
 80069f2:	3201      	adds	r2, #1
 80069f4:	9207      	str	r2, [sp, #28]
 80069f6:	2230      	movs	r2, #48	; 0x30
 80069f8:	700a      	strb	r2, [r1, #0]
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	3201      	adds	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	e78c      	b.n	800691c <_dtoa_r+0x63c>
 8006a02:	4b7f      	ldr	r3, [pc, #508]	; (8006c00 <_dtoa_r+0x920>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	f7f9 fdf7 	bl	80005f8 <__aeabi_dmul>
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4606      	mov	r6, r0
 8006a10:	460f      	mov	r7, r1
 8006a12:	f7fa f859 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d09b      	beq.n	8006952 <_dtoa_r+0x672>
 8006a1a:	e7cd      	b.n	80069b8 <_dtoa_r+0x6d8>
 8006a1c:	9a08      	ldr	r2, [sp, #32]
 8006a1e:	2a00      	cmp	r2, #0
 8006a20:	f000 80c4 	beq.w	8006bac <_dtoa_r+0x8cc>
 8006a24:	9a05      	ldr	r2, [sp, #20]
 8006a26:	2a01      	cmp	r2, #1
 8006a28:	f300 80a8 	bgt.w	8006b7c <_dtoa_r+0x89c>
 8006a2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	f000 80a0 	beq.w	8006b74 <_dtoa_r+0x894>
 8006a34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a38:	9e06      	ldr	r6, [sp, #24]
 8006a3a:	4645      	mov	r5, r8
 8006a3c:	9a04      	ldr	r2, [sp, #16]
 8006a3e:	2101      	movs	r1, #1
 8006a40:	441a      	add	r2, r3
 8006a42:	4620      	mov	r0, r4
 8006a44:	4498      	add	r8, r3
 8006a46:	9204      	str	r2, [sp, #16]
 8006a48:	f000 fb4c 	bl	80070e4 <__i2b>
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	dd0b      	ble.n	8006a6a <_dtoa_r+0x78a>
 8006a52:	9b04      	ldr	r3, [sp, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dd08      	ble.n	8006a6a <_dtoa_r+0x78a>
 8006a58:	42ab      	cmp	r3, r5
 8006a5a:	9a04      	ldr	r2, [sp, #16]
 8006a5c:	bfa8      	it	ge
 8006a5e:	462b      	movge	r3, r5
 8006a60:	eba8 0803 	sub.w	r8, r8, r3
 8006a64:	1aed      	subs	r5, r5, r3
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	9304      	str	r3, [sp, #16]
 8006a6a:	9b06      	ldr	r3, [sp, #24]
 8006a6c:	b1fb      	cbz	r3, 8006aae <_dtoa_r+0x7ce>
 8006a6e:	9b08      	ldr	r3, [sp, #32]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 809f 	beq.w	8006bb4 <_dtoa_r+0x8d4>
 8006a76:	2e00      	cmp	r6, #0
 8006a78:	dd11      	ble.n	8006a9e <_dtoa_r+0x7be>
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 fbec 	bl	800725c <__pow5mult>
 8006a84:	465a      	mov	r2, fp
 8006a86:	4601      	mov	r1, r0
 8006a88:	4607      	mov	r7, r0
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 fb40 	bl	8007110 <__multiply>
 8006a90:	4659      	mov	r1, fp
 8006a92:	9007      	str	r0, [sp, #28]
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fa69 	bl	8006f6c <_Bfree>
 8006a9a:	9b07      	ldr	r3, [sp, #28]
 8006a9c:	469b      	mov	fp, r3
 8006a9e:	9b06      	ldr	r3, [sp, #24]
 8006aa0:	1b9a      	subs	r2, r3, r6
 8006aa2:	d004      	beq.n	8006aae <_dtoa_r+0x7ce>
 8006aa4:	4659      	mov	r1, fp
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 fbd8 	bl	800725c <__pow5mult>
 8006aac:	4683      	mov	fp, r0
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 fb17 	bl	80070e4 <__i2b>
 8006ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	4606      	mov	r6, r0
 8006abc:	dd7c      	ble.n	8006bb8 <_dtoa_r+0x8d8>
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4601      	mov	r1, r0
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 fbca 	bl	800725c <__pow5mult>
 8006ac8:	9b05      	ldr	r3, [sp, #20]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	4606      	mov	r6, r0
 8006ace:	dd76      	ble.n	8006bbe <_dtoa_r+0x8de>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9306      	str	r3, [sp, #24]
 8006ad4:	6933      	ldr	r3, [r6, #16]
 8006ad6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ada:	6918      	ldr	r0, [r3, #16]
 8006adc:	f000 fab2 	bl	8007044 <__hi0bits>
 8006ae0:	f1c0 0020 	rsb	r0, r0, #32
 8006ae4:	9b04      	ldr	r3, [sp, #16]
 8006ae6:	4418      	add	r0, r3
 8006ae8:	f010 001f 	ands.w	r0, r0, #31
 8006aec:	f000 8086 	beq.w	8006bfc <_dtoa_r+0x91c>
 8006af0:	f1c0 0320 	rsb	r3, r0, #32
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	dd7f      	ble.n	8006bf8 <_dtoa_r+0x918>
 8006af8:	f1c0 001c 	rsb	r0, r0, #28
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	4403      	add	r3, r0
 8006b00:	4480      	add	r8, r0
 8006b02:	4405      	add	r5, r0
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	f1b8 0f00 	cmp.w	r8, #0
 8006b0a:	dd05      	ble.n	8006b18 <_dtoa_r+0x838>
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	4642      	mov	r2, r8
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fbfd 	bl	8007310 <__lshift>
 8006b16:	4683      	mov	fp, r0
 8006b18:	9b04      	ldr	r3, [sp, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dd05      	ble.n	8006b2a <_dtoa_r+0x84a>
 8006b1e:	4631      	mov	r1, r6
 8006b20:	461a      	mov	r2, r3
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 fbf4 	bl	8007310 <__lshift>
 8006b28:	4606      	mov	r6, r0
 8006b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d069      	beq.n	8006c04 <_dtoa_r+0x924>
 8006b30:	4631      	mov	r1, r6
 8006b32:	4658      	mov	r0, fp
 8006b34:	f000 fc58 	bl	80073e8 <__mcmp>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	da63      	bge.n	8006c04 <_dtoa_r+0x924>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4659      	mov	r1, fp
 8006b40:	220a      	movs	r2, #10
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 fa34 	bl	8006fb0 <__multadd>
 8006b48:	9b08      	ldr	r3, [sp, #32]
 8006b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b4e:	4683      	mov	fp, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 818f 	beq.w	8006e74 <_dtoa_r+0xb94>
 8006b56:	4639      	mov	r1, r7
 8006b58:	2300      	movs	r3, #0
 8006b5a:	220a      	movs	r2, #10
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 fa27 	bl	8006fb0 <__multadd>
 8006b62:	f1b9 0f00 	cmp.w	r9, #0
 8006b66:	4607      	mov	r7, r0
 8006b68:	f300 808e 	bgt.w	8006c88 <_dtoa_r+0x9a8>
 8006b6c:	9b05      	ldr	r3, [sp, #20]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	dc50      	bgt.n	8006c14 <_dtoa_r+0x934>
 8006b72:	e089      	b.n	8006c88 <_dtoa_r+0x9a8>
 8006b74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b7a:	e75d      	b.n	8006a38 <_dtoa_r+0x758>
 8006b7c:	9b01      	ldr	r3, [sp, #4]
 8006b7e:	1e5e      	subs	r6, r3, #1
 8006b80:	9b06      	ldr	r3, [sp, #24]
 8006b82:	42b3      	cmp	r3, r6
 8006b84:	bfbf      	itttt	lt
 8006b86:	9b06      	ldrlt	r3, [sp, #24]
 8006b88:	9606      	strlt	r6, [sp, #24]
 8006b8a:	1af2      	sublt	r2, r6, r3
 8006b8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006b8e:	bfb6      	itet	lt
 8006b90:	189b      	addlt	r3, r3, r2
 8006b92:	1b9e      	subge	r6, r3, r6
 8006b94:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	bfb8      	it	lt
 8006b9a:	2600      	movlt	r6, #0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	bfb5      	itete	lt
 8006ba0:	eba8 0503 	sublt.w	r5, r8, r3
 8006ba4:	9b01      	ldrge	r3, [sp, #4]
 8006ba6:	2300      	movlt	r3, #0
 8006ba8:	4645      	movge	r5, r8
 8006baa:	e747      	b.n	8006a3c <_dtoa_r+0x75c>
 8006bac:	9e06      	ldr	r6, [sp, #24]
 8006bae:	9f08      	ldr	r7, [sp, #32]
 8006bb0:	4645      	mov	r5, r8
 8006bb2:	e74c      	b.n	8006a4e <_dtoa_r+0x76e>
 8006bb4:	9a06      	ldr	r2, [sp, #24]
 8006bb6:	e775      	b.n	8006aa4 <_dtoa_r+0x7c4>
 8006bb8:	9b05      	ldr	r3, [sp, #20]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	dc18      	bgt.n	8006bf0 <_dtoa_r+0x910>
 8006bbe:	9b02      	ldr	r3, [sp, #8]
 8006bc0:	b9b3      	cbnz	r3, 8006bf0 <_dtoa_r+0x910>
 8006bc2:	9b03      	ldr	r3, [sp, #12]
 8006bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bc8:	b9a3      	cbnz	r3, 8006bf4 <_dtoa_r+0x914>
 8006bca:	9b03      	ldr	r3, [sp, #12]
 8006bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bd0:	0d1b      	lsrs	r3, r3, #20
 8006bd2:	051b      	lsls	r3, r3, #20
 8006bd4:	b12b      	cbz	r3, 8006be2 <_dtoa_r+0x902>
 8006bd6:	9b04      	ldr	r3, [sp, #16]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	9304      	str	r3, [sp, #16]
 8006bdc:	f108 0801 	add.w	r8, r8, #1
 8006be0:	2301      	movs	r3, #1
 8006be2:	9306      	str	r3, [sp, #24]
 8006be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f47f af74 	bne.w	8006ad4 <_dtoa_r+0x7f4>
 8006bec:	2001      	movs	r0, #1
 8006bee:	e779      	b.n	8006ae4 <_dtoa_r+0x804>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e7f6      	b.n	8006be2 <_dtoa_r+0x902>
 8006bf4:	9b02      	ldr	r3, [sp, #8]
 8006bf6:	e7f4      	b.n	8006be2 <_dtoa_r+0x902>
 8006bf8:	d085      	beq.n	8006b06 <_dtoa_r+0x826>
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	301c      	adds	r0, #28
 8006bfe:	e77d      	b.n	8006afc <_dtoa_r+0x81c>
 8006c00:	40240000 	.word	0x40240000
 8006c04:	9b01      	ldr	r3, [sp, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	dc38      	bgt.n	8006c7c <_dtoa_r+0x99c>
 8006c0a:	9b05      	ldr	r3, [sp, #20]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	dd35      	ble.n	8006c7c <_dtoa_r+0x99c>
 8006c10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c14:	f1b9 0f00 	cmp.w	r9, #0
 8006c18:	d10d      	bne.n	8006c36 <_dtoa_r+0x956>
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	2205      	movs	r2, #5
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 f9c5 	bl	8006fb0 <__multadd>
 8006c26:	4601      	mov	r1, r0
 8006c28:	4606      	mov	r6, r0
 8006c2a:	4658      	mov	r0, fp
 8006c2c:	f000 fbdc 	bl	80073e8 <__mcmp>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	f73f adbd 	bgt.w	80067b0 <_dtoa_r+0x4d0>
 8006c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c38:	9d00      	ldr	r5, [sp, #0]
 8006c3a:	ea6f 0a03 	mvn.w	sl, r3
 8006c3e:	f04f 0800 	mov.w	r8, #0
 8006c42:	4631      	mov	r1, r6
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 f991 	bl	8006f6c <_Bfree>
 8006c4a:	2f00      	cmp	r7, #0
 8006c4c:	f43f aeb4 	beq.w	80069b8 <_dtoa_r+0x6d8>
 8006c50:	f1b8 0f00 	cmp.w	r8, #0
 8006c54:	d005      	beq.n	8006c62 <_dtoa_r+0x982>
 8006c56:	45b8      	cmp	r8, r7
 8006c58:	d003      	beq.n	8006c62 <_dtoa_r+0x982>
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 f985 	bl	8006f6c <_Bfree>
 8006c62:	4639      	mov	r1, r7
 8006c64:	4620      	mov	r0, r4
 8006c66:	f000 f981 	bl	8006f6c <_Bfree>
 8006c6a:	e6a5      	b.n	80069b8 <_dtoa_r+0x6d8>
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	4637      	mov	r7, r6
 8006c70:	e7e1      	b.n	8006c36 <_dtoa_r+0x956>
 8006c72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006c74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c78:	4637      	mov	r7, r6
 8006c7a:	e599      	b.n	80067b0 <_dtoa_r+0x4d0>
 8006c7c:	9b08      	ldr	r3, [sp, #32]
 8006c7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80fd 	beq.w	8006e82 <_dtoa_r+0xba2>
 8006c88:	2d00      	cmp	r5, #0
 8006c8a:	dd05      	ble.n	8006c98 <_dtoa_r+0x9b8>
 8006c8c:	4639      	mov	r1, r7
 8006c8e:	462a      	mov	r2, r5
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 fb3d 	bl	8007310 <__lshift>
 8006c96:	4607      	mov	r7, r0
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d05c      	beq.n	8006d58 <_dtoa_r+0xa78>
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 f923 	bl	8006eec <_Balloc>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	b928      	cbnz	r0, 8006cb6 <_dtoa_r+0x9d6>
 8006caa:	4b80      	ldr	r3, [pc, #512]	; (8006eac <_dtoa_r+0xbcc>)
 8006cac:	4602      	mov	r2, r0
 8006cae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006cb2:	f7ff bb2e 	b.w	8006312 <_dtoa_r+0x32>
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	3202      	adds	r2, #2
 8006cba:	0092      	lsls	r2, r2, #2
 8006cbc:	f107 010c 	add.w	r1, r7, #12
 8006cc0:	300c      	adds	r0, #12
 8006cc2:	f000 f905 	bl	8006ed0 <memcpy>
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	4629      	mov	r1, r5
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 fb20 	bl	8007310 <__lshift>
 8006cd0:	9b00      	ldr	r3, [sp, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	9b00      	ldr	r3, [sp, #0]
 8006cd8:	444b      	add	r3, r9
 8006cda:	9307      	str	r3, [sp, #28]
 8006cdc:	9b02      	ldr	r3, [sp, #8]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	46b8      	mov	r8, r7
 8006ce4:	9306      	str	r3, [sp, #24]
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	4631      	mov	r1, r6
 8006cec:	3b01      	subs	r3, #1
 8006cee:	4658      	mov	r0, fp
 8006cf0:	9302      	str	r3, [sp, #8]
 8006cf2:	f7ff fa69 	bl	80061c8 <quorem>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	3330      	adds	r3, #48	; 0x30
 8006cfa:	9004      	str	r0, [sp, #16]
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	4658      	mov	r0, fp
 8006d00:	9308      	str	r3, [sp, #32]
 8006d02:	f000 fb71 	bl	80073e8 <__mcmp>
 8006d06:	463a      	mov	r2, r7
 8006d08:	4681      	mov	r9, r0
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fb87 	bl	8007420 <__mdiff>
 8006d12:	68c2      	ldr	r2, [r0, #12]
 8006d14:	9b08      	ldr	r3, [sp, #32]
 8006d16:	4605      	mov	r5, r0
 8006d18:	bb02      	cbnz	r2, 8006d5c <_dtoa_r+0xa7c>
 8006d1a:	4601      	mov	r1, r0
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	f000 fb63 	bl	80073e8 <__mcmp>
 8006d22:	9b08      	ldr	r3, [sp, #32]
 8006d24:	4602      	mov	r2, r0
 8006d26:	4629      	mov	r1, r5
 8006d28:	4620      	mov	r0, r4
 8006d2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006d2e:	f000 f91d 	bl	8006f6c <_Bfree>
 8006d32:	9b05      	ldr	r3, [sp, #20]
 8006d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d36:	9d01      	ldr	r5, [sp, #4]
 8006d38:	ea43 0102 	orr.w	r1, r3, r2
 8006d3c:	9b06      	ldr	r3, [sp, #24]
 8006d3e:	430b      	orrs	r3, r1
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	d10d      	bne.n	8006d60 <_dtoa_r+0xa80>
 8006d44:	2b39      	cmp	r3, #57	; 0x39
 8006d46:	d029      	beq.n	8006d9c <_dtoa_r+0xabc>
 8006d48:	f1b9 0f00 	cmp.w	r9, #0
 8006d4c:	dd01      	ble.n	8006d52 <_dtoa_r+0xa72>
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	3331      	adds	r3, #49	; 0x31
 8006d52:	9a02      	ldr	r2, [sp, #8]
 8006d54:	7013      	strb	r3, [r2, #0]
 8006d56:	e774      	b.n	8006c42 <_dtoa_r+0x962>
 8006d58:	4638      	mov	r0, r7
 8006d5a:	e7b9      	b.n	8006cd0 <_dtoa_r+0x9f0>
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	e7e2      	b.n	8006d26 <_dtoa_r+0xa46>
 8006d60:	f1b9 0f00 	cmp.w	r9, #0
 8006d64:	db06      	blt.n	8006d74 <_dtoa_r+0xa94>
 8006d66:	9905      	ldr	r1, [sp, #20]
 8006d68:	ea41 0909 	orr.w	r9, r1, r9
 8006d6c:	9906      	ldr	r1, [sp, #24]
 8006d6e:	ea59 0101 	orrs.w	r1, r9, r1
 8006d72:	d120      	bne.n	8006db6 <_dtoa_r+0xad6>
 8006d74:	2a00      	cmp	r2, #0
 8006d76:	ddec      	ble.n	8006d52 <_dtoa_r+0xa72>
 8006d78:	4659      	mov	r1, fp
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	9301      	str	r3, [sp, #4]
 8006d80:	f000 fac6 	bl	8007310 <__lshift>
 8006d84:	4631      	mov	r1, r6
 8006d86:	4683      	mov	fp, r0
 8006d88:	f000 fb2e 	bl	80073e8 <__mcmp>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	9b01      	ldr	r3, [sp, #4]
 8006d90:	dc02      	bgt.n	8006d98 <_dtoa_r+0xab8>
 8006d92:	d1de      	bne.n	8006d52 <_dtoa_r+0xa72>
 8006d94:	07da      	lsls	r2, r3, #31
 8006d96:	d5dc      	bpl.n	8006d52 <_dtoa_r+0xa72>
 8006d98:	2b39      	cmp	r3, #57	; 0x39
 8006d9a:	d1d8      	bne.n	8006d4e <_dtoa_r+0xa6e>
 8006d9c:	9a02      	ldr	r2, [sp, #8]
 8006d9e:	2339      	movs	r3, #57	; 0x39
 8006da0:	7013      	strb	r3, [r2, #0]
 8006da2:	462b      	mov	r3, r5
 8006da4:	461d      	mov	r5, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006dac:	2a39      	cmp	r2, #57	; 0x39
 8006dae:	d050      	beq.n	8006e52 <_dtoa_r+0xb72>
 8006db0:	3201      	adds	r2, #1
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e745      	b.n	8006c42 <_dtoa_r+0x962>
 8006db6:	2a00      	cmp	r2, #0
 8006db8:	dd03      	ble.n	8006dc2 <_dtoa_r+0xae2>
 8006dba:	2b39      	cmp	r3, #57	; 0x39
 8006dbc:	d0ee      	beq.n	8006d9c <_dtoa_r+0xabc>
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	e7c7      	b.n	8006d52 <_dtoa_r+0xa72>
 8006dc2:	9a01      	ldr	r2, [sp, #4]
 8006dc4:	9907      	ldr	r1, [sp, #28]
 8006dc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006dca:	428a      	cmp	r2, r1
 8006dcc:	d02a      	beq.n	8006e24 <_dtoa_r+0xb44>
 8006dce:	4659      	mov	r1, fp
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	220a      	movs	r2, #10
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 f8eb 	bl	8006fb0 <__multadd>
 8006dda:	45b8      	cmp	r8, r7
 8006ddc:	4683      	mov	fp, r0
 8006dde:	f04f 0300 	mov.w	r3, #0
 8006de2:	f04f 020a 	mov.w	r2, #10
 8006de6:	4641      	mov	r1, r8
 8006de8:	4620      	mov	r0, r4
 8006dea:	d107      	bne.n	8006dfc <_dtoa_r+0xb1c>
 8006dec:	f000 f8e0 	bl	8006fb0 <__multadd>
 8006df0:	4680      	mov	r8, r0
 8006df2:	4607      	mov	r7, r0
 8006df4:	9b01      	ldr	r3, [sp, #4]
 8006df6:	3301      	adds	r3, #1
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	e775      	b.n	8006ce8 <_dtoa_r+0xa08>
 8006dfc:	f000 f8d8 	bl	8006fb0 <__multadd>
 8006e00:	4639      	mov	r1, r7
 8006e02:	4680      	mov	r8, r0
 8006e04:	2300      	movs	r3, #0
 8006e06:	220a      	movs	r2, #10
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 f8d1 	bl	8006fb0 <__multadd>
 8006e0e:	4607      	mov	r7, r0
 8006e10:	e7f0      	b.n	8006df4 <_dtoa_r+0xb14>
 8006e12:	f1b9 0f00 	cmp.w	r9, #0
 8006e16:	9a00      	ldr	r2, [sp, #0]
 8006e18:	bfcc      	ite	gt
 8006e1a:	464d      	movgt	r5, r9
 8006e1c:	2501      	movle	r5, #1
 8006e1e:	4415      	add	r5, r2
 8006e20:	f04f 0800 	mov.w	r8, #0
 8006e24:	4659      	mov	r1, fp
 8006e26:	2201      	movs	r2, #1
 8006e28:	4620      	mov	r0, r4
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	f000 fa70 	bl	8007310 <__lshift>
 8006e30:	4631      	mov	r1, r6
 8006e32:	4683      	mov	fp, r0
 8006e34:	f000 fad8 	bl	80073e8 <__mcmp>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	dcb2      	bgt.n	8006da2 <_dtoa_r+0xac2>
 8006e3c:	d102      	bne.n	8006e44 <_dtoa_r+0xb64>
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	07db      	lsls	r3, r3, #31
 8006e42:	d4ae      	bmi.n	8006da2 <_dtoa_r+0xac2>
 8006e44:	462b      	mov	r3, r5
 8006e46:	461d      	mov	r5, r3
 8006e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e4c:	2a30      	cmp	r2, #48	; 0x30
 8006e4e:	d0fa      	beq.n	8006e46 <_dtoa_r+0xb66>
 8006e50:	e6f7      	b.n	8006c42 <_dtoa_r+0x962>
 8006e52:	9a00      	ldr	r2, [sp, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d1a5      	bne.n	8006da4 <_dtoa_r+0xac4>
 8006e58:	f10a 0a01 	add.w	sl, sl, #1
 8006e5c:	2331      	movs	r3, #49	; 0x31
 8006e5e:	e779      	b.n	8006d54 <_dtoa_r+0xa74>
 8006e60:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <_dtoa_r+0xbd0>)
 8006e62:	f7ff baaf 	b.w	80063c4 <_dtoa_r+0xe4>
 8006e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f47f aa86 	bne.w	800637a <_dtoa_r+0x9a>
 8006e6e:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <_dtoa_r+0xbd4>)
 8006e70:	f7ff baa8 	b.w	80063c4 <_dtoa_r+0xe4>
 8006e74:	f1b9 0f00 	cmp.w	r9, #0
 8006e78:	dc03      	bgt.n	8006e82 <_dtoa_r+0xba2>
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	f73f aec9 	bgt.w	8006c14 <_dtoa_r+0x934>
 8006e82:	9d00      	ldr	r5, [sp, #0]
 8006e84:	4631      	mov	r1, r6
 8006e86:	4658      	mov	r0, fp
 8006e88:	f7ff f99e 	bl	80061c8 <quorem>
 8006e8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e90:	f805 3b01 	strb.w	r3, [r5], #1
 8006e94:	9a00      	ldr	r2, [sp, #0]
 8006e96:	1aaa      	subs	r2, r5, r2
 8006e98:	4591      	cmp	r9, r2
 8006e9a:	ddba      	ble.n	8006e12 <_dtoa_r+0xb32>
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 f884 	bl	8006fb0 <__multadd>
 8006ea8:	4683      	mov	fp, r0
 8006eaa:	e7eb      	b.n	8006e84 <_dtoa_r+0xba4>
 8006eac:	08008f37 	.word	0x08008f37
 8006eb0:	08008e90 	.word	0x08008e90
 8006eb4:	08008eb4 	.word	0x08008eb4

08006eb8 <_localeconv_r>:
 8006eb8:	4800      	ldr	r0, [pc, #0]	; (8006ebc <_localeconv_r+0x4>)
 8006eba:	4770      	bx	lr
 8006ebc:	20000170 	.word	0x20000170

08006ec0 <malloc>:
 8006ec0:	4b02      	ldr	r3, [pc, #8]	; (8006ecc <malloc+0xc>)
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	6818      	ldr	r0, [r3, #0]
 8006ec6:	f000 bbef 	b.w	80076a8 <_malloc_r>
 8006eca:	bf00      	nop
 8006ecc:	2000001c 	.word	0x2000001c

08006ed0 <memcpy>:
 8006ed0:	440a      	add	r2, r1
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ed8:	d100      	bne.n	8006edc <memcpy+0xc>
 8006eda:	4770      	bx	lr
 8006edc:	b510      	push	{r4, lr}
 8006ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee6:	4291      	cmp	r1, r2
 8006ee8:	d1f9      	bne.n	8006ede <memcpy+0xe>
 8006eea:	bd10      	pop	{r4, pc}

08006eec <_Balloc>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	460d      	mov	r5, r1
 8006ef4:	b976      	cbnz	r6, 8006f14 <_Balloc+0x28>
 8006ef6:	2010      	movs	r0, #16
 8006ef8:	f7ff ffe2 	bl	8006ec0 <malloc>
 8006efc:	4602      	mov	r2, r0
 8006efe:	6260      	str	r0, [r4, #36]	; 0x24
 8006f00:	b920      	cbnz	r0, 8006f0c <_Balloc+0x20>
 8006f02:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <_Balloc+0x78>)
 8006f04:	4818      	ldr	r0, [pc, #96]	; (8006f68 <_Balloc+0x7c>)
 8006f06:	2166      	movs	r1, #102	; 0x66
 8006f08:	f000 fd94 	bl	8007a34 <__assert_func>
 8006f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f10:	6006      	str	r6, [r0, #0]
 8006f12:	60c6      	str	r6, [r0, #12]
 8006f14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f16:	68f3      	ldr	r3, [r6, #12]
 8006f18:	b183      	cbz	r3, 8006f3c <_Balloc+0x50>
 8006f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f22:	b9b8      	cbnz	r0, 8006f54 <_Balloc+0x68>
 8006f24:	2101      	movs	r1, #1
 8006f26:	fa01 f605 	lsl.w	r6, r1, r5
 8006f2a:	1d72      	adds	r2, r6, #5
 8006f2c:	0092      	lsls	r2, r2, #2
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 fb5a 	bl	80075e8 <_calloc_r>
 8006f34:	b160      	cbz	r0, 8006f50 <_Balloc+0x64>
 8006f36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f3a:	e00e      	b.n	8006f5a <_Balloc+0x6e>
 8006f3c:	2221      	movs	r2, #33	; 0x21
 8006f3e:	2104      	movs	r1, #4
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 fb51 	bl	80075e8 <_calloc_r>
 8006f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f48:	60f0      	str	r0, [r6, #12]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e4      	bne.n	8006f1a <_Balloc+0x2e>
 8006f50:	2000      	movs	r0, #0
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
 8006f54:	6802      	ldr	r2, [r0, #0]
 8006f56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f60:	e7f7      	b.n	8006f52 <_Balloc+0x66>
 8006f62:	bf00      	nop
 8006f64:	08008ec1 	.word	0x08008ec1
 8006f68:	08008f48 	.word	0x08008f48

08006f6c <_Bfree>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f70:	4605      	mov	r5, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b976      	cbnz	r6, 8006f94 <_Bfree+0x28>
 8006f76:	2010      	movs	r0, #16
 8006f78:	f7ff ffa2 	bl	8006ec0 <malloc>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6268      	str	r0, [r5, #36]	; 0x24
 8006f80:	b920      	cbnz	r0, 8006f8c <_Bfree+0x20>
 8006f82:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <_Bfree+0x3c>)
 8006f84:	4809      	ldr	r0, [pc, #36]	; (8006fac <_Bfree+0x40>)
 8006f86:	218a      	movs	r1, #138	; 0x8a
 8006f88:	f000 fd54 	bl	8007a34 <__assert_func>
 8006f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f90:	6006      	str	r6, [r0, #0]
 8006f92:	60c6      	str	r6, [r0, #12]
 8006f94:	b13c      	cbz	r4, 8006fa6 <_Bfree+0x3a>
 8006f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f98:	6862      	ldr	r2, [r4, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fa0:	6021      	str	r1, [r4, #0]
 8006fa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	08008ec1 	.word	0x08008ec1
 8006fac:	08008f48 	.word	0x08008f48

08006fb0 <__multadd>:
 8006fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb4:	690e      	ldr	r6, [r1, #16]
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	4698      	mov	r8, r3
 8006fba:	460c      	mov	r4, r1
 8006fbc:	f101 0014 	add.w	r0, r1, #20
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6805      	ldr	r5, [r0, #0]
 8006fc4:	b2a9      	uxth	r1, r5
 8006fc6:	fb02 8101 	mla	r1, r2, r1, r8
 8006fca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006fce:	0c2d      	lsrs	r5, r5, #16
 8006fd0:	fb02 c505 	mla	r5, r2, r5, ip
 8006fd4:	b289      	uxth	r1, r1
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006fdc:	429e      	cmp	r6, r3
 8006fde:	f840 1b04 	str.w	r1, [r0], #4
 8006fe2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006fe6:	dcec      	bgt.n	8006fc2 <__multadd+0x12>
 8006fe8:	f1b8 0f00 	cmp.w	r8, #0
 8006fec:	d022      	beq.n	8007034 <__multadd+0x84>
 8006fee:	68a3      	ldr	r3, [r4, #8]
 8006ff0:	42b3      	cmp	r3, r6
 8006ff2:	dc19      	bgt.n	8007028 <__multadd+0x78>
 8006ff4:	6861      	ldr	r1, [r4, #4]
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	3101      	adds	r1, #1
 8006ffa:	f7ff ff77 	bl	8006eec <_Balloc>
 8006ffe:	4605      	mov	r5, r0
 8007000:	b928      	cbnz	r0, 800700e <__multadd+0x5e>
 8007002:	4602      	mov	r2, r0
 8007004:	4b0d      	ldr	r3, [pc, #52]	; (800703c <__multadd+0x8c>)
 8007006:	480e      	ldr	r0, [pc, #56]	; (8007040 <__multadd+0x90>)
 8007008:	21b5      	movs	r1, #181	; 0xb5
 800700a:	f000 fd13 	bl	8007a34 <__assert_func>
 800700e:	6922      	ldr	r2, [r4, #16]
 8007010:	3202      	adds	r2, #2
 8007012:	f104 010c 	add.w	r1, r4, #12
 8007016:	0092      	lsls	r2, r2, #2
 8007018:	300c      	adds	r0, #12
 800701a:	f7ff ff59 	bl	8006ed0 <memcpy>
 800701e:	4621      	mov	r1, r4
 8007020:	4638      	mov	r0, r7
 8007022:	f7ff ffa3 	bl	8006f6c <_Bfree>
 8007026:	462c      	mov	r4, r5
 8007028:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800702c:	3601      	adds	r6, #1
 800702e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007032:	6126      	str	r6, [r4, #16]
 8007034:	4620      	mov	r0, r4
 8007036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800703a:	bf00      	nop
 800703c:	08008f37 	.word	0x08008f37
 8007040:	08008f48 	.word	0x08008f48

08007044 <__hi0bits>:
 8007044:	0c03      	lsrs	r3, r0, #16
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	b9d3      	cbnz	r3, 8007080 <__hi0bits+0x3c>
 800704a:	0400      	lsls	r0, r0, #16
 800704c:	2310      	movs	r3, #16
 800704e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007052:	bf04      	itt	eq
 8007054:	0200      	lsleq	r0, r0, #8
 8007056:	3308      	addeq	r3, #8
 8007058:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800705c:	bf04      	itt	eq
 800705e:	0100      	lsleq	r0, r0, #4
 8007060:	3304      	addeq	r3, #4
 8007062:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007066:	bf04      	itt	eq
 8007068:	0080      	lsleq	r0, r0, #2
 800706a:	3302      	addeq	r3, #2
 800706c:	2800      	cmp	r0, #0
 800706e:	db05      	blt.n	800707c <__hi0bits+0x38>
 8007070:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007074:	f103 0301 	add.w	r3, r3, #1
 8007078:	bf08      	it	eq
 800707a:	2320      	moveq	r3, #32
 800707c:	4618      	mov	r0, r3
 800707e:	4770      	bx	lr
 8007080:	2300      	movs	r3, #0
 8007082:	e7e4      	b.n	800704e <__hi0bits+0xa>

08007084 <__lo0bits>:
 8007084:	6803      	ldr	r3, [r0, #0]
 8007086:	f013 0207 	ands.w	r2, r3, #7
 800708a:	4601      	mov	r1, r0
 800708c:	d00b      	beq.n	80070a6 <__lo0bits+0x22>
 800708e:	07da      	lsls	r2, r3, #31
 8007090:	d424      	bmi.n	80070dc <__lo0bits+0x58>
 8007092:	0798      	lsls	r0, r3, #30
 8007094:	bf49      	itett	mi
 8007096:	085b      	lsrmi	r3, r3, #1
 8007098:	089b      	lsrpl	r3, r3, #2
 800709a:	2001      	movmi	r0, #1
 800709c:	600b      	strmi	r3, [r1, #0]
 800709e:	bf5c      	itt	pl
 80070a0:	600b      	strpl	r3, [r1, #0]
 80070a2:	2002      	movpl	r0, #2
 80070a4:	4770      	bx	lr
 80070a6:	b298      	uxth	r0, r3
 80070a8:	b9b0      	cbnz	r0, 80070d8 <__lo0bits+0x54>
 80070aa:	0c1b      	lsrs	r3, r3, #16
 80070ac:	2010      	movs	r0, #16
 80070ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80070b2:	bf04      	itt	eq
 80070b4:	0a1b      	lsreq	r3, r3, #8
 80070b6:	3008      	addeq	r0, #8
 80070b8:	071a      	lsls	r2, r3, #28
 80070ba:	bf04      	itt	eq
 80070bc:	091b      	lsreq	r3, r3, #4
 80070be:	3004      	addeq	r0, #4
 80070c0:	079a      	lsls	r2, r3, #30
 80070c2:	bf04      	itt	eq
 80070c4:	089b      	lsreq	r3, r3, #2
 80070c6:	3002      	addeq	r0, #2
 80070c8:	07da      	lsls	r2, r3, #31
 80070ca:	d403      	bmi.n	80070d4 <__lo0bits+0x50>
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	f100 0001 	add.w	r0, r0, #1
 80070d2:	d005      	beq.n	80070e0 <__lo0bits+0x5c>
 80070d4:	600b      	str	r3, [r1, #0]
 80070d6:	4770      	bx	lr
 80070d8:	4610      	mov	r0, r2
 80070da:	e7e8      	b.n	80070ae <__lo0bits+0x2a>
 80070dc:	2000      	movs	r0, #0
 80070de:	4770      	bx	lr
 80070e0:	2020      	movs	r0, #32
 80070e2:	4770      	bx	lr

080070e4 <__i2b>:
 80070e4:	b510      	push	{r4, lr}
 80070e6:	460c      	mov	r4, r1
 80070e8:	2101      	movs	r1, #1
 80070ea:	f7ff feff 	bl	8006eec <_Balloc>
 80070ee:	4602      	mov	r2, r0
 80070f0:	b928      	cbnz	r0, 80070fe <__i2b+0x1a>
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <__i2b+0x24>)
 80070f4:	4805      	ldr	r0, [pc, #20]	; (800710c <__i2b+0x28>)
 80070f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070fa:	f000 fc9b 	bl	8007a34 <__assert_func>
 80070fe:	2301      	movs	r3, #1
 8007100:	6144      	str	r4, [r0, #20]
 8007102:	6103      	str	r3, [r0, #16]
 8007104:	bd10      	pop	{r4, pc}
 8007106:	bf00      	nop
 8007108:	08008f37 	.word	0x08008f37
 800710c:	08008f48 	.word	0x08008f48

08007110 <__multiply>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	4614      	mov	r4, r2
 8007116:	690a      	ldr	r2, [r1, #16]
 8007118:	6923      	ldr	r3, [r4, #16]
 800711a:	429a      	cmp	r2, r3
 800711c:	bfb8      	it	lt
 800711e:	460b      	movlt	r3, r1
 8007120:	460d      	mov	r5, r1
 8007122:	bfbc      	itt	lt
 8007124:	4625      	movlt	r5, r4
 8007126:	461c      	movlt	r4, r3
 8007128:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800712c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007130:	68ab      	ldr	r3, [r5, #8]
 8007132:	6869      	ldr	r1, [r5, #4]
 8007134:	eb0a 0709 	add.w	r7, sl, r9
 8007138:	42bb      	cmp	r3, r7
 800713a:	b085      	sub	sp, #20
 800713c:	bfb8      	it	lt
 800713e:	3101      	addlt	r1, #1
 8007140:	f7ff fed4 	bl	8006eec <_Balloc>
 8007144:	b930      	cbnz	r0, 8007154 <__multiply+0x44>
 8007146:	4602      	mov	r2, r0
 8007148:	4b42      	ldr	r3, [pc, #264]	; (8007254 <__multiply+0x144>)
 800714a:	4843      	ldr	r0, [pc, #268]	; (8007258 <__multiply+0x148>)
 800714c:	f240 115d 	movw	r1, #349	; 0x15d
 8007150:	f000 fc70 	bl	8007a34 <__assert_func>
 8007154:	f100 0614 	add.w	r6, r0, #20
 8007158:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800715c:	4633      	mov	r3, r6
 800715e:	2200      	movs	r2, #0
 8007160:	4543      	cmp	r3, r8
 8007162:	d31e      	bcc.n	80071a2 <__multiply+0x92>
 8007164:	f105 0c14 	add.w	ip, r5, #20
 8007168:	f104 0314 	add.w	r3, r4, #20
 800716c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007170:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007174:	9202      	str	r2, [sp, #8]
 8007176:	ebac 0205 	sub.w	r2, ip, r5
 800717a:	3a15      	subs	r2, #21
 800717c:	f022 0203 	bic.w	r2, r2, #3
 8007180:	3204      	adds	r2, #4
 8007182:	f105 0115 	add.w	r1, r5, #21
 8007186:	458c      	cmp	ip, r1
 8007188:	bf38      	it	cc
 800718a:	2204      	movcc	r2, #4
 800718c:	9201      	str	r2, [sp, #4]
 800718e:	9a02      	ldr	r2, [sp, #8]
 8007190:	9303      	str	r3, [sp, #12]
 8007192:	429a      	cmp	r2, r3
 8007194:	d808      	bhi.n	80071a8 <__multiply+0x98>
 8007196:	2f00      	cmp	r7, #0
 8007198:	dc55      	bgt.n	8007246 <__multiply+0x136>
 800719a:	6107      	str	r7, [r0, #16]
 800719c:	b005      	add	sp, #20
 800719e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a2:	f843 2b04 	str.w	r2, [r3], #4
 80071a6:	e7db      	b.n	8007160 <__multiply+0x50>
 80071a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80071ac:	f1ba 0f00 	cmp.w	sl, #0
 80071b0:	d020      	beq.n	80071f4 <__multiply+0xe4>
 80071b2:	f105 0e14 	add.w	lr, r5, #20
 80071b6:	46b1      	mov	r9, r6
 80071b8:	2200      	movs	r2, #0
 80071ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 80071be:	f8d9 b000 	ldr.w	fp, [r9]
 80071c2:	b2a1      	uxth	r1, r4
 80071c4:	fa1f fb8b 	uxth.w	fp, fp
 80071c8:	fb0a b101 	mla	r1, sl, r1, fp
 80071cc:	4411      	add	r1, r2
 80071ce:	f8d9 2000 	ldr.w	r2, [r9]
 80071d2:	0c24      	lsrs	r4, r4, #16
 80071d4:	0c12      	lsrs	r2, r2, #16
 80071d6:	fb0a 2404 	mla	r4, sl, r4, r2
 80071da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80071de:	b289      	uxth	r1, r1
 80071e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80071e4:	45f4      	cmp	ip, lr
 80071e6:	f849 1b04 	str.w	r1, [r9], #4
 80071ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80071ee:	d8e4      	bhi.n	80071ba <__multiply+0xaa>
 80071f0:	9901      	ldr	r1, [sp, #4]
 80071f2:	5072      	str	r2, [r6, r1]
 80071f4:	9a03      	ldr	r2, [sp, #12]
 80071f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071fa:	3304      	adds	r3, #4
 80071fc:	f1b9 0f00 	cmp.w	r9, #0
 8007200:	d01f      	beq.n	8007242 <__multiply+0x132>
 8007202:	6834      	ldr	r4, [r6, #0]
 8007204:	f105 0114 	add.w	r1, r5, #20
 8007208:	46b6      	mov	lr, r6
 800720a:	f04f 0a00 	mov.w	sl, #0
 800720e:	880a      	ldrh	r2, [r1, #0]
 8007210:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007214:	fb09 b202 	mla	r2, r9, r2, fp
 8007218:	4492      	add	sl, r2
 800721a:	b2a4      	uxth	r4, r4
 800721c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007220:	f84e 4b04 	str.w	r4, [lr], #4
 8007224:	f851 4b04 	ldr.w	r4, [r1], #4
 8007228:	f8be 2000 	ldrh.w	r2, [lr]
 800722c:	0c24      	lsrs	r4, r4, #16
 800722e:	fb09 2404 	mla	r4, r9, r4, r2
 8007232:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007236:	458c      	cmp	ip, r1
 8007238:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800723c:	d8e7      	bhi.n	800720e <__multiply+0xfe>
 800723e:	9a01      	ldr	r2, [sp, #4]
 8007240:	50b4      	str	r4, [r6, r2]
 8007242:	3604      	adds	r6, #4
 8007244:	e7a3      	b.n	800718e <__multiply+0x7e>
 8007246:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1a5      	bne.n	800719a <__multiply+0x8a>
 800724e:	3f01      	subs	r7, #1
 8007250:	e7a1      	b.n	8007196 <__multiply+0x86>
 8007252:	bf00      	nop
 8007254:	08008f37 	.word	0x08008f37
 8007258:	08008f48 	.word	0x08008f48

0800725c <__pow5mult>:
 800725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007260:	4615      	mov	r5, r2
 8007262:	f012 0203 	ands.w	r2, r2, #3
 8007266:	4606      	mov	r6, r0
 8007268:	460f      	mov	r7, r1
 800726a:	d007      	beq.n	800727c <__pow5mult+0x20>
 800726c:	4c25      	ldr	r4, [pc, #148]	; (8007304 <__pow5mult+0xa8>)
 800726e:	3a01      	subs	r2, #1
 8007270:	2300      	movs	r3, #0
 8007272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007276:	f7ff fe9b 	bl	8006fb0 <__multadd>
 800727a:	4607      	mov	r7, r0
 800727c:	10ad      	asrs	r5, r5, #2
 800727e:	d03d      	beq.n	80072fc <__pow5mult+0xa0>
 8007280:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007282:	b97c      	cbnz	r4, 80072a4 <__pow5mult+0x48>
 8007284:	2010      	movs	r0, #16
 8007286:	f7ff fe1b 	bl	8006ec0 <malloc>
 800728a:	4602      	mov	r2, r0
 800728c:	6270      	str	r0, [r6, #36]	; 0x24
 800728e:	b928      	cbnz	r0, 800729c <__pow5mult+0x40>
 8007290:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <__pow5mult+0xac>)
 8007292:	481e      	ldr	r0, [pc, #120]	; (800730c <__pow5mult+0xb0>)
 8007294:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007298:	f000 fbcc 	bl	8007a34 <__assert_func>
 800729c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072a0:	6004      	str	r4, [r0, #0]
 80072a2:	60c4      	str	r4, [r0, #12]
 80072a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072ac:	b94c      	cbnz	r4, 80072c2 <__pow5mult+0x66>
 80072ae:	f240 2171 	movw	r1, #625	; 0x271
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ff16 	bl	80070e4 <__i2b>
 80072b8:	2300      	movs	r3, #0
 80072ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80072be:	4604      	mov	r4, r0
 80072c0:	6003      	str	r3, [r0, #0]
 80072c2:	f04f 0900 	mov.w	r9, #0
 80072c6:	07eb      	lsls	r3, r5, #31
 80072c8:	d50a      	bpl.n	80072e0 <__pow5mult+0x84>
 80072ca:	4639      	mov	r1, r7
 80072cc:	4622      	mov	r2, r4
 80072ce:	4630      	mov	r0, r6
 80072d0:	f7ff ff1e 	bl	8007110 <__multiply>
 80072d4:	4639      	mov	r1, r7
 80072d6:	4680      	mov	r8, r0
 80072d8:	4630      	mov	r0, r6
 80072da:	f7ff fe47 	bl	8006f6c <_Bfree>
 80072de:	4647      	mov	r7, r8
 80072e0:	106d      	asrs	r5, r5, #1
 80072e2:	d00b      	beq.n	80072fc <__pow5mult+0xa0>
 80072e4:	6820      	ldr	r0, [r4, #0]
 80072e6:	b938      	cbnz	r0, 80072f8 <__pow5mult+0x9c>
 80072e8:	4622      	mov	r2, r4
 80072ea:	4621      	mov	r1, r4
 80072ec:	4630      	mov	r0, r6
 80072ee:	f7ff ff0f 	bl	8007110 <__multiply>
 80072f2:	6020      	str	r0, [r4, #0]
 80072f4:	f8c0 9000 	str.w	r9, [r0]
 80072f8:	4604      	mov	r4, r0
 80072fa:	e7e4      	b.n	80072c6 <__pow5mult+0x6a>
 80072fc:	4638      	mov	r0, r7
 80072fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007302:	bf00      	nop
 8007304:	08009098 	.word	0x08009098
 8007308:	08008ec1 	.word	0x08008ec1
 800730c:	08008f48 	.word	0x08008f48

08007310 <__lshift>:
 8007310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	460c      	mov	r4, r1
 8007316:	6849      	ldr	r1, [r1, #4]
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	4607      	mov	r7, r0
 8007322:	4691      	mov	r9, r2
 8007324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007328:	f108 0601 	add.w	r6, r8, #1
 800732c:	42b3      	cmp	r3, r6
 800732e:	db0b      	blt.n	8007348 <__lshift+0x38>
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff fddb 	bl	8006eec <_Balloc>
 8007336:	4605      	mov	r5, r0
 8007338:	b948      	cbnz	r0, 800734e <__lshift+0x3e>
 800733a:	4602      	mov	r2, r0
 800733c:	4b28      	ldr	r3, [pc, #160]	; (80073e0 <__lshift+0xd0>)
 800733e:	4829      	ldr	r0, [pc, #164]	; (80073e4 <__lshift+0xd4>)
 8007340:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007344:	f000 fb76 	bl	8007a34 <__assert_func>
 8007348:	3101      	adds	r1, #1
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	e7ee      	b.n	800732c <__lshift+0x1c>
 800734e:	2300      	movs	r3, #0
 8007350:	f100 0114 	add.w	r1, r0, #20
 8007354:	f100 0210 	add.w	r2, r0, #16
 8007358:	4618      	mov	r0, r3
 800735a:	4553      	cmp	r3, sl
 800735c:	db33      	blt.n	80073c6 <__lshift+0xb6>
 800735e:	6920      	ldr	r0, [r4, #16]
 8007360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007364:	f104 0314 	add.w	r3, r4, #20
 8007368:	f019 091f 	ands.w	r9, r9, #31
 800736c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007370:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007374:	d02b      	beq.n	80073ce <__lshift+0xbe>
 8007376:	f1c9 0e20 	rsb	lr, r9, #32
 800737a:	468a      	mov	sl, r1
 800737c:	2200      	movs	r2, #0
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	fa00 f009 	lsl.w	r0, r0, r9
 8007384:	4302      	orrs	r2, r0
 8007386:	f84a 2b04 	str.w	r2, [sl], #4
 800738a:	f853 2b04 	ldr.w	r2, [r3], #4
 800738e:	459c      	cmp	ip, r3
 8007390:	fa22 f20e 	lsr.w	r2, r2, lr
 8007394:	d8f3      	bhi.n	800737e <__lshift+0x6e>
 8007396:	ebac 0304 	sub.w	r3, ip, r4
 800739a:	3b15      	subs	r3, #21
 800739c:	f023 0303 	bic.w	r3, r3, #3
 80073a0:	3304      	adds	r3, #4
 80073a2:	f104 0015 	add.w	r0, r4, #21
 80073a6:	4584      	cmp	ip, r0
 80073a8:	bf38      	it	cc
 80073aa:	2304      	movcc	r3, #4
 80073ac:	50ca      	str	r2, [r1, r3]
 80073ae:	b10a      	cbz	r2, 80073b4 <__lshift+0xa4>
 80073b0:	f108 0602 	add.w	r6, r8, #2
 80073b4:	3e01      	subs	r6, #1
 80073b6:	4638      	mov	r0, r7
 80073b8:	612e      	str	r6, [r5, #16]
 80073ba:	4621      	mov	r1, r4
 80073bc:	f7ff fdd6 	bl	8006f6c <_Bfree>
 80073c0:	4628      	mov	r0, r5
 80073c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80073ca:	3301      	adds	r3, #1
 80073cc:	e7c5      	b.n	800735a <__lshift+0x4a>
 80073ce:	3904      	subs	r1, #4
 80073d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80073d8:	459c      	cmp	ip, r3
 80073da:	d8f9      	bhi.n	80073d0 <__lshift+0xc0>
 80073dc:	e7ea      	b.n	80073b4 <__lshift+0xa4>
 80073de:	bf00      	nop
 80073e0:	08008f37 	.word	0x08008f37
 80073e4:	08008f48 	.word	0x08008f48

080073e8 <__mcmp>:
 80073e8:	b530      	push	{r4, r5, lr}
 80073ea:	6902      	ldr	r2, [r0, #16]
 80073ec:	690c      	ldr	r4, [r1, #16]
 80073ee:	1b12      	subs	r2, r2, r4
 80073f0:	d10e      	bne.n	8007410 <__mcmp+0x28>
 80073f2:	f100 0314 	add.w	r3, r0, #20
 80073f6:	3114      	adds	r1, #20
 80073f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80073fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007400:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007404:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007408:	42a5      	cmp	r5, r4
 800740a:	d003      	beq.n	8007414 <__mcmp+0x2c>
 800740c:	d305      	bcc.n	800741a <__mcmp+0x32>
 800740e:	2201      	movs	r2, #1
 8007410:	4610      	mov	r0, r2
 8007412:	bd30      	pop	{r4, r5, pc}
 8007414:	4283      	cmp	r3, r0
 8007416:	d3f3      	bcc.n	8007400 <__mcmp+0x18>
 8007418:	e7fa      	b.n	8007410 <__mcmp+0x28>
 800741a:	f04f 32ff 	mov.w	r2, #4294967295
 800741e:	e7f7      	b.n	8007410 <__mcmp+0x28>

08007420 <__mdiff>:
 8007420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	460c      	mov	r4, r1
 8007426:	4606      	mov	r6, r0
 8007428:	4611      	mov	r1, r2
 800742a:	4620      	mov	r0, r4
 800742c:	4617      	mov	r7, r2
 800742e:	f7ff ffdb 	bl	80073e8 <__mcmp>
 8007432:	1e05      	subs	r5, r0, #0
 8007434:	d110      	bne.n	8007458 <__mdiff+0x38>
 8007436:	4629      	mov	r1, r5
 8007438:	4630      	mov	r0, r6
 800743a:	f7ff fd57 	bl	8006eec <_Balloc>
 800743e:	b930      	cbnz	r0, 800744e <__mdiff+0x2e>
 8007440:	4b39      	ldr	r3, [pc, #228]	; (8007528 <__mdiff+0x108>)
 8007442:	4602      	mov	r2, r0
 8007444:	f240 2132 	movw	r1, #562	; 0x232
 8007448:	4838      	ldr	r0, [pc, #224]	; (800752c <__mdiff+0x10c>)
 800744a:	f000 faf3 	bl	8007a34 <__assert_func>
 800744e:	2301      	movs	r3, #1
 8007450:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007458:	bfa4      	itt	ge
 800745a:	463b      	movge	r3, r7
 800745c:	4627      	movge	r7, r4
 800745e:	4630      	mov	r0, r6
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	bfa6      	itte	ge
 8007464:	461c      	movge	r4, r3
 8007466:	2500      	movge	r5, #0
 8007468:	2501      	movlt	r5, #1
 800746a:	f7ff fd3f 	bl	8006eec <_Balloc>
 800746e:	b920      	cbnz	r0, 800747a <__mdiff+0x5a>
 8007470:	4b2d      	ldr	r3, [pc, #180]	; (8007528 <__mdiff+0x108>)
 8007472:	4602      	mov	r2, r0
 8007474:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007478:	e7e6      	b.n	8007448 <__mdiff+0x28>
 800747a:	693e      	ldr	r6, [r7, #16]
 800747c:	60c5      	str	r5, [r0, #12]
 800747e:	6925      	ldr	r5, [r4, #16]
 8007480:	f107 0114 	add.w	r1, r7, #20
 8007484:	f104 0914 	add.w	r9, r4, #20
 8007488:	f100 0e14 	add.w	lr, r0, #20
 800748c:	f107 0210 	add.w	r2, r7, #16
 8007490:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007494:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007498:	46f2      	mov	sl, lr
 800749a:	2700      	movs	r7, #0
 800749c:	f859 3b04 	ldr.w	r3, [r9], #4
 80074a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074a4:	fa1f f883 	uxth.w	r8, r3
 80074a8:	fa17 f78b 	uxtah	r7, r7, fp
 80074ac:	0c1b      	lsrs	r3, r3, #16
 80074ae:	eba7 0808 	sub.w	r8, r7, r8
 80074b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80074ba:	fa1f f888 	uxth.w	r8, r8
 80074be:	141f      	asrs	r7, r3, #16
 80074c0:	454d      	cmp	r5, r9
 80074c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074c6:	f84a 3b04 	str.w	r3, [sl], #4
 80074ca:	d8e7      	bhi.n	800749c <__mdiff+0x7c>
 80074cc:	1b2b      	subs	r3, r5, r4
 80074ce:	3b15      	subs	r3, #21
 80074d0:	f023 0303 	bic.w	r3, r3, #3
 80074d4:	3304      	adds	r3, #4
 80074d6:	3415      	adds	r4, #21
 80074d8:	42a5      	cmp	r5, r4
 80074da:	bf38      	it	cc
 80074dc:	2304      	movcc	r3, #4
 80074de:	4419      	add	r1, r3
 80074e0:	4473      	add	r3, lr
 80074e2:	469e      	mov	lr, r3
 80074e4:	460d      	mov	r5, r1
 80074e6:	4565      	cmp	r5, ip
 80074e8:	d30e      	bcc.n	8007508 <__mdiff+0xe8>
 80074ea:	f10c 0203 	add.w	r2, ip, #3
 80074ee:	1a52      	subs	r2, r2, r1
 80074f0:	f022 0203 	bic.w	r2, r2, #3
 80074f4:	3903      	subs	r1, #3
 80074f6:	458c      	cmp	ip, r1
 80074f8:	bf38      	it	cc
 80074fa:	2200      	movcc	r2, #0
 80074fc:	441a      	add	r2, r3
 80074fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007502:	b17b      	cbz	r3, 8007524 <__mdiff+0x104>
 8007504:	6106      	str	r6, [r0, #16]
 8007506:	e7a5      	b.n	8007454 <__mdiff+0x34>
 8007508:	f855 8b04 	ldr.w	r8, [r5], #4
 800750c:	fa17 f488 	uxtah	r4, r7, r8
 8007510:	1422      	asrs	r2, r4, #16
 8007512:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007516:	b2a4      	uxth	r4, r4
 8007518:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800751c:	f84e 4b04 	str.w	r4, [lr], #4
 8007520:	1417      	asrs	r7, r2, #16
 8007522:	e7e0      	b.n	80074e6 <__mdiff+0xc6>
 8007524:	3e01      	subs	r6, #1
 8007526:	e7ea      	b.n	80074fe <__mdiff+0xde>
 8007528:	08008f37 	.word	0x08008f37
 800752c:	08008f48 	.word	0x08008f48

08007530 <__d2b>:
 8007530:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007534:	4689      	mov	r9, r1
 8007536:	2101      	movs	r1, #1
 8007538:	ec57 6b10 	vmov	r6, r7, d0
 800753c:	4690      	mov	r8, r2
 800753e:	f7ff fcd5 	bl	8006eec <_Balloc>
 8007542:	4604      	mov	r4, r0
 8007544:	b930      	cbnz	r0, 8007554 <__d2b+0x24>
 8007546:	4602      	mov	r2, r0
 8007548:	4b25      	ldr	r3, [pc, #148]	; (80075e0 <__d2b+0xb0>)
 800754a:	4826      	ldr	r0, [pc, #152]	; (80075e4 <__d2b+0xb4>)
 800754c:	f240 310a 	movw	r1, #778	; 0x30a
 8007550:	f000 fa70 	bl	8007a34 <__assert_func>
 8007554:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800755c:	bb35      	cbnz	r5, 80075ac <__d2b+0x7c>
 800755e:	2e00      	cmp	r6, #0
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	d028      	beq.n	80075b6 <__d2b+0x86>
 8007564:	4668      	mov	r0, sp
 8007566:	9600      	str	r6, [sp, #0]
 8007568:	f7ff fd8c 	bl	8007084 <__lo0bits>
 800756c:	9900      	ldr	r1, [sp, #0]
 800756e:	b300      	cbz	r0, 80075b2 <__d2b+0x82>
 8007570:	9a01      	ldr	r2, [sp, #4]
 8007572:	f1c0 0320 	rsb	r3, r0, #32
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	430b      	orrs	r3, r1
 800757c:	40c2      	lsrs	r2, r0
 800757e:	6163      	str	r3, [r4, #20]
 8007580:	9201      	str	r2, [sp, #4]
 8007582:	9b01      	ldr	r3, [sp, #4]
 8007584:	61a3      	str	r3, [r4, #24]
 8007586:	2b00      	cmp	r3, #0
 8007588:	bf14      	ite	ne
 800758a:	2202      	movne	r2, #2
 800758c:	2201      	moveq	r2, #1
 800758e:	6122      	str	r2, [r4, #16]
 8007590:	b1d5      	cbz	r5, 80075c8 <__d2b+0x98>
 8007592:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007596:	4405      	add	r5, r0
 8007598:	f8c9 5000 	str.w	r5, [r9]
 800759c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075a0:	f8c8 0000 	str.w	r0, [r8]
 80075a4:	4620      	mov	r0, r4
 80075a6:	b003      	add	sp, #12
 80075a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075b0:	e7d5      	b.n	800755e <__d2b+0x2e>
 80075b2:	6161      	str	r1, [r4, #20]
 80075b4:	e7e5      	b.n	8007582 <__d2b+0x52>
 80075b6:	a801      	add	r0, sp, #4
 80075b8:	f7ff fd64 	bl	8007084 <__lo0bits>
 80075bc:	9b01      	ldr	r3, [sp, #4]
 80075be:	6163      	str	r3, [r4, #20]
 80075c0:	2201      	movs	r2, #1
 80075c2:	6122      	str	r2, [r4, #16]
 80075c4:	3020      	adds	r0, #32
 80075c6:	e7e3      	b.n	8007590 <__d2b+0x60>
 80075c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075d0:	f8c9 0000 	str.w	r0, [r9]
 80075d4:	6918      	ldr	r0, [r3, #16]
 80075d6:	f7ff fd35 	bl	8007044 <__hi0bits>
 80075da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075de:	e7df      	b.n	80075a0 <__d2b+0x70>
 80075e0:	08008f37 	.word	0x08008f37
 80075e4:	08008f48 	.word	0x08008f48

080075e8 <_calloc_r>:
 80075e8:	b513      	push	{r0, r1, r4, lr}
 80075ea:	434a      	muls	r2, r1
 80075ec:	4611      	mov	r1, r2
 80075ee:	9201      	str	r2, [sp, #4]
 80075f0:	f000 f85a 	bl	80076a8 <_malloc_r>
 80075f4:	4604      	mov	r4, r0
 80075f6:	b118      	cbz	r0, 8007600 <_calloc_r+0x18>
 80075f8:	9a01      	ldr	r2, [sp, #4]
 80075fa:	2100      	movs	r1, #0
 80075fc:	f7fe f952 	bl	80058a4 <memset>
 8007600:	4620      	mov	r0, r4
 8007602:	b002      	add	sp, #8
 8007604:	bd10      	pop	{r4, pc}
	...

08007608 <_free_r>:
 8007608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800760a:	2900      	cmp	r1, #0
 800760c:	d048      	beq.n	80076a0 <_free_r+0x98>
 800760e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007612:	9001      	str	r0, [sp, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f1a1 0404 	sub.w	r4, r1, #4
 800761a:	bfb8      	it	lt
 800761c:	18e4      	addlt	r4, r4, r3
 800761e:	f000 fa65 	bl	8007aec <__malloc_lock>
 8007622:	4a20      	ldr	r2, [pc, #128]	; (80076a4 <_free_r+0x9c>)
 8007624:	9801      	ldr	r0, [sp, #4]
 8007626:	6813      	ldr	r3, [r2, #0]
 8007628:	4615      	mov	r5, r2
 800762a:	b933      	cbnz	r3, 800763a <_free_r+0x32>
 800762c:	6063      	str	r3, [r4, #4]
 800762e:	6014      	str	r4, [r2, #0]
 8007630:	b003      	add	sp, #12
 8007632:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007636:	f000 ba5f 	b.w	8007af8 <__malloc_unlock>
 800763a:	42a3      	cmp	r3, r4
 800763c:	d90b      	bls.n	8007656 <_free_r+0x4e>
 800763e:	6821      	ldr	r1, [r4, #0]
 8007640:	1862      	adds	r2, r4, r1
 8007642:	4293      	cmp	r3, r2
 8007644:	bf04      	itt	eq
 8007646:	681a      	ldreq	r2, [r3, #0]
 8007648:	685b      	ldreq	r3, [r3, #4]
 800764a:	6063      	str	r3, [r4, #4]
 800764c:	bf04      	itt	eq
 800764e:	1852      	addeq	r2, r2, r1
 8007650:	6022      	streq	r2, [r4, #0]
 8007652:	602c      	str	r4, [r5, #0]
 8007654:	e7ec      	b.n	8007630 <_free_r+0x28>
 8007656:	461a      	mov	r2, r3
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	b10b      	cbz	r3, 8007660 <_free_r+0x58>
 800765c:	42a3      	cmp	r3, r4
 800765e:	d9fa      	bls.n	8007656 <_free_r+0x4e>
 8007660:	6811      	ldr	r1, [r2, #0]
 8007662:	1855      	adds	r5, r2, r1
 8007664:	42a5      	cmp	r5, r4
 8007666:	d10b      	bne.n	8007680 <_free_r+0x78>
 8007668:	6824      	ldr	r4, [r4, #0]
 800766a:	4421      	add	r1, r4
 800766c:	1854      	adds	r4, r2, r1
 800766e:	42a3      	cmp	r3, r4
 8007670:	6011      	str	r1, [r2, #0]
 8007672:	d1dd      	bne.n	8007630 <_free_r+0x28>
 8007674:	681c      	ldr	r4, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	6053      	str	r3, [r2, #4]
 800767a:	4421      	add	r1, r4
 800767c:	6011      	str	r1, [r2, #0]
 800767e:	e7d7      	b.n	8007630 <_free_r+0x28>
 8007680:	d902      	bls.n	8007688 <_free_r+0x80>
 8007682:	230c      	movs	r3, #12
 8007684:	6003      	str	r3, [r0, #0]
 8007686:	e7d3      	b.n	8007630 <_free_r+0x28>
 8007688:	6825      	ldr	r5, [r4, #0]
 800768a:	1961      	adds	r1, r4, r5
 800768c:	428b      	cmp	r3, r1
 800768e:	bf04      	itt	eq
 8007690:	6819      	ldreq	r1, [r3, #0]
 8007692:	685b      	ldreq	r3, [r3, #4]
 8007694:	6063      	str	r3, [r4, #4]
 8007696:	bf04      	itt	eq
 8007698:	1949      	addeq	r1, r1, r5
 800769a:	6021      	streq	r1, [r4, #0]
 800769c:	6054      	str	r4, [r2, #4]
 800769e:	e7c7      	b.n	8007630 <_free_r+0x28>
 80076a0:	b003      	add	sp, #12
 80076a2:	bd30      	pop	{r4, r5, pc}
 80076a4:	2000021c 	.word	0x2000021c

080076a8 <_malloc_r>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	1ccd      	adds	r5, r1, #3
 80076ac:	f025 0503 	bic.w	r5, r5, #3
 80076b0:	3508      	adds	r5, #8
 80076b2:	2d0c      	cmp	r5, #12
 80076b4:	bf38      	it	cc
 80076b6:	250c      	movcc	r5, #12
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	4606      	mov	r6, r0
 80076bc:	db01      	blt.n	80076c2 <_malloc_r+0x1a>
 80076be:	42a9      	cmp	r1, r5
 80076c0:	d903      	bls.n	80076ca <_malloc_r+0x22>
 80076c2:	230c      	movs	r3, #12
 80076c4:	6033      	str	r3, [r6, #0]
 80076c6:	2000      	movs	r0, #0
 80076c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ca:	f000 fa0f 	bl	8007aec <__malloc_lock>
 80076ce:	4921      	ldr	r1, [pc, #132]	; (8007754 <_malloc_r+0xac>)
 80076d0:	680a      	ldr	r2, [r1, #0]
 80076d2:	4614      	mov	r4, r2
 80076d4:	b99c      	cbnz	r4, 80076fe <_malloc_r+0x56>
 80076d6:	4f20      	ldr	r7, [pc, #128]	; (8007758 <_malloc_r+0xb0>)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	b923      	cbnz	r3, 80076e6 <_malloc_r+0x3e>
 80076dc:	4621      	mov	r1, r4
 80076de:	4630      	mov	r0, r6
 80076e0:	f000 f998 	bl	8007a14 <_sbrk_r>
 80076e4:	6038      	str	r0, [r7, #0]
 80076e6:	4629      	mov	r1, r5
 80076e8:	4630      	mov	r0, r6
 80076ea:	f000 f993 	bl	8007a14 <_sbrk_r>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d123      	bne.n	800773a <_malloc_r+0x92>
 80076f2:	230c      	movs	r3, #12
 80076f4:	6033      	str	r3, [r6, #0]
 80076f6:	4630      	mov	r0, r6
 80076f8:	f000 f9fe 	bl	8007af8 <__malloc_unlock>
 80076fc:	e7e3      	b.n	80076c6 <_malloc_r+0x1e>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	1b5b      	subs	r3, r3, r5
 8007702:	d417      	bmi.n	8007734 <_malloc_r+0x8c>
 8007704:	2b0b      	cmp	r3, #11
 8007706:	d903      	bls.n	8007710 <_malloc_r+0x68>
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	441c      	add	r4, r3
 800770c:	6025      	str	r5, [r4, #0]
 800770e:	e004      	b.n	800771a <_malloc_r+0x72>
 8007710:	6863      	ldr	r3, [r4, #4]
 8007712:	42a2      	cmp	r2, r4
 8007714:	bf0c      	ite	eq
 8007716:	600b      	streq	r3, [r1, #0]
 8007718:	6053      	strne	r3, [r2, #4]
 800771a:	4630      	mov	r0, r6
 800771c:	f000 f9ec 	bl	8007af8 <__malloc_unlock>
 8007720:	f104 000b 	add.w	r0, r4, #11
 8007724:	1d23      	adds	r3, r4, #4
 8007726:	f020 0007 	bic.w	r0, r0, #7
 800772a:	1ac2      	subs	r2, r0, r3
 800772c:	d0cc      	beq.n	80076c8 <_malloc_r+0x20>
 800772e:	1a1b      	subs	r3, r3, r0
 8007730:	50a3      	str	r3, [r4, r2]
 8007732:	e7c9      	b.n	80076c8 <_malloc_r+0x20>
 8007734:	4622      	mov	r2, r4
 8007736:	6864      	ldr	r4, [r4, #4]
 8007738:	e7cc      	b.n	80076d4 <_malloc_r+0x2c>
 800773a:	1cc4      	adds	r4, r0, #3
 800773c:	f024 0403 	bic.w	r4, r4, #3
 8007740:	42a0      	cmp	r0, r4
 8007742:	d0e3      	beq.n	800770c <_malloc_r+0x64>
 8007744:	1a21      	subs	r1, r4, r0
 8007746:	4630      	mov	r0, r6
 8007748:	f000 f964 	bl	8007a14 <_sbrk_r>
 800774c:	3001      	adds	r0, #1
 800774e:	d1dd      	bne.n	800770c <_malloc_r+0x64>
 8007750:	e7cf      	b.n	80076f2 <_malloc_r+0x4a>
 8007752:	bf00      	nop
 8007754:	2000021c 	.word	0x2000021c
 8007758:	20000220 	.word	0x20000220

0800775c <__ssputs_r>:
 800775c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	688e      	ldr	r6, [r1, #8]
 8007762:	429e      	cmp	r6, r3
 8007764:	4682      	mov	sl, r0
 8007766:	460c      	mov	r4, r1
 8007768:	4690      	mov	r8, r2
 800776a:	461f      	mov	r7, r3
 800776c:	d838      	bhi.n	80077e0 <__ssputs_r+0x84>
 800776e:	898a      	ldrh	r2, [r1, #12]
 8007770:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007774:	d032      	beq.n	80077dc <__ssputs_r+0x80>
 8007776:	6825      	ldr	r5, [r4, #0]
 8007778:	6909      	ldr	r1, [r1, #16]
 800777a:	eba5 0901 	sub.w	r9, r5, r1
 800777e:	6965      	ldr	r5, [r4, #20]
 8007780:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007784:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007788:	3301      	adds	r3, #1
 800778a:	444b      	add	r3, r9
 800778c:	106d      	asrs	r5, r5, #1
 800778e:	429d      	cmp	r5, r3
 8007790:	bf38      	it	cc
 8007792:	461d      	movcc	r5, r3
 8007794:	0553      	lsls	r3, r2, #21
 8007796:	d531      	bpl.n	80077fc <__ssputs_r+0xa0>
 8007798:	4629      	mov	r1, r5
 800779a:	f7ff ff85 	bl	80076a8 <_malloc_r>
 800779e:	4606      	mov	r6, r0
 80077a0:	b950      	cbnz	r0, 80077b8 <__ssputs_r+0x5c>
 80077a2:	230c      	movs	r3, #12
 80077a4:	f8ca 3000 	str.w	r3, [sl]
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ae:	81a3      	strh	r3, [r4, #12]
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295
 80077b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b8:	6921      	ldr	r1, [r4, #16]
 80077ba:	464a      	mov	r2, r9
 80077bc:	f7ff fb88 	bl	8006ed0 <memcpy>
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ca:	81a3      	strh	r3, [r4, #12]
 80077cc:	6126      	str	r6, [r4, #16]
 80077ce:	6165      	str	r5, [r4, #20]
 80077d0:	444e      	add	r6, r9
 80077d2:	eba5 0509 	sub.w	r5, r5, r9
 80077d6:	6026      	str	r6, [r4, #0]
 80077d8:	60a5      	str	r5, [r4, #8]
 80077da:	463e      	mov	r6, r7
 80077dc:	42be      	cmp	r6, r7
 80077de:	d900      	bls.n	80077e2 <__ssputs_r+0x86>
 80077e0:	463e      	mov	r6, r7
 80077e2:	4632      	mov	r2, r6
 80077e4:	6820      	ldr	r0, [r4, #0]
 80077e6:	4641      	mov	r1, r8
 80077e8:	f000 f966 	bl	8007ab8 <memmove>
 80077ec:	68a3      	ldr	r3, [r4, #8]
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	1b9b      	subs	r3, r3, r6
 80077f2:	4432      	add	r2, r6
 80077f4:	60a3      	str	r3, [r4, #8]
 80077f6:	6022      	str	r2, [r4, #0]
 80077f8:	2000      	movs	r0, #0
 80077fa:	e7db      	b.n	80077b4 <__ssputs_r+0x58>
 80077fc:	462a      	mov	r2, r5
 80077fe:	f000 f981 	bl	8007b04 <_realloc_r>
 8007802:	4606      	mov	r6, r0
 8007804:	2800      	cmp	r0, #0
 8007806:	d1e1      	bne.n	80077cc <__ssputs_r+0x70>
 8007808:	6921      	ldr	r1, [r4, #16]
 800780a:	4650      	mov	r0, sl
 800780c:	f7ff fefc 	bl	8007608 <_free_r>
 8007810:	e7c7      	b.n	80077a2 <__ssputs_r+0x46>
	...

08007814 <_svfiprintf_r>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	4698      	mov	r8, r3
 800781a:	898b      	ldrh	r3, [r1, #12]
 800781c:	061b      	lsls	r3, r3, #24
 800781e:	b09d      	sub	sp, #116	; 0x74
 8007820:	4607      	mov	r7, r0
 8007822:	460d      	mov	r5, r1
 8007824:	4614      	mov	r4, r2
 8007826:	d50e      	bpl.n	8007846 <_svfiprintf_r+0x32>
 8007828:	690b      	ldr	r3, [r1, #16]
 800782a:	b963      	cbnz	r3, 8007846 <_svfiprintf_r+0x32>
 800782c:	2140      	movs	r1, #64	; 0x40
 800782e:	f7ff ff3b 	bl	80076a8 <_malloc_r>
 8007832:	6028      	str	r0, [r5, #0]
 8007834:	6128      	str	r0, [r5, #16]
 8007836:	b920      	cbnz	r0, 8007842 <_svfiprintf_r+0x2e>
 8007838:	230c      	movs	r3, #12
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	e0d1      	b.n	80079e6 <_svfiprintf_r+0x1d2>
 8007842:	2340      	movs	r3, #64	; 0x40
 8007844:	616b      	str	r3, [r5, #20]
 8007846:	2300      	movs	r3, #0
 8007848:	9309      	str	r3, [sp, #36]	; 0x24
 800784a:	2320      	movs	r3, #32
 800784c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007850:	f8cd 800c 	str.w	r8, [sp, #12]
 8007854:	2330      	movs	r3, #48	; 0x30
 8007856:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a00 <_svfiprintf_r+0x1ec>
 800785a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800785e:	f04f 0901 	mov.w	r9, #1
 8007862:	4623      	mov	r3, r4
 8007864:	469a      	mov	sl, r3
 8007866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800786a:	b10a      	cbz	r2, 8007870 <_svfiprintf_r+0x5c>
 800786c:	2a25      	cmp	r2, #37	; 0x25
 800786e:	d1f9      	bne.n	8007864 <_svfiprintf_r+0x50>
 8007870:	ebba 0b04 	subs.w	fp, sl, r4
 8007874:	d00b      	beq.n	800788e <_svfiprintf_r+0x7a>
 8007876:	465b      	mov	r3, fp
 8007878:	4622      	mov	r2, r4
 800787a:	4629      	mov	r1, r5
 800787c:	4638      	mov	r0, r7
 800787e:	f7ff ff6d 	bl	800775c <__ssputs_r>
 8007882:	3001      	adds	r0, #1
 8007884:	f000 80aa 	beq.w	80079dc <_svfiprintf_r+0x1c8>
 8007888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800788a:	445a      	add	r2, fp
 800788c:	9209      	str	r2, [sp, #36]	; 0x24
 800788e:	f89a 3000 	ldrb.w	r3, [sl]
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 80a2 	beq.w	80079dc <_svfiprintf_r+0x1c8>
 8007898:	2300      	movs	r3, #0
 800789a:	f04f 32ff 	mov.w	r2, #4294967295
 800789e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078a2:	f10a 0a01 	add.w	sl, sl, #1
 80078a6:	9304      	str	r3, [sp, #16]
 80078a8:	9307      	str	r3, [sp, #28]
 80078aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ae:	931a      	str	r3, [sp, #104]	; 0x68
 80078b0:	4654      	mov	r4, sl
 80078b2:	2205      	movs	r2, #5
 80078b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b8:	4851      	ldr	r0, [pc, #324]	; (8007a00 <_svfiprintf_r+0x1ec>)
 80078ba:	f7f8 fc91 	bl	80001e0 <memchr>
 80078be:	9a04      	ldr	r2, [sp, #16]
 80078c0:	b9d8      	cbnz	r0, 80078fa <_svfiprintf_r+0xe6>
 80078c2:	06d0      	lsls	r0, r2, #27
 80078c4:	bf44      	itt	mi
 80078c6:	2320      	movmi	r3, #32
 80078c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078cc:	0711      	lsls	r1, r2, #28
 80078ce:	bf44      	itt	mi
 80078d0:	232b      	movmi	r3, #43	; 0x2b
 80078d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078d6:	f89a 3000 	ldrb.w	r3, [sl]
 80078da:	2b2a      	cmp	r3, #42	; 0x2a
 80078dc:	d015      	beq.n	800790a <_svfiprintf_r+0xf6>
 80078de:	9a07      	ldr	r2, [sp, #28]
 80078e0:	4654      	mov	r4, sl
 80078e2:	2000      	movs	r0, #0
 80078e4:	f04f 0c0a 	mov.w	ip, #10
 80078e8:	4621      	mov	r1, r4
 80078ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078ee:	3b30      	subs	r3, #48	; 0x30
 80078f0:	2b09      	cmp	r3, #9
 80078f2:	d94e      	bls.n	8007992 <_svfiprintf_r+0x17e>
 80078f4:	b1b0      	cbz	r0, 8007924 <_svfiprintf_r+0x110>
 80078f6:	9207      	str	r2, [sp, #28]
 80078f8:	e014      	b.n	8007924 <_svfiprintf_r+0x110>
 80078fa:	eba0 0308 	sub.w	r3, r0, r8
 80078fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007902:	4313      	orrs	r3, r2
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	46a2      	mov	sl, r4
 8007908:	e7d2      	b.n	80078b0 <_svfiprintf_r+0x9c>
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	1d19      	adds	r1, r3, #4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	9103      	str	r1, [sp, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	bfbb      	ittet	lt
 8007916:	425b      	neglt	r3, r3
 8007918:	f042 0202 	orrlt.w	r2, r2, #2
 800791c:	9307      	strge	r3, [sp, #28]
 800791e:	9307      	strlt	r3, [sp, #28]
 8007920:	bfb8      	it	lt
 8007922:	9204      	strlt	r2, [sp, #16]
 8007924:	7823      	ldrb	r3, [r4, #0]
 8007926:	2b2e      	cmp	r3, #46	; 0x2e
 8007928:	d10c      	bne.n	8007944 <_svfiprintf_r+0x130>
 800792a:	7863      	ldrb	r3, [r4, #1]
 800792c:	2b2a      	cmp	r3, #42	; 0x2a
 800792e:	d135      	bne.n	800799c <_svfiprintf_r+0x188>
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	1d1a      	adds	r2, r3, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	9203      	str	r2, [sp, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	bfb8      	it	lt
 800793c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007940:	3402      	adds	r4, #2
 8007942:	9305      	str	r3, [sp, #20]
 8007944:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a10 <_svfiprintf_r+0x1fc>
 8007948:	7821      	ldrb	r1, [r4, #0]
 800794a:	2203      	movs	r2, #3
 800794c:	4650      	mov	r0, sl
 800794e:	f7f8 fc47 	bl	80001e0 <memchr>
 8007952:	b140      	cbz	r0, 8007966 <_svfiprintf_r+0x152>
 8007954:	2340      	movs	r3, #64	; 0x40
 8007956:	eba0 000a 	sub.w	r0, r0, sl
 800795a:	fa03 f000 	lsl.w	r0, r3, r0
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	4303      	orrs	r3, r0
 8007962:	3401      	adds	r4, #1
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796a:	4826      	ldr	r0, [pc, #152]	; (8007a04 <_svfiprintf_r+0x1f0>)
 800796c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007970:	2206      	movs	r2, #6
 8007972:	f7f8 fc35 	bl	80001e0 <memchr>
 8007976:	2800      	cmp	r0, #0
 8007978:	d038      	beq.n	80079ec <_svfiprintf_r+0x1d8>
 800797a:	4b23      	ldr	r3, [pc, #140]	; (8007a08 <_svfiprintf_r+0x1f4>)
 800797c:	bb1b      	cbnz	r3, 80079c6 <_svfiprintf_r+0x1b2>
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	3307      	adds	r3, #7
 8007982:	f023 0307 	bic.w	r3, r3, #7
 8007986:	3308      	adds	r3, #8
 8007988:	9303      	str	r3, [sp, #12]
 800798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798c:	4433      	add	r3, r6
 800798e:	9309      	str	r3, [sp, #36]	; 0x24
 8007990:	e767      	b.n	8007862 <_svfiprintf_r+0x4e>
 8007992:	fb0c 3202 	mla	r2, ip, r2, r3
 8007996:	460c      	mov	r4, r1
 8007998:	2001      	movs	r0, #1
 800799a:	e7a5      	b.n	80078e8 <_svfiprintf_r+0xd4>
 800799c:	2300      	movs	r3, #0
 800799e:	3401      	adds	r4, #1
 80079a0:	9305      	str	r3, [sp, #20]
 80079a2:	4619      	mov	r1, r3
 80079a4:	f04f 0c0a 	mov.w	ip, #10
 80079a8:	4620      	mov	r0, r4
 80079aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ae:	3a30      	subs	r2, #48	; 0x30
 80079b0:	2a09      	cmp	r2, #9
 80079b2:	d903      	bls.n	80079bc <_svfiprintf_r+0x1a8>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0c5      	beq.n	8007944 <_svfiprintf_r+0x130>
 80079b8:	9105      	str	r1, [sp, #20]
 80079ba:	e7c3      	b.n	8007944 <_svfiprintf_r+0x130>
 80079bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80079c0:	4604      	mov	r4, r0
 80079c2:	2301      	movs	r3, #1
 80079c4:	e7f0      	b.n	80079a8 <_svfiprintf_r+0x194>
 80079c6:	ab03      	add	r3, sp, #12
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	462a      	mov	r2, r5
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <_svfiprintf_r+0x1f8>)
 80079ce:	a904      	add	r1, sp, #16
 80079d0:	4638      	mov	r0, r7
 80079d2:	f7fe f80f 	bl	80059f4 <_printf_float>
 80079d6:	1c42      	adds	r2, r0, #1
 80079d8:	4606      	mov	r6, r0
 80079da:	d1d6      	bne.n	800798a <_svfiprintf_r+0x176>
 80079dc:	89ab      	ldrh	r3, [r5, #12]
 80079de:	065b      	lsls	r3, r3, #25
 80079e0:	f53f af2c 	bmi.w	800783c <_svfiprintf_r+0x28>
 80079e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079e6:	b01d      	add	sp, #116	; 0x74
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	ab03      	add	r3, sp, #12
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	462a      	mov	r2, r5
 80079f2:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <_svfiprintf_r+0x1f8>)
 80079f4:	a904      	add	r1, sp, #16
 80079f6:	4638      	mov	r0, r7
 80079f8:	f7fe faa0 	bl	8005f3c <_printf_i>
 80079fc:	e7eb      	b.n	80079d6 <_svfiprintf_r+0x1c2>
 80079fe:	bf00      	nop
 8007a00:	080090a4 	.word	0x080090a4
 8007a04:	080090ae 	.word	0x080090ae
 8007a08:	080059f5 	.word	0x080059f5
 8007a0c:	0800775d 	.word	0x0800775d
 8007a10:	080090aa 	.word	0x080090aa

08007a14 <_sbrk_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d06      	ldr	r5, [pc, #24]	; (8007a30 <_sbrk_r+0x1c>)
 8007a18:	2300      	movs	r3, #0
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	602b      	str	r3, [r5, #0]
 8007a20:	f7fa fe78 	bl	8002714 <_sbrk>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_sbrk_r+0x1a>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_sbrk_r+0x1a>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	200003f4 	.word	0x200003f4

08007a34 <__assert_func>:
 8007a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a36:	4614      	mov	r4, r2
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <__assert_func+0x2c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4605      	mov	r5, r0
 8007a40:	68d8      	ldr	r0, [r3, #12]
 8007a42:	b14c      	cbz	r4, 8007a58 <__assert_func+0x24>
 8007a44:	4b07      	ldr	r3, [pc, #28]	; (8007a64 <__assert_func+0x30>)
 8007a46:	9100      	str	r1, [sp, #0]
 8007a48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a4c:	4906      	ldr	r1, [pc, #24]	; (8007a68 <__assert_func+0x34>)
 8007a4e:	462b      	mov	r3, r5
 8007a50:	f000 f80e 	bl	8007a70 <fiprintf>
 8007a54:	f000 faa4 	bl	8007fa0 <abort>
 8007a58:	4b04      	ldr	r3, [pc, #16]	; (8007a6c <__assert_func+0x38>)
 8007a5a:	461c      	mov	r4, r3
 8007a5c:	e7f3      	b.n	8007a46 <__assert_func+0x12>
 8007a5e:	bf00      	nop
 8007a60:	2000001c 	.word	0x2000001c
 8007a64:	080090b5 	.word	0x080090b5
 8007a68:	080090c2 	.word	0x080090c2
 8007a6c:	080090f0 	.word	0x080090f0

08007a70 <fiprintf>:
 8007a70:	b40e      	push	{r1, r2, r3}
 8007a72:	b503      	push	{r0, r1, lr}
 8007a74:	4601      	mov	r1, r0
 8007a76:	ab03      	add	r3, sp, #12
 8007a78:	4805      	ldr	r0, [pc, #20]	; (8007a90 <fiprintf+0x20>)
 8007a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a7e:	6800      	ldr	r0, [r0, #0]
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	f000 f88f 	bl	8007ba4 <_vfiprintf_r>
 8007a86:	b002      	add	sp, #8
 8007a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a8c:	b003      	add	sp, #12
 8007a8e:	4770      	bx	lr
 8007a90:	2000001c 	.word	0x2000001c

08007a94 <__ascii_mbtowc>:
 8007a94:	b082      	sub	sp, #8
 8007a96:	b901      	cbnz	r1, 8007a9a <__ascii_mbtowc+0x6>
 8007a98:	a901      	add	r1, sp, #4
 8007a9a:	b142      	cbz	r2, 8007aae <__ascii_mbtowc+0x1a>
 8007a9c:	b14b      	cbz	r3, 8007ab2 <__ascii_mbtowc+0x1e>
 8007a9e:	7813      	ldrb	r3, [r2, #0]
 8007aa0:	600b      	str	r3, [r1, #0]
 8007aa2:	7812      	ldrb	r2, [r2, #0]
 8007aa4:	1e10      	subs	r0, r2, #0
 8007aa6:	bf18      	it	ne
 8007aa8:	2001      	movne	r0, #1
 8007aaa:	b002      	add	sp, #8
 8007aac:	4770      	bx	lr
 8007aae:	4610      	mov	r0, r2
 8007ab0:	e7fb      	b.n	8007aaa <__ascii_mbtowc+0x16>
 8007ab2:	f06f 0001 	mvn.w	r0, #1
 8007ab6:	e7f8      	b.n	8007aaa <__ascii_mbtowc+0x16>

08007ab8 <memmove>:
 8007ab8:	4288      	cmp	r0, r1
 8007aba:	b510      	push	{r4, lr}
 8007abc:	eb01 0402 	add.w	r4, r1, r2
 8007ac0:	d902      	bls.n	8007ac8 <memmove+0x10>
 8007ac2:	4284      	cmp	r4, r0
 8007ac4:	4623      	mov	r3, r4
 8007ac6:	d807      	bhi.n	8007ad8 <memmove+0x20>
 8007ac8:	1e43      	subs	r3, r0, #1
 8007aca:	42a1      	cmp	r1, r4
 8007acc:	d008      	beq.n	8007ae0 <memmove+0x28>
 8007ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ad6:	e7f8      	b.n	8007aca <memmove+0x12>
 8007ad8:	4402      	add	r2, r0
 8007ada:	4601      	mov	r1, r0
 8007adc:	428a      	cmp	r2, r1
 8007ade:	d100      	bne.n	8007ae2 <memmove+0x2a>
 8007ae0:	bd10      	pop	{r4, pc}
 8007ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aea:	e7f7      	b.n	8007adc <memmove+0x24>

08007aec <__malloc_lock>:
 8007aec:	4801      	ldr	r0, [pc, #4]	; (8007af4 <__malloc_lock+0x8>)
 8007aee:	f000 bc17 	b.w	8008320 <__retarget_lock_acquire_recursive>
 8007af2:	bf00      	nop
 8007af4:	200003fc 	.word	0x200003fc

08007af8 <__malloc_unlock>:
 8007af8:	4801      	ldr	r0, [pc, #4]	; (8007b00 <__malloc_unlock+0x8>)
 8007afa:	f000 bc12 	b.w	8008322 <__retarget_lock_release_recursive>
 8007afe:	bf00      	nop
 8007b00:	200003fc 	.word	0x200003fc

08007b04 <_realloc_r>:
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b06:	4607      	mov	r7, r0
 8007b08:	4614      	mov	r4, r2
 8007b0a:	460e      	mov	r6, r1
 8007b0c:	b921      	cbnz	r1, 8007b18 <_realloc_r+0x14>
 8007b0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b12:	4611      	mov	r1, r2
 8007b14:	f7ff bdc8 	b.w	80076a8 <_malloc_r>
 8007b18:	b922      	cbnz	r2, 8007b24 <_realloc_r+0x20>
 8007b1a:	f7ff fd75 	bl	8007608 <_free_r>
 8007b1e:	4625      	mov	r5, r4
 8007b20:	4628      	mov	r0, r5
 8007b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b24:	f000 fc62 	bl	80083ec <_malloc_usable_size_r>
 8007b28:	42a0      	cmp	r0, r4
 8007b2a:	d20f      	bcs.n	8007b4c <_realloc_r+0x48>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7ff fdba 	bl	80076a8 <_malloc_r>
 8007b34:	4605      	mov	r5, r0
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d0f2      	beq.n	8007b20 <_realloc_r+0x1c>
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	f7ff f9c7 	bl	8006ed0 <memcpy>
 8007b42:	4631      	mov	r1, r6
 8007b44:	4638      	mov	r0, r7
 8007b46:	f7ff fd5f 	bl	8007608 <_free_r>
 8007b4a:	e7e9      	b.n	8007b20 <_realloc_r+0x1c>
 8007b4c:	4635      	mov	r5, r6
 8007b4e:	e7e7      	b.n	8007b20 <_realloc_r+0x1c>

08007b50 <__sfputc_r>:
 8007b50:	6893      	ldr	r3, [r2, #8]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	b410      	push	{r4}
 8007b58:	6093      	str	r3, [r2, #8]
 8007b5a:	da08      	bge.n	8007b6e <__sfputc_r+0x1e>
 8007b5c:	6994      	ldr	r4, [r2, #24]
 8007b5e:	42a3      	cmp	r3, r4
 8007b60:	db01      	blt.n	8007b66 <__sfputc_r+0x16>
 8007b62:	290a      	cmp	r1, #10
 8007b64:	d103      	bne.n	8007b6e <__sfputc_r+0x1e>
 8007b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b6a:	f000 b94b 	b.w	8007e04 <__swbuf_r>
 8007b6e:	6813      	ldr	r3, [r2, #0]
 8007b70:	1c58      	adds	r0, r3, #1
 8007b72:	6010      	str	r0, [r2, #0]
 8007b74:	7019      	strb	r1, [r3, #0]
 8007b76:	4608      	mov	r0, r1
 8007b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <__sfputs_r>:
 8007b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b80:	4606      	mov	r6, r0
 8007b82:	460f      	mov	r7, r1
 8007b84:	4614      	mov	r4, r2
 8007b86:	18d5      	adds	r5, r2, r3
 8007b88:	42ac      	cmp	r4, r5
 8007b8a:	d101      	bne.n	8007b90 <__sfputs_r+0x12>
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	e007      	b.n	8007ba0 <__sfputs_r+0x22>
 8007b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b94:	463a      	mov	r2, r7
 8007b96:	4630      	mov	r0, r6
 8007b98:	f7ff ffda 	bl	8007b50 <__sfputc_r>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d1f3      	bne.n	8007b88 <__sfputs_r+0xa>
 8007ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ba4 <_vfiprintf_r>:
 8007ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	460d      	mov	r5, r1
 8007baa:	b09d      	sub	sp, #116	; 0x74
 8007bac:	4614      	mov	r4, r2
 8007bae:	4698      	mov	r8, r3
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	b118      	cbz	r0, 8007bbc <_vfiprintf_r+0x18>
 8007bb4:	6983      	ldr	r3, [r0, #24]
 8007bb6:	b90b      	cbnz	r3, 8007bbc <_vfiprintf_r+0x18>
 8007bb8:	f000 fb14 	bl	80081e4 <__sinit>
 8007bbc:	4b89      	ldr	r3, [pc, #548]	; (8007de4 <_vfiprintf_r+0x240>)
 8007bbe:	429d      	cmp	r5, r3
 8007bc0:	d11b      	bne.n	8007bfa <_vfiprintf_r+0x56>
 8007bc2:	6875      	ldr	r5, [r6, #4]
 8007bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bc6:	07d9      	lsls	r1, r3, #31
 8007bc8:	d405      	bmi.n	8007bd6 <_vfiprintf_r+0x32>
 8007bca:	89ab      	ldrh	r3, [r5, #12]
 8007bcc:	059a      	lsls	r2, r3, #22
 8007bce:	d402      	bmi.n	8007bd6 <_vfiprintf_r+0x32>
 8007bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bd2:	f000 fba5 	bl	8008320 <__retarget_lock_acquire_recursive>
 8007bd6:	89ab      	ldrh	r3, [r5, #12]
 8007bd8:	071b      	lsls	r3, r3, #28
 8007bda:	d501      	bpl.n	8007be0 <_vfiprintf_r+0x3c>
 8007bdc:	692b      	ldr	r3, [r5, #16]
 8007bde:	b9eb      	cbnz	r3, 8007c1c <_vfiprintf_r+0x78>
 8007be0:	4629      	mov	r1, r5
 8007be2:	4630      	mov	r0, r6
 8007be4:	f000 f96e 	bl	8007ec4 <__swsetup_r>
 8007be8:	b1c0      	cbz	r0, 8007c1c <_vfiprintf_r+0x78>
 8007bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bec:	07dc      	lsls	r4, r3, #31
 8007bee:	d50e      	bpl.n	8007c0e <_vfiprintf_r+0x6a>
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	b01d      	add	sp, #116	; 0x74
 8007bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfa:	4b7b      	ldr	r3, [pc, #492]	; (8007de8 <_vfiprintf_r+0x244>)
 8007bfc:	429d      	cmp	r5, r3
 8007bfe:	d101      	bne.n	8007c04 <_vfiprintf_r+0x60>
 8007c00:	68b5      	ldr	r5, [r6, #8]
 8007c02:	e7df      	b.n	8007bc4 <_vfiprintf_r+0x20>
 8007c04:	4b79      	ldr	r3, [pc, #484]	; (8007dec <_vfiprintf_r+0x248>)
 8007c06:	429d      	cmp	r5, r3
 8007c08:	bf08      	it	eq
 8007c0a:	68f5      	ldreq	r5, [r6, #12]
 8007c0c:	e7da      	b.n	8007bc4 <_vfiprintf_r+0x20>
 8007c0e:	89ab      	ldrh	r3, [r5, #12]
 8007c10:	0598      	lsls	r0, r3, #22
 8007c12:	d4ed      	bmi.n	8007bf0 <_vfiprintf_r+0x4c>
 8007c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c16:	f000 fb84 	bl	8008322 <__retarget_lock_release_recursive>
 8007c1a:	e7e9      	b.n	8007bf0 <_vfiprintf_r+0x4c>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c20:	2320      	movs	r3, #32
 8007c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c2a:	2330      	movs	r3, #48	; 0x30
 8007c2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007df0 <_vfiprintf_r+0x24c>
 8007c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c34:	f04f 0901 	mov.w	r9, #1
 8007c38:	4623      	mov	r3, r4
 8007c3a:	469a      	mov	sl, r3
 8007c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c40:	b10a      	cbz	r2, 8007c46 <_vfiprintf_r+0xa2>
 8007c42:	2a25      	cmp	r2, #37	; 0x25
 8007c44:	d1f9      	bne.n	8007c3a <_vfiprintf_r+0x96>
 8007c46:	ebba 0b04 	subs.w	fp, sl, r4
 8007c4a:	d00b      	beq.n	8007c64 <_vfiprintf_r+0xc0>
 8007c4c:	465b      	mov	r3, fp
 8007c4e:	4622      	mov	r2, r4
 8007c50:	4629      	mov	r1, r5
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7ff ff93 	bl	8007b7e <__sfputs_r>
 8007c58:	3001      	adds	r0, #1
 8007c5a:	f000 80aa 	beq.w	8007db2 <_vfiprintf_r+0x20e>
 8007c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c60:	445a      	add	r2, fp
 8007c62:	9209      	str	r2, [sp, #36]	; 0x24
 8007c64:	f89a 3000 	ldrb.w	r3, [sl]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80a2 	beq.w	8007db2 <_vfiprintf_r+0x20e>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f04f 32ff 	mov.w	r2, #4294967295
 8007c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c78:	f10a 0a01 	add.w	sl, sl, #1
 8007c7c:	9304      	str	r3, [sp, #16]
 8007c7e:	9307      	str	r3, [sp, #28]
 8007c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c84:	931a      	str	r3, [sp, #104]	; 0x68
 8007c86:	4654      	mov	r4, sl
 8007c88:	2205      	movs	r2, #5
 8007c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8e:	4858      	ldr	r0, [pc, #352]	; (8007df0 <_vfiprintf_r+0x24c>)
 8007c90:	f7f8 faa6 	bl	80001e0 <memchr>
 8007c94:	9a04      	ldr	r2, [sp, #16]
 8007c96:	b9d8      	cbnz	r0, 8007cd0 <_vfiprintf_r+0x12c>
 8007c98:	06d1      	lsls	r1, r2, #27
 8007c9a:	bf44      	itt	mi
 8007c9c:	2320      	movmi	r3, #32
 8007c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ca2:	0713      	lsls	r3, r2, #28
 8007ca4:	bf44      	itt	mi
 8007ca6:	232b      	movmi	r3, #43	; 0x2b
 8007ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cac:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb2:	d015      	beq.n	8007ce0 <_vfiprintf_r+0x13c>
 8007cb4:	9a07      	ldr	r2, [sp, #28]
 8007cb6:	4654      	mov	r4, sl
 8007cb8:	2000      	movs	r0, #0
 8007cba:	f04f 0c0a 	mov.w	ip, #10
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc4:	3b30      	subs	r3, #48	; 0x30
 8007cc6:	2b09      	cmp	r3, #9
 8007cc8:	d94e      	bls.n	8007d68 <_vfiprintf_r+0x1c4>
 8007cca:	b1b0      	cbz	r0, 8007cfa <_vfiprintf_r+0x156>
 8007ccc:	9207      	str	r2, [sp, #28]
 8007cce:	e014      	b.n	8007cfa <_vfiprintf_r+0x156>
 8007cd0:	eba0 0308 	sub.w	r3, r0, r8
 8007cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	46a2      	mov	sl, r4
 8007cde:	e7d2      	b.n	8007c86 <_vfiprintf_r+0xe2>
 8007ce0:	9b03      	ldr	r3, [sp, #12]
 8007ce2:	1d19      	adds	r1, r3, #4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	9103      	str	r1, [sp, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	bfbb      	ittet	lt
 8007cec:	425b      	neglt	r3, r3
 8007cee:	f042 0202 	orrlt.w	r2, r2, #2
 8007cf2:	9307      	strge	r3, [sp, #28]
 8007cf4:	9307      	strlt	r3, [sp, #28]
 8007cf6:	bfb8      	it	lt
 8007cf8:	9204      	strlt	r2, [sp, #16]
 8007cfa:	7823      	ldrb	r3, [r4, #0]
 8007cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8007cfe:	d10c      	bne.n	8007d1a <_vfiprintf_r+0x176>
 8007d00:	7863      	ldrb	r3, [r4, #1]
 8007d02:	2b2a      	cmp	r3, #42	; 0x2a
 8007d04:	d135      	bne.n	8007d72 <_vfiprintf_r+0x1ce>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	1d1a      	adds	r2, r3, #4
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	9203      	str	r2, [sp, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bfb8      	it	lt
 8007d12:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d16:	3402      	adds	r4, #2
 8007d18:	9305      	str	r3, [sp, #20]
 8007d1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e00 <_vfiprintf_r+0x25c>
 8007d1e:	7821      	ldrb	r1, [r4, #0]
 8007d20:	2203      	movs	r2, #3
 8007d22:	4650      	mov	r0, sl
 8007d24:	f7f8 fa5c 	bl	80001e0 <memchr>
 8007d28:	b140      	cbz	r0, 8007d3c <_vfiprintf_r+0x198>
 8007d2a:	2340      	movs	r3, #64	; 0x40
 8007d2c:	eba0 000a 	sub.w	r0, r0, sl
 8007d30:	fa03 f000 	lsl.w	r0, r3, r0
 8007d34:	9b04      	ldr	r3, [sp, #16]
 8007d36:	4303      	orrs	r3, r0
 8007d38:	3401      	adds	r4, #1
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d40:	482c      	ldr	r0, [pc, #176]	; (8007df4 <_vfiprintf_r+0x250>)
 8007d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d46:	2206      	movs	r2, #6
 8007d48:	f7f8 fa4a 	bl	80001e0 <memchr>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d03f      	beq.n	8007dd0 <_vfiprintf_r+0x22c>
 8007d50:	4b29      	ldr	r3, [pc, #164]	; (8007df8 <_vfiprintf_r+0x254>)
 8007d52:	bb1b      	cbnz	r3, 8007d9c <_vfiprintf_r+0x1f8>
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	3307      	adds	r3, #7
 8007d58:	f023 0307 	bic.w	r3, r3, #7
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	9303      	str	r3, [sp, #12]
 8007d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d62:	443b      	add	r3, r7
 8007d64:	9309      	str	r3, [sp, #36]	; 0x24
 8007d66:	e767      	b.n	8007c38 <_vfiprintf_r+0x94>
 8007d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	2001      	movs	r0, #1
 8007d70:	e7a5      	b.n	8007cbe <_vfiprintf_r+0x11a>
 8007d72:	2300      	movs	r3, #0
 8007d74:	3401      	adds	r4, #1
 8007d76:	9305      	str	r3, [sp, #20]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f04f 0c0a 	mov.w	ip, #10
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d84:	3a30      	subs	r2, #48	; 0x30
 8007d86:	2a09      	cmp	r2, #9
 8007d88:	d903      	bls.n	8007d92 <_vfiprintf_r+0x1ee>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0c5      	beq.n	8007d1a <_vfiprintf_r+0x176>
 8007d8e:	9105      	str	r1, [sp, #20]
 8007d90:	e7c3      	b.n	8007d1a <_vfiprintf_r+0x176>
 8007d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d96:	4604      	mov	r4, r0
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e7f0      	b.n	8007d7e <_vfiprintf_r+0x1da>
 8007d9c:	ab03      	add	r3, sp, #12
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	462a      	mov	r2, r5
 8007da2:	4b16      	ldr	r3, [pc, #88]	; (8007dfc <_vfiprintf_r+0x258>)
 8007da4:	a904      	add	r1, sp, #16
 8007da6:	4630      	mov	r0, r6
 8007da8:	f7fd fe24 	bl	80059f4 <_printf_float>
 8007dac:	4607      	mov	r7, r0
 8007dae:	1c78      	adds	r0, r7, #1
 8007db0:	d1d6      	bne.n	8007d60 <_vfiprintf_r+0x1bc>
 8007db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007db4:	07d9      	lsls	r1, r3, #31
 8007db6:	d405      	bmi.n	8007dc4 <_vfiprintf_r+0x220>
 8007db8:	89ab      	ldrh	r3, [r5, #12]
 8007dba:	059a      	lsls	r2, r3, #22
 8007dbc:	d402      	bmi.n	8007dc4 <_vfiprintf_r+0x220>
 8007dbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dc0:	f000 faaf 	bl	8008322 <__retarget_lock_release_recursive>
 8007dc4:	89ab      	ldrh	r3, [r5, #12]
 8007dc6:	065b      	lsls	r3, r3, #25
 8007dc8:	f53f af12 	bmi.w	8007bf0 <_vfiprintf_r+0x4c>
 8007dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dce:	e711      	b.n	8007bf4 <_vfiprintf_r+0x50>
 8007dd0:	ab03      	add	r3, sp, #12
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	462a      	mov	r2, r5
 8007dd6:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <_vfiprintf_r+0x258>)
 8007dd8:	a904      	add	r1, sp, #16
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f7fe f8ae 	bl	8005f3c <_printf_i>
 8007de0:	e7e4      	b.n	8007dac <_vfiprintf_r+0x208>
 8007de2:	bf00      	nop
 8007de4:	0800921c 	.word	0x0800921c
 8007de8:	0800923c 	.word	0x0800923c
 8007dec:	080091fc 	.word	0x080091fc
 8007df0:	080090a4 	.word	0x080090a4
 8007df4:	080090ae 	.word	0x080090ae
 8007df8:	080059f5 	.word	0x080059f5
 8007dfc:	08007b7f 	.word	0x08007b7f
 8007e00:	080090aa 	.word	0x080090aa

08007e04 <__swbuf_r>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	460e      	mov	r6, r1
 8007e08:	4614      	mov	r4, r2
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	b118      	cbz	r0, 8007e16 <__swbuf_r+0x12>
 8007e0e:	6983      	ldr	r3, [r0, #24]
 8007e10:	b90b      	cbnz	r3, 8007e16 <__swbuf_r+0x12>
 8007e12:	f000 f9e7 	bl	80081e4 <__sinit>
 8007e16:	4b21      	ldr	r3, [pc, #132]	; (8007e9c <__swbuf_r+0x98>)
 8007e18:	429c      	cmp	r4, r3
 8007e1a:	d12b      	bne.n	8007e74 <__swbuf_r+0x70>
 8007e1c:	686c      	ldr	r4, [r5, #4]
 8007e1e:	69a3      	ldr	r3, [r4, #24]
 8007e20:	60a3      	str	r3, [r4, #8]
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	071a      	lsls	r2, r3, #28
 8007e26:	d52f      	bpl.n	8007e88 <__swbuf_r+0x84>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	b36b      	cbz	r3, 8007e88 <__swbuf_r+0x84>
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	6820      	ldr	r0, [r4, #0]
 8007e30:	1ac0      	subs	r0, r0, r3
 8007e32:	6963      	ldr	r3, [r4, #20]
 8007e34:	b2f6      	uxtb	r6, r6
 8007e36:	4283      	cmp	r3, r0
 8007e38:	4637      	mov	r7, r6
 8007e3a:	dc04      	bgt.n	8007e46 <__swbuf_r+0x42>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 f93c 	bl	80080bc <_fflush_r>
 8007e44:	bb30      	cbnz	r0, 8007e94 <__swbuf_r+0x90>
 8007e46:	68a3      	ldr	r3, [r4, #8]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	60a3      	str	r3, [r4, #8]
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	6022      	str	r2, [r4, #0]
 8007e52:	701e      	strb	r6, [r3, #0]
 8007e54:	6963      	ldr	r3, [r4, #20]
 8007e56:	3001      	adds	r0, #1
 8007e58:	4283      	cmp	r3, r0
 8007e5a:	d004      	beq.n	8007e66 <__swbuf_r+0x62>
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	07db      	lsls	r3, r3, #31
 8007e60:	d506      	bpl.n	8007e70 <__swbuf_r+0x6c>
 8007e62:	2e0a      	cmp	r6, #10
 8007e64:	d104      	bne.n	8007e70 <__swbuf_r+0x6c>
 8007e66:	4621      	mov	r1, r4
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f000 f927 	bl	80080bc <_fflush_r>
 8007e6e:	b988      	cbnz	r0, 8007e94 <__swbuf_r+0x90>
 8007e70:	4638      	mov	r0, r7
 8007e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <__swbuf_r+0x9c>)
 8007e76:	429c      	cmp	r4, r3
 8007e78:	d101      	bne.n	8007e7e <__swbuf_r+0x7a>
 8007e7a:	68ac      	ldr	r4, [r5, #8]
 8007e7c:	e7cf      	b.n	8007e1e <__swbuf_r+0x1a>
 8007e7e:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <__swbuf_r+0xa0>)
 8007e80:	429c      	cmp	r4, r3
 8007e82:	bf08      	it	eq
 8007e84:	68ec      	ldreq	r4, [r5, #12]
 8007e86:	e7ca      	b.n	8007e1e <__swbuf_r+0x1a>
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 f81a 	bl	8007ec4 <__swsetup_r>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d0cb      	beq.n	8007e2c <__swbuf_r+0x28>
 8007e94:	f04f 37ff 	mov.w	r7, #4294967295
 8007e98:	e7ea      	b.n	8007e70 <__swbuf_r+0x6c>
 8007e9a:	bf00      	nop
 8007e9c:	0800921c 	.word	0x0800921c
 8007ea0:	0800923c 	.word	0x0800923c
 8007ea4:	080091fc 	.word	0x080091fc

08007ea8 <__ascii_wctomb>:
 8007ea8:	b149      	cbz	r1, 8007ebe <__ascii_wctomb+0x16>
 8007eaa:	2aff      	cmp	r2, #255	; 0xff
 8007eac:	bf85      	ittet	hi
 8007eae:	238a      	movhi	r3, #138	; 0x8a
 8007eb0:	6003      	strhi	r3, [r0, #0]
 8007eb2:	700a      	strbls	r2, [r1, #0]
 8007eb4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007eb8:	bf98      	it	ls
 8007eba:	2001      	movls	r0, #1
 8007ebc:	4770      	bx	lr
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	4770      	bx	lr
	...

08007ec4 <__swsetup_r>:
 8007ec4:	4b32      	ldr	r3, [pc, #200]	; (8007f90 <__swsetup_r+0xcc>)
 8007ec6:	b570      	push	{r4, r5, r6, lr}
 8007ec8:	681d      	ldr	r5, [r3, #0]
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	b125      	cbz	r5, 8007eda <__swsetup_r+0x16>
 8007ed0:	69ab      	ldr	r3, [r5, #24]
 8007ed2:	b913      	cbnz	r3, 8007eda <__swsetup_r+0x16>
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f000 f985 	bl	80081e4 <__sinit>
 8007eda:	4b2e      	ldr	r3, [pc, #184]	; (8007f94 <__swsetup_r+0xd0>)
 8007edc:	429c      	cmp	r4, r3
 8007ede:	d10f      	bne.n	8007f00 <__swsetup_r+0x3c>
 8007ee0:	686c      	ldr	r4, [r5, #4]
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee8:	0719      	lsls	r1, r3, #28
 8007eea:	d42c      	bmi.n	8007f46 <__swsetup_r+0x82>
 8007eec:	06dd      	lsls	r5, r3, #27
 8007eee:	d411      	bmi.n	8007f14 <__swsetup_r+0x50>
 8007ef0:	2309      	movs	r3, #9
 8007ef2:	6033      	str	r3, [r6, #0]
 8007ef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	f04f 30ff 	mov.w	r0, #4294967295
 8007efe:	e03e      	b.n	8007f7e <__swsetup_r+0xba>
 8007f00:	4b25      	ldr	r3, [pc, #148]	; (8007f98 <__swsetup_r+0xd4>)
 8007f02:	429c      	cmp	r4, r3
 8007f04:	d101      	bne.n	8007f0a <__swsetup_r+0x46>
 8007f06:	68ac      	ldr	r4, [r5, #8]
 8007f08:	e7eb      	b.n	8007ee2 <__swsetup_r+0x1e>
 8007f0a:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <__swsetup_r+0xd8>)
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	bf08      	it	eq
 8007f10:	68ec      	ldreq	r4, [r5, #12]
 8007f12:	e7e6      	b.n	8007ee2 <__swsetup_r+0x1e>
 8007f14:	0758      	lsls	r0, r3, #29
 8007f16:	d512      	bpl.n	8007f3e <__swsetup_r+0x7a>
 8007f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f1a:	b141      	cbz	r1, 8007f2e <__swsetup_r+0x6a>
 8007f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f20:	4299      	cmp	r1, r3
 8007f22:	d002      	beq.n	8007f2a <__swsetup_r+0x66>
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7ff fb6f 	bl	8007608 <_free_r>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	2300      	movs	r3, #0
 8007f38:	6063      	str	r3, [r4, #4]
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	f043 0308 	orr.w	r3, r3, #8
 8007f44:	81a3      	strh	r3, [r4, #12]
 8007f46:	6923      	ldr	r3, [r4, #16]
 8007f48:	b94b      	cbnz	r3, 8007f5e <__swsetup_r+0x9a>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f54:	d003      	beq.n	8007f5e <__swsetup_r+0x9a>
 8007f56:	4621      	mov	r1, r4
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 fa07 	bl	800836c <__smakebuf_r>
 8007f5e:	89a0      	ldrh	r0, [r4, #12]
 8007f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f64:	f010 0301 	ands.w	r3, r0, #1
 8007f68:	d00a      	beq.n	8007f80 <__swsetup_r+0xbc>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60a3      	str	r3, [r4, #8]
 8007f6e:	6963      	ldr	r3, [r4, #20]
 8007f70:	425b      	negs	r3, r3
 8007f72:	61a3      	str	r3, [r4, #24]
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	b943      	cbnz	r3, 8007f8a <__swsetup_r+0xc6>
 8007f78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f7c:	d1ba      	bne.n	8007ef4 <__swsetup_r+0x30>
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	0781      	lsls	r1, r0, #30
 8007f82:	bf58      	it	pl
 8007f84:	6963      	ldrpl	r3, [r4, #20]
 8007f86:	60a3      	str	r3, [r4, #8]
 8007f88:	e7f4      	b.n	8007f74 <__swsetup_r+0xb0>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e7f7      	b.n	8007f7e <__swsetup_r+0xba>
 8007f8e:	bf00      	nop
 8007f90:	2000001c 	.word	0x2000001c
 8007f94:	0800921c 	.word	0x0800921c
 8007f98:	0800923c 	.word	0x0800923c
 8007f9c:	080091fc 	.word	0x080091fc

08007fa0 <abort>:
 8007fa0:	b508      	push	{r3, lr}
 8007fa2:	2006      	movs	r0, #6
 8007fa4:	f000 fa52 	bl	800844c <raise>
 8007fa8:	2001      	movs	r0, #1
 8007faa:	f7fa fb3b 	bl	8002624 <_exit>
	...

08007fb0 <__sflush_r>:
 8007fb0:	898a      	ldrh	r2, [r1, #12]
 8007fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	0710      	lsls	r0, r2, #28
 8007fba:	460c      	mov	r4, r1
 8007fbc:	d458      	bmi.n	8008070 <__sflush_r+0xc0>
 8007fbe:	684b      	ldr	r3, [r1, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dc05      	bgt.n	8007fd0 <__sflush_r+0x20>
 8007fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	dc02      	bgt.n	8007fd0 <__sflush_r+0x20>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fd2:	2e00      	cmp	r6, #0
 8007fd4:	d0f9      	beq.n	8007fca <__sflush_r+0x1a>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fdc:	682f      	ldr	r7, [r5, #0]
 8007fde:	602b      	str	r3, [r5, #0]
 8007fe0:	d032      	beq.n	8008048 <__sflush_r+0x98>
 8007fe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	075a      	lsls	r2, r3, #29
 8007fe8:	d505      	bpl.n	8007ff6 <__sflush_r+0x46>
 8007fea:	6863      	ldr	r3, [r4, #4]
 8007fec:	1ac0      	subs	r0, r0, r3
 8007fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ff0:	b10b      	cbz	r3, 8007ff6 <__sflush_r+0x46>
 8007ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ff4:	1ac0      	subs	r0, r0, r3
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ffc:	6a21      	ldr	r1, [r4, #32]
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b0      	blx	r6
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	d106      	bne.n	8008016 <__sflush_r+0x66>
 8008008:	6829      	ldr	r1, [r5, #0]
 800800a:	291d      	cmp	r1, #29
 800800c:	d82c      	bhi.n	8008068 <__sflush_r+0xb8>
 800800e:	4a2a      	ldr	r2, [pc, #168]	; (80080b8 <__sflush_r+0x108>)
 8008010:	40ca      	lsrs	r2, r1
 8008012:	07d6      	lsls	r6, r2, #31
 8008014:	d528      	bpl.n	8008068 <__sflush_r+0xb8>
 8008016:	2200      	movs	r2, #0
 8008018:	6062      	str	r2, [r4, #4]
 800801a:	04d9      	lsls	r1, r3, #19
 800801c:	6922      	ldr	r2, [r4, #16]
 800801e:	6022      	str	r2, [r4, #0]
 8008020:	d504      	bpl.n	800802c <__sflush_r+0x7c>
 8008022:	1c42      	adds	r2, r0, #1
 8008024:	d101      	bne.n	800802a <__sflush_r+0x7a>
 8008026:	682b      	ldr	r3, [r5, #0]
 8008028:	b903      	cbnz	r3, 800802c <__sflush_r+0x7c>
 800802a:	6560      	str	r0, [r4, #84]	; 0x54
 800802c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800802e:	602f      	str	r7, [r5, #0]
 8008030:	2900      	cmp	r1, #0
 8008032:	d0ca      	beq.n	8007fca <__sflush_r+0x1a>
 8008034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008038:	4299      	cmp	r1, r3
 800803a:	d002      	beq.n	8008042 <__sflush_r+0x92>
 800803c:	4628      	mov	r0, r5
 800803e:	f7ff fae3 	bl	8007608 <_free_r>
 8008042:	2000      	movs	r0, #0
 8008044:	6360      	str	r0, [r4, #52]	; 0x34
 8008046:	e7c1      	b.n	8007fcc <__sflush_r+0x1c>
 8008048:	6a21      	ldr	r1, [r4, #32]
 800804a:	2301      	movs	r3, #1
 800804c:	4628      	mov	r0, r5
 800804e:	47b0      	blx	r6
 8008050:	1c41      	adds	r1, r0, #1
 8008052:	d1c7      	bne.n	8007fe4 <__sflush_r+0x34>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0c4      	beq.n	8007fe4 <__sflush_r+0x34>
 800805a:	2b1d      	cmp	r3, #29
 800805c:	d001      	beq.n	8008062 <__sflush_r+0xb2>
 800805e:	2b16      	cmp	r3, #22
 8008060:	d101      	bne.n	8008066 <__sflush_r+0xb6>
 8008062:	602f      	str	r7, [r5, #0]
 8008064:	e7b1      	b.n	8007fca <__sflush_r+0x1a>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800806c:	81a3      	strh	r3, [r4, #12]
 800806e:	e7ad      	b.n	8007fcc <__sflush_r+0x1c>
 8008070:	690f      	ldr	r7, [r1, #16]
 8008072:	2f00      	cmp	r7, #0
 8008074:	d0a9      	beq.n	8007fca <__sflush_r+0x1a>
 8008076:	0793      	lsls	r3, r2, #30
 8008078:	680e      	ldr	r6, [r1, #0]
 800807a:	bf08      	it	eq
 800807c:	694b      	ldreq	r3, [r1, #20]
 800807e:	600f      	str	r7, [r1, #0]
 8008080:	bf18      	it	ne
 8008082:	2300      	movne	r3, #0
 8008084:	eba6 0807 	sub.w	r8, r6, r7
 8008088:	608b      	str	r3, [r1, #8]
 800808a:	f1b8 0f00 	cmp.w	r8, #0
 800808e:	dd9c      	ble.n	8007fca <__sflush_r+0x1a>
 8008090:	6a21      	ldr	r1, [r4, #32]
 8008092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008094:	4643      	mov	r3, r8
 8008096:	463a      	mov	r2, r7
 8008098:	4628      	mov	r0, r5
 800809a:	47b0      	blx	r6
 800809c:	2800      	cmp	r0, #0
 800809e:	dc06      	bgt.n	80080ae <__sflush_r+0xfe>
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a6:	81a3      	strh	r3, [r4, #12]
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	e78e      	b.n	8007fcc <__sflush_r+0x1c>
 80080ae:	4407      	add	r7, r0
 80080b0:	eba8 0800 	sub.w	r8, r8, r0
 80080b4:	e7e9      	b.n	800808a <__sflush_r+0xda>
 80080b6:	bf00      	nop
 80080b8:	20400001 	.word	0x20400001

080080bc <_fflush_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	690b      	ldr	r3, [r1, #16]
 80080c0:	4605      	mov	r5, r0
 80080c2:	460c      	mov	r4, r1
 80080c4:	b913      	cbnz	r3, 80080cc <_fflush_r+0x10>
 80080c6:	2500      	movs	r5, #0
 80080c8:	4628      	mov	r0, r5
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	b118      	cbz	r0, 80080d6 <_fflush_r+0x1a>
 80080ce:	6983      	ldr	r3, [r0, #24]
 80080d0:	b90b      	cbnz	r3, 80080d6 <_fflush_r+0x1a>
 80080d2:	f000 f887 	bl	80081e4 <__sinit>
 80080d6:	4b14      	ldr	r3, [pc, #80]	; (8008128 <_fflush_r+0x6c>)
 80080d8:	429c      	cmp	r4, r3
 80080da:	d11b      	bne.n	8008114 <_fflush_r+0x58>
 80080dc:	686c      	ldr	r4, [r5, #4]
 80080de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0ef      	beq.n	80080c6 <_fflush_r+0xa>
 80080e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080e8:	07d0      	lsls	r0, r2, #31
 80080ea:	d404      	bmi.n	80080f6 <_fflush_r+0x3a>
 80080ec:	0599      	lsls	r1, r3, #22
 80080ee:	d402      	bmi.n	80080f6 <_fflush_r+0x3a>
 80080f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080f2:	f000 f915 	bl	8008320 <__retarget_lock_acquire_recursive>
 80080f6:	4628      	mov	r0, r5
 80080f8:	4621      	mov	r1, r4
 80080fa:	f7ff ff59 	bl	8007fb0 <__sflush_r>
 80080fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008100:	07da      	lsls	r2, r3, #31
 8008102:	4605      	mov	r5, r0
 8008104:	d4e0      	bmi.n	80080c8 <_fflush_r+0xc>
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	059b      	lsls	r3, r3, #22
 800810a:	d4dd      	bmi.n	80080c8 <_fflush_r+0xc>
 800810c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810e:	f000 f908 	bl	8008322 <__retarget_lock_release_recursive>
 8008112:	e7d9      	b.n	80080c8 <_fflush_r+0xc>
 8008114:	4b05      	ldr	r3, [pc, #20]	; (800812c <_fflush_r+0x70>)
 8008116:	429c      	cmp	r4, r3
 8008118:	d101      	bne.n	800811e <_fflush_r+0x62>
 800811a:	68ac      	ldr	r4, [r5, #8]
 800811c:	e7df      	b.n	80080de <_fflush_r+0x22>
 800811e:	4b04      	ldr	r3, [pc, #16]	; (8008130 <_fflush_r+0x74>)
 8008120:	429c      	cmp	r4, r3
 8008122:	bf08      	it	eq
 8008124:	68ec      	ldreq	r4, [r5, #12]
 8008126:	e7da      	b.n	80080de <_fflush_r+0x22>
 8008128:	0800921c 	.word	0x0800921c
 800812c:	0800923c 	.word	0x0800923c
 8008130:	080091fc 	.word	0x080091fc

08008134 <std>:
 8008134:	2300      	movs	r3, #0
 8008136:	b510      	push	{r4, lr}
 8008138:	4604      	mov	r4, r0
 800813a:	e9c0 3300 	strd	r3, r3, [r0]
 800813e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008142:	6083      	str	r3, [r0, #8]
 8008144:	8181      	strh	r1, [r0, #12]
 8008146:	6643      	str	r3, [r0, #100]	; 0x64
 8008148:	81c2      	strh	r2, [r0, #14]
 800814a:	6183      	str	r3, [r0, #24]
 800814c:	4619      	mov	r1, r3
 800814e:	2208      	movs	r2, #8
 8008150:	305c      	adds	r0, #92	; 0x5c
 8008152:	f7fd fba7 	bl	80058a4 <memset>
 8008156:	4b05      	ldr	r3, [pc, #20]	; (800816c <std+0x38>)
 8008158:	6263      	str	r3, [r4, #36]	; 0x24
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <std+0x3c>)
 800815c:	62a3      	str	r3, [r4, #40]	; 0x28
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <std+0x40>)
 8008160:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008162:	4b05      	ldr	r3, [pc, #20]	; (8008178 <std+0x44>)
 8008164:	6224      	str	r4, [r4, #32]
 8008166:	6323      	str	r3, [r4, #48]	; 0x30
 8008168:	bd10      	pop	{r4, pc}
 800816a:	bf00      	nop
 800816c:	08008485 	.word	0x08008485
 8008170:	080084a7 	.word	0x080084a7
 8008174:	080084df 	.word	0x080084df
 8008178:	08008503 	.word	0x08008503

0800817c <_cleanup_r>:
 800817c:	4901      	ldr	r1, [pc, #4]	; (8008184 <_cleanup_r+0x8>)
 800817e:	f000 b8af 	b.w	80082e0 <_fwalk_reent>
 8008182:	bf00      	nop
 8008184:	080080bd 	.word	0x080080bd

08008188 <__sfmoreglue>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	1e4a      	subs	r2, r1, #1
 800818c:	2568      	movs	r5, #104	; 0x68
 800818e:	4355      	muls	r5, r2
 8008190:	460e      	mov	r6, r1
 8008192:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008196:	f7ff fa87 	bl	80076a8 <_malloc_r>
 800819a:	4604      	mov	r4, r0
 800819c:	b140      	cbz	r0, 80081b0 <__sfmoreglue+0x28>
 800819e:	2100      	movs	r1, #0
 80081a0:	e9c0 1600 	strd	r1, r6, [r0]
 80081a4:	300c      	adds	r0, #12
 80081a6:	60a0      	str	r0, [r4, #8]
 80081a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081ac:	f7fd fb7a 	bl	80058a4 <memset>
 80081b0:	4620      	mov	r0, r4
 80081b2:	bd70      	pop	{r4, r5, r6, pc}

080081b4 <__sfp_lock_acquire>:
 80081b4:	4801      	ldr	r0, [pc, #4]	; (80081bc <__sfp_lock_acquire+0x8>)
 80081b6:	f000 b8b3 	b.w	8008320 <__retarget_lock_acquire_recursive>
 80081ba:	bf00      	nop
 80081bc:	20000400 	.word	0x20000400

080081c0 <__sfp_lock_release>:
 80081c0:	4801      	ldr	r0, [pc, #4]	; (80081c8 <__sfp_lock_release+0x8>)
 80081c2:	f000 b8ae 	b.w	8008322 <__retarget_lock_release_recursive>
 80081c6:	bf00      	nop
 80081c8:	20000400 	.word	0x20000400

080081cc <__sinit_lock_acquire>:
 80081cc:	4801      	ldr	r0, [pc, #4]	; (80081d4 <__sinit_lock_acquire+0x8>)
 80081ce:	f000 b8a7 	b.w	8008320 <__retarget_lock_acquire_recursive>
 80081d2:	bf00      	nop
 80081d4:	200003fb 	.word	0x200003fb

080081d8 <__sinit_lock_release>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__sinit_lock_release+0x8>)
 80081da:	f000 b8a2 	b.w	8008322 <__retarget_lock_release_recursive>
 80081de:	bf00      	nop
 80081e0:	200003fb 	.word	0x200003fb

080081e4 <__sinit>:
 80081e4:	b510      	push	{r4, lr}
 80081e6:	4604      	mov	r4, r0
 80081e8:	f7ff fff0 	bl	80081cc <__sinit_lock_acquire>
 80081ec:	69a3      	ldr	r3, [r4, #24]
 80081ee:	b11b      	cbz	r3, 80081f8 <__sinit+0x14>
 80081f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f4:	f7ff bff0 	b.w	80081d8 <__sinit_lock_release>
 80081f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081fc:	6523      	str	r3, [r4, #80]	; 0x50
 80081fe:	4b13      	ldr	r3, [pc, #76]	; (800824c <__sinit+0x68>)
 8008200:	4a13      	ldr	r2, [pc, #76]	; (8008250 <__sinit+0x6c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	62a2      	str	r2, [r4, #40]	; 0x28
 8008206:	42a3      	cmp	r3, r4
 8008208:	bf04      	itt	eq
 800820a:	2301      	moveq	r3, #1
 800820c:	61a3      	streq	r3, [r4, #24]
 800820e:	4620      	mov	r0, r4
 8008210:	f000 f820 	bl	8008254 <__sfp>
 8008214:	6060      	str	r0, [r4, #4]
 8008216:	4620      	mov	r0, r4
 8008218:	f000 f81c 	bl	8008254 <__sfp>
 800821c:	60a0      	str	r0, [r4, #8]
 800821e:	4620      	mov	r0, r4
 8008220:	f000 f818 	bl	8008254 <__sfp>
 8008224:	2200      	movs	r2, #0
 8008226:	60e0      	str	r0, [r4, #12]
 8008228:	2104      	movs	r1, #4
 800822a:	6860      	ldr	r0, [r4, #4]
 800822c:	f7ff ff82 	bl	8008134 <std>
 8008230:	68a0      	ldr	r0, [r4, #8]
 8008232:	2201      	movs	r2, #1
 8008234:	2109      	movs	r1, #9
 8008236:	f7ff ff7d 	bl	8008134 <std>
 800823a:	68e0      	ldr	r0, [r4, #12]
 800823c:	2202      	movs	r2, #2
 800823e:	2112      	movs	r1, #18
 8008240:	f7ff ff78 	bl	8008134 <std>
 8008244:	2301      	movs	r3, #1
 8008246:	61a3      	str	r3, [r4, #24]
 8008248:	e7d2      	b.n	80081f0 <__sinit+0xc>
 800824a:	bf00      	nop
 800824c:	08008e7c 	.word	0x08008e7c
 8008250:	0800817d 	.word	0x0800817d

08008254 <__sfp>:
 8008254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008256:	4607      	mov	r7, r0
 8008258:	f7ff ffac 	bl	80081b4 <__sfp_lock_acquire>
 800825c:	4b1e      	ldr	r3, [pc, #120]	; (80082d8 <__sfp+0x84>)
 800825e:	681e      	ldr	r6, [r3, #0]
 8008260:	69b3      	ldr	r3, [r6, #24]
 8008262:	b913      	cbnz	r3, 800826a <__sfp+0x16>
 8008264:	4630      	mov	r0, r6
 8008266:	f7ff ffbd 	bl	80081e4 <__sinit>
 800826a:	3648      	adds	r6, #72	; 0x48
 800826c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008270:	3b01      	subs	r3, #1
 8008272:	d503      	bpl.n	800827c <__sfp+0x28>
 8008274:	6833      	ldr	r3, [r6, #0]
 8008276:	b30b      	cbz	r3, 80082bc <__sfp+0x68>
 8008278:	6836      	ldr	r6, [r6, #0]
 800827a:	e7f7      	b.n	800826c <__sfp+0x18>
 800827c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008280:	b9d5      	cbnz	r5, 80082b8 <__sfp+0x64>
 8008282:	4b16      	ldr	r3, [pc, #88]	; (80082dc <__sfp+0x88>)
 8008284:	60e3      	str	r3, [r4, #12]
 8008286:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800828a:	6665      	str	r5, [r4, #100]	; 0x64
 800828c:	f000 f847 	bl	800831e <__retarget_lock_init_recursive>
 8008290:	f7ff ff96 	bl	80081c0 <__sfp_lock_release>
 8008294:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008298:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800829c:	6025      	str	r5, [r4, #0]
 800829e:	61a5      	str	r5, [r4, #24]
 80082a0:	2208      	movs	r2, #8
 80082a2:	4629      	mov	r1, r5
 80082a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082a8:	f7fd fafc 	bl	80058a4 <memset>
 80082ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082b4:	4620      	mov	r0, r4
 80082b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b8:	3468      	adds	r4, #104	; 0x68
 80082ba:	e7d9      	b.n	8008270 <__sfp+0x1c>
 80082bc:	2104      	movs	r1, #4
 80082be:	4638      	mov	r0, r7
 80082c0:	f7ff ff62 	bl	8008188 <__sfmoreglue>
 80082c4:	4604      	mov	r4, r0
 80082c6:	6030      	str	r0, [r6, #0]
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d1d5      	bne.n	8008278 <__sfp+0x24>
 80082cc:	f7ff ff78 	bl	80081c0 <__sfp_lock_release>
 80082d0:	230c      	movs	r3, #12
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	e7ee      	b.n	80082b4 <__sfp+0x60>
 80082d6:	bf00      	nop
 80082d8:	08008e7c 	.word	0x08008e7c
 80082dc:	ffff0001 	.word	0xffff0001

080082e0 <_fwalk_reent>:
 80082e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e4:	4606      	mov	r6, r0
 80082e6:	4688      	mov	r8, r1
 80082e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082ec:	2700      	movs	r7, #0
 80082ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082f2:	f1b9 0901 	subs.w	r9, r9, #1
 80082f6:	d505      	bpl.n	8008304 <_fwalk_reent+0x24>
 80082f8:	6824      	ldr	r4, [r4, #0]
 80082fa:	2c00      	cmp	r4, #0
 80082fc:	d1f7      	bne.n	80082ee <_fwalk_reent+0xe>
 80082fe:	4638      	mov	r0, r7
 8008300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008304:	89ab      	ldrh	r3, [r5, #12]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d907      	bls.n	800831a <_fwalk_reent+0x3a>
 800830a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800830e:	3301      	adds	r3, #1
 8008310:	d003      	beq.n	800831a <_fwalk_reent+0x3a>
 8008312:	4629      	mov	r1, r5
 8008314:	4630      	mov	r0, r6
 8008316:	47c0      	blx	r8
 8008318:	4307      	orrs	r7, r0
 800831a:	3568      	adds	r5, #104	; 0x68
 800831c:	e7e9      	b.n	80082f2 <_fwalk_reent+0x12>

0800831e <__retarget_lock_init_recursive>:
 800831e:	4770      	bx	lr

08008320 <__retarget_lock_acquire_recursive>:
 8008320:	4770      	bx	lr

08008322 <__retarget_lock_release_recursive>:
 8008322:	4770      	bx	lr

08008324 <__swhatbuf_r>:
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	460e      	mov	r6, r1
 8008328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832c:	2900      	cmp	r1, #0
 800832e:	b096      	sub	sp, #88	; 0x58
 8008330:	4614      	mov	r4, r2
 8008332:	461d      	mov	r5, r3
 8008334:	da07      	bge.n	8008346 <__swhatbuf_r+0x22>
 8008336:	2300      	movs	r3, #0
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	89b3      	ldrh	r3, [r6, #12]
 800833c:	061a      	lsls	r2, r3, #24
 800833e:	d410      	bmi.n	8008362 <__swhatbuf_r+0x3e>
 8008340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008344:	e00e      	b.n	8008364 <__swhatbuf_r+0x40>
 8008346:	466a      	mov	r2, sp
 8008348:	f000 f902 	bl	8008550 <_fstat_r>
 800834c:	2800      	cmp	r0, #0
 800834e:	dbf2      	blt.n	8008336 <__swhatbuf_r+0x12>
 8008350:	9a01      	ldr	r2, [sp, #4]
 8008352:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008356:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800835a:	425a      	negs	r2, r3
 800835c:	415a      	adcs	r2, r3
 800835e:	602a      	str	r2, [r5, #0]
 8008360:	e7ee      	b.n	8008340 <__swhatbuf_r+0x1c>
 8008362:	2340      	movs	r3, #64	; 0x40
 8008364:	2000      	movs	r0, #0
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	b016      	add	sp, #88	; 0x58
 800836a:	bd70      	pop	{r4, r5, r6, pc}

0800836c <__smakebuf_r>:
 800836c:	898b      	ldrh	r3, [r1, #12]
 800836e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008370:	079d      	lsls	r5, r3, #30
 8008372:	4606      	mov	r6, r0
 8008374:	460c      	mov	r4, r1
 8008376:	d507      	bpl.n	8008388 <__smakebuf_r+0x1c>
 8008378:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	6123      	str	r3, [r4, #16]
 8008380:	2301      	movs	r3, #1
 8008382:	6163      	str	r3, [r4, #20]
 8008384:	b002      	add	sp, #8
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	ab01      	add	r3, sp, #4
 800838a:	466a      	mov	r2, sp
 800838c:	f7ff ffca 	bl	8008324 <__swhatbuf_r>
 8008390:	9900      	ldr	r1, [sp, #0]
 8008392:	4605      	mov	r5, r0
 8008394:	4630      	mov	r0, r6
 8008396:	f7ff f987 	bl	80076a8 <_malloc_r>
 800839a:	b948      	cbnz	r0, 80083b0 <__smakebuf_r+0x44>
 800839c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a0:	059a      	lsls	r2, r3, #22
 80083a2:	d4ef      	bmi.n	8008384 <__smakebuf_r+0x18>
 80083a4:	f023 0303 	bic.w	r3, r3, #3
 80083a8:	f043 0302 	orr.w	r3, r3, #2
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	e7e3      	b.n	8008378 <__smakebuf_r+0xc>
 80083b0:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <__smakebuf_r+0x7c>)
 80083b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	6020      	str	r0, [r4, #0]
 80083b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083bc:	81a3      	strh	r3, [r4, #12]
 80083be:	9b00      	ldr	r3, [sp, #0]
 80083c0:	6163      	str	r3, [r4, #20]
 80083c2:	9b01      	ldr	r3, [sp, #4]
 80083c4:	6120      	str	r0, [r4, #16]
 80083c6:	b15b      	cbz	r3, 80083e0 <__smakebuf_r+0x74>
 80083c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083cc:	4630      	mov	r0, r6
 80083ce:	f000 f8d1 	bl	8008574 <_isatty_r>
 80083d2:	b128      	cbz	r0, 80083e0 <__smakebuf_r+0x74>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f023 0303 	bic.w	r3, r3, #3
 80083da:	f043 0301 	orr.w	r3, r3, #1
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	89a0      	ldrh	r0, [r4, #12]
 80083e2:	4305      	orrs	r5, r0
 80083e4:	81a5      	strh	r5, [r4, #12]
 80083e6:	e7cd      	b.n	8008384 <__smakebuf_r+0x18>
 80083e8:	0800817d 	.word	0x0800817d

080083ec <_malloc_usable_size_r>:
 80083ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f0:	1f18      	subs	r0, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfbc      	itt	lt
 80083f6:	580b      	ldrlt	r3, [r1, r0]
 80083f8:	18c0      	addlt	r0, r0, r3
 80083fa:	4770      	bx	lr

080083fc <_raise_r>:
 80083fc:	291f      	cmp	r1, #31
 80083fe:	b538      	push	{r3, r4, r5, lr}
 8008400:	4604      	mov	r4, r0
 8008402:	460d      	mov	r5, r1
 8008404:	d904      	bls.n	8008410 <_raise_r+0x14>
 8008406:	2316      	movs	r3, #22
 8008408:	6003      	str	r3, [r0, #0]
 800840a:	f04f 30ff 	mov.w	r0, #4294967295
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008412:	b112      	cbz	r2, 800841a <_raise_r+0x1e>
 8008414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008418:	b94b      	cbnz	r3, 800842e <_raise_r+0x32>
 800841a:	4620      	mov	r0, r4
 800841c:	f000 f830 	bl	8008480 <_getpid_r>
 8008420:	462a      	mov	r2, r5
 8008422:	4601      	mov	r1, r0
 8008424:	4620      	mov	r0, r4
 8008426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800842a:	f000 b817 	b.w	800845c <_kill_r>
 800842e:	2b01      	cmp	r3, #1
 8008430:	d00a      	beq.n	8008448 <_raise_r+0x4c>
 8008432:	1c59      	adds	r1, r3, #1
 8008434:	d103      	bne.n	800843e <_raise_r+0x42>
 8008436:	2316      	movs	r3, #22
 8008438:	6003      	str	r3, [r0, #0]
 800843a:	2001      	movs	r0, #1
 800843c:	e7e7      	b.n	800840e <_raise_r+0x12>
 800843e:	2400      	movs	r4, #0
 8008440:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008444:	4628      	mov	r0, r5
 8008446:	4798      	blx	r3
 8008448:	2000      	movs	r0, #0
 800844a:	e7e0      	b.n	800840e <_raise_r+0x12>

0800844c <raise>:
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <raise+0xc>)
 800844e:	4601      	mov	r1, r0
 8008450:	6818      	ldr	r0, [r3, #0]
 8008452:	f7ff bfd3 	b.w	80083fc <_raise_r>
 8008456:	bf00      	nop
 8008458:	2000001c 	.word	0x2000001c

0800845c <_kill_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d07      	ldr	r5, [pc, #28]	; (800847c <_kill_r+0x20>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	f7fa f8cb 	bl	8002604 <_kill>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	d102      	bne.n	8008478 <_kill_r+0x1c>
 8008472:	682b      	ldr	r3, [r5, #0]
 8008474:	b103      	cbz	r3, 8008478 <_kill_r+0x1c>
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	200003f4 	.word	0x200003f4

08008480 <_getpid_r>:
 8008480:	f7fa b8b8 	b.w	80025f4 <_getpid>

08008484 <__sread>:
 8008484:	b510      	push	{r4, lr}
 8008486:	460c      	mov	r4, r1
 8008488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848c:	f000 f894 	bl	80085b8 <_read_r>
 8008490:	2800      	cmp	r0, #0
 8008492:	bfab      	itete	ge
 8008494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008496:	89a3      	ldrhlt	r3, [r4, #12]
 8008498:	181b      	addge	r3, r3, r0
 800849a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800849e:	bfac      	ite	ge
 80084a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80084a2:	81a3      	strhlt	r3, [r4, #12]
 80084a4:	bd10      	pop	{r4, pc}

080084a6 <__swrite>:
 80084a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084aa:	461f      	mov	r7, r3
 80084ac:	898b      	ldrh	r3, [r1, #12]
 80084ae:	05db      	lsls	r3, r3, #23
 80084b0:	4605      	mov	r5, r0
 80084b2:	460c      	mov	r4, r1
 80084b4:	4616      	mov	r6, r2
 80084b6:	d505      	bpl.n	80084c4 <__swrite+0x1e>
 80084b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084bc:	2302      	movs	r3, #2
 80084be:	2200      	movs	r2, #0
 80084c0:	f000 f868 	bl	8008594 <_lseek_r>
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	4632      	mov	r2, r6
 80084d2:	463b      	mov	r3, r7
 80084d4:	4628      	mov	r0, r5
 80084d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084da:	f000 b817 	b.w	800850c <_write_r>

080084de <__sseek>:
 80084de:	b510      	push	{r4, lr}
 80084e0:	460c      	mov	r4, r1
 80084e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e6:	f000 f855 	bl	8008594 <_lseek_r>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	bf15      	itete	ne
 80084f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80084f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084fa:	81a3      	strheq	r3, [r4, #12]
 80084fc:	bf18      	it	ne
 80084fe:	81a3      	strhne	r3, [r4, #12]
 8008500:	bd10      	pop	{r4, pc}

08008502 <__sclose>:
 8008502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008506:	f000 b813 	b.w	8008530 <_close_r>
	...

0800850c <_write_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4d07      	ldr	r5, [pc, #28]	; (800852c <_write_r+0x20>)
 8008510:	4604      	mov	r4, r0
 8008512:	4608      	mov	r0, r1
 8008514:	4611      	mov	r1, r2
 8008516:	2200      	movs	r2, #0
 8008518:	602a      	str	r2, [r5, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	f7fa f8a9 	bl	8002672 <_write>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_write_r+0x1e>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_write_r+0x1e>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	200003f4 	.word	0x200003f4

08008530 <_close_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d06      	ldr	r5, [pc, #24]	; (800854c <_close_r+0x1c>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	f7fa f8b5 	bl	80026aa <_close>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_close_r+0x1a>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_close_r+0x1a>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	200003f4 	.word	0x200003f4

08008550 <_fstat_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4d07      	ldr	r5, [pc, #28]	; (8008570 <_fstat_r+0x20>)
 8008554:	2300      	movs	r3, #0
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	4611      	mov	r1, r2
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	f7fa f8b0 	bl	80026c2 <_fstat>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d102      	bne.n	800856c <_fstat_r+0x1c>
 8008566:	682b      	ldr	r3, [r5, #0]
 8008568:	b103      	cbz	r3, 800856c <_fstat_r+0x1c>
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	bd38      	pop	{r3, r4, r5, pc}
 800856e:	bf00      	nop
 8008570:	200003f4 	.word	0x200003f4

08008574 <_isatty_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d06      	ldr	r5, [pc, #24]	; (8008590 <_isatty_r+0x1c>)
 8008578:	2300      	movs	r3, #0
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	602b      	str	r3, [r5, #0]
 8008580:	f7fa f8af 	bl	80026e2 <_isatty>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_isatty_r+0x1a>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b103      	cbz	r3, 800858e <_isatty_r+0x1a>
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	200003f4 	.word	0x200003f4

08008594 <_lseek_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d07      	ldr	r5, [pc, #28]	; (80085b4 <_lseek_r+0x20>)
 8008598:	4604      	mov	r4, r0
 800859a:	4608      	mov	r0, r1
 800859c:	4611      	mov	r1, r2
 800859e:	2200      	movs	r2, #0
 80085a0:	602a      	str	r2, [r5, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	f7fa f8a8 	bl	80026f8 <_lseek>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_lseek_r+0x1e>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_lseek_r+0x1e>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	200003f4 	.word	0x200003f4

080085b8 <_read_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4d07      	ldr	r5, [pc, #28]	; (80085d8 <_read_r+0x20>)
 80085bc:	4604      	mov	r4, r0
 80085be:	4608      	mov	r0, r1
 80085c0:	4611      	mov	r1, r2
 80085c2:	2200      	movs	r2, #0
 80085c4:	602a      	str	r2, [r5, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	f7fa f836 	bl	8002638 <_read>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_read_r+0x1e>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_read_r+0x1e>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	200003f4 	.word	0x200003f4

080085dc <_init>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr

080085e8 <_fini>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr
